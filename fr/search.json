[{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":null,"dir":"","previous_headings":"","what":"motus design principles","title":"motus design principles","text":"collection developer notes means exhaustive correct Versioning Naming Conventions SQLite databases Special data downloads Special Files Data Files Testing Adding Updating","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"motus design principles","text":"3-4 different motus versions GitHub one time: master branch - Current release - e.g., v4.0.3 betaX branch - Current minor dev - e.g., v4.0.3.9000 sandbox branch - Current major dev - e.g., v4.0.3.9999 hotfix- branch - Current quick fixes merge master quickly v4.0.3.9001 (increments one greater betaX)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"naming-conventions","dir":"","previous_headings":"","what":"Naming Conventions","title":"motus design principles","text":"function single file utils.R contains internal utility functions ensureDBTables.R also contains makeTable() function create tables updateMotusDb.R also contains checkViews() function check custom views","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"sqlite-databases","dir":"","previous_headings":"","what":"SQLite databases","title":"motus design principles","text":"Empty SQLite tables created tables created makeTables() sql_versions created ./data-raw/updatesql.R database date, checkVersion() applies SQLite commands sql_version data frame update data base Sometimes involves making temporary copy table, re-creating (changes) original table copying data back. cases table structure created makeTables() function (can used updatesql.R well ensureDBTables() without duplicating process. checkDataVersion() used update data versions (database versions)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"talk-to-the-api---boxingunboxing-json-parameters","dir":"","previous_headings":"","what":"Talk to the API - Boxing/Unboxing JSON parameters","title":"motus design principles","text":"API requires parameters boxed (.e. [parameter]) unboxed (.e., parameter) srvQuery.R, jsonlite::toJSON() unboxes single value parameters parameter unboxed (usually single value parameter ), must go srvXXXX.R file, add (parameter) (e.g., srvTagsForAmbiguities.R) However, () won’t work NULL values, need get creative can either NULL values (e.g., srvTagMetadataForProjects.R) Potentially worth rethinking whether force boxing via class/type gets sent parameter…","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"special-data-downloads","dir":"","previous_headings":"","what":"Special data downloads","title":"motus design principles","text":"Data downloaded batchID main runs download pageDataByBatch() function sets process activity() nodeData() set functions used get going, passed pageDataByBatch() workhorse function","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"special-files","dir":"","previous_headings":"","what":"Special Files","title":"motus design principles","text":"Set session variables (.e., API links) motus options (.e. max batches get testing) Motus.R - Define empty session variable (filled z.onLoad.R) motus-pkg.R - Help file documentation motus package","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"data-files","dir":"","previous_headings":"","what":"Data Files","title":"motus design principles","text":"INCOMPLETE updatesql.R","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"motus design principles","text":"sample_auth() used automatic tests involving motus.sample project 176 local_auth() used load locally stored credentials private projects test local functionality skip_if_not_auth() used tests ) implement local authorizations present b) skip test present motusUpdateTagDB() pageDataByBatch() checks halt download getOption(\"motus.test.max\") batches testing environment. way testing can done much quickly variety projects/receivers. is_testing() internal function checks test run set_testing() internal function declaring testing performed (interactive testing, use set_testing() start set_testing(set = FALSE) stop)","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"adding-a-new-fieldcolumn","dir":"","previous_headings":"Adding and Updating","what":"Adding a new field/column","title":"motus design principles","text":"’s special SQL command, however, ’ll add hand table data-raw/field_names.R Add update data-raw/updatesql.R (run script, re-build package locally) Add test make sure new field added (tests/testthat/test_02_sqlite.R) filled data (tests/testthat/test_07_data_returned.R) Update internal data source(\"data-raw/sample_data.R\") Update NEWS.md Run tests Push!","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/CODE_DESIGN.html","id":"adding-a-new-table","dir":"","previous_headings":"Adding and Updating","what":"Adding a new table","title":"motus design principles","text":"Add section data-raw/field_names.R pulling new table data server adding list tables ensureDBTables.R either add list tables created empty, add section tables created immediately filled data (add data fill ). table batchIDs add list tables remove deprecated batchIDs deprecateBatches() deprecateBatches.R file. shouldn’t need add section data-raw/updatesql.R Add test make sure new field added (tests/testthat/test_02_sqlite.R) filled data (tests/testthat/test_07_data_returned.R) Update internal data source(\"data-raw/sample_data.R\") Update NEWS.md Push!","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Birds Canada  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. motus Copyright (C) 2019 Birds Canada This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"what-is-not-covered","dir":"Articles","previous_headings":"","what":"What is not covered","title":"Chapter 1 - Introduction","text":"articles cover register projects, receivers, tags Motus, manage tag station deployments, upload raw detection data processing. Information guide tasks can found resources tab Motus website. critical tag station metadata kept --date. Otherwise data projects, tags, receivers might processed. Please also review Motus collaboration policy, tag registration, fee schedule.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Chapter 1 - Introduction","text":"articles assume basic understanding R. Regardless whether new R , highly recommend become familiar R Data Science Garrett Grolemund Hadley Wickham. book covers import, visualize, summarize data R using tidyverse collection R packages. also provides invaluable framework organizing workflow create clean, reproducible code. follow lead , wherever possible, using tidyverse framework throughout articles.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"sample-datasets","dir":"Articles","previous_headings":"","what":"Sample datasets","title":"Chapter 1 - Introduction","text":"Throughout articles use subsets real datasets illustrate access, manage, explore analyze Motus data R. recommend run sample code chapter sample dataset running data, undoubtedly need modify code provide order deal effectively data (every situation different).","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"james-bay-shorebird-project","dir":"Articles","previous_headings":"Sample datasets","what":"James Bay Shorebird Project","title":"Chapter 1 - Introduction","text":"Chapters 2 6 use subset data James Bay Shorebird Project. James Bay Shorebird Project conducts monitoring research shorebirds staging along James Bay coast, collaborative effort among Ontario Ministry Natural Resources Forestry, Birds Canada, Trent University, Moose Cree First Nation, Environment Climate Change Canada’s Canadian Wildlife Service, conjunction larger conservation initiative involving James Bay First Nations Nature Canada. Royal Ontario Museum contributing partner 2016. goals project 1) improve ability estimate indices abundance population trends shorebird species staging along western James Bay coast, 2) understand movement patterns causes, 3) identify relative importance shorebird staging sites habitats. Collectively, information aid development conservation measures Red Knot shorebird species, Western Hemisphere Shorebird Reserve Network (WHSRN) designation. information can viewed James Bay Shorebird Project website, Facebook page, contacting project lead: Christian Friis Wildlife Biologist / Biologiste de la Faune Canadian Wildlife Service Environment Climate Change Canada / Government Canada Service Canadien de la Faune Environnement et Changement Climatique Canada / Gouvernement du Canadachristian.friis@ec.gc.ca / Tel: 416.739.4908","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"studies-of-migratory-birds-and-bats","dir":"Articles","previous_headings":"Sample datasets","what":"Studies of Migratory Birds and Bats","title":"Chapter 1 - Introduction","text":"Chapter 7, use subset data collected Motus project ‘Studies Migratory Birds Bats, 2014-2017’ (Projects #20 #50) illustrate calculation vanishing bearings birds departing stopover site. project holds Motus data several Western University projects took place southern Ontario, Canada. projects led principal investigators (Chris Guglielmo Yolanda Morbey) number graduate students. variety species birds bats tracked. information contact: Chris Guglielmo, Professor Department Biology, Western University, Canadacguglie2@uwo.ca / Tel: 519.661.2111 (ext. 81204) Yolanda Morbey, Associate Professor Department Biology, Western University, Canadaymorbey@uwo.ca / Tel: 519.661.2111 (ext. 80116)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Chapter 1 - Introduction","text":"articles largely based original Motus R Book Crewe et al. 2018, supplemented numerous Motus collaborators Birds Canada Motus staff. Motus international collaborative research network uses coordinated automated radio telemetry facilitate research education ecology conservation small organisms. Motus program Birds Canada partnership collaborating researchers organizations. Motus website includes list Motus partners collaborators. organization listed, please contact motus@birdscanada.org.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/01-introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Chapter 1 - Introduction","text":"Taylor, P. D., T. L. Crewe, S. . Mackenzie, D. Lepage, Y. Aubry, Z. Crysler, G. Finney, C. M. Francis, C. G. Guglielmo, D. J. Hamilton, R. L. Holberton, P. H. Loring, G. W. Mitchell, D. R. Norris, J. Paquet, R. . Ronconi, J. Smetzer, P. . Smith, L. J. Welch, B. K. Woodworth. 2017. Motus Wildlife Tracking System: collaborative research network enhance understanding wildlife movement. Avian Conservation Ecology 12(1):8. https://doi.org/10.5751/ACE-00953-120108. Next Chapter 2 - Installing packages (Explore articles)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/02-installing-packages.html","id":"installing-motus-r-packages","dir":"Articles","previous_headings":"","what":"Installing Motus R packages","title":"Chapter 2 - Installing packages","text":"Two R packages developed Motus users: motus: provides functions downloading updating detection deployment data, well creating summary plots, transforming (e.g. adding sunrise/sunset times) analyzing Motus data. motusData: provides sample datasets used articles Motus users can install latest stable versions R packages using install.packages() (see ). R packages, need install packages ; installation, need load package (using library()) time open new R session. avoid errors, please ensure using recent releases R RStudio. First update existing packages remotes package (may take ). Next, ’ll start installing required packages, already installed. used older version motus included use motusClient package, recommended first uninstall packages. proceed installation/update motus motusData packages. want know version motus package currently installed: running difficulties installing motus package, please refer troubleshooting section tips.","code":"install.packages(\"remotes\") update_packages() remove.packages(c(\"motus\", \"motusClient\")) install.packages(c(\"motus\", \"motusData\"),                   repos = c(birdscanada = 'https://birdscanada.r-universe.dev',                            CRAN = 'https://cloud.r-project.org'))  # Load the packages for use library(motus) library(motusData) packageVersion(\"motus\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/02-installing-packages.html","id":"installing-other-packages","dir":"Articles","previous_headings":"","what":"Installing other packages","title":"Chapter 2 - Installing packages","text":"Throughout articles examples, use tidyverse collection R packages data science, including tidyr, dplyr, ggplot2, lubridate (managing manipulating dates). See tidyverse website information, browse (better still, thoroughly read) R Data Science Garrett Grolemund Hadley Wickham. mapping also use rnaturalearth, ggmap packages. can installed CRAN, follows: also need couple data packages rnaturalearth can installed rOpenSci R-universe: Now, use packages include following scripts:","code":"install.packages(c(\"tidyverse\", \"ggmap\", \"rnaturalearth\")) install.packages(c(\"rnaturalearthhires\", \"rnaturalearthdata\"),                  repos = c(ropensci = 'https://ropensci.r-universe.dev',                              CRAN = 'https://cloud.r-project.org')) library(motus) library(rnaturalearth) library(tidyverse) library(ggmap)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/02-installing-packages.html","id":"internal-data-processing","dir":"Articles","previous_headings":"","what":"Internal data processing","title":"Chapter 2 - Installing packages","text":"animal moves within detection range Motus station, radio transmissions, ‘bursts’, detected antenna(s) recorded receiver. raw detection data either uploaded Motus database instantaneously via internet connection, downloaded periodically receiver uploaded Motus manually. Behind scenes, various functions read process raw detections data produce tag detections file users access using R package (see Chapter 3 - Accessing Data). users need call internal data processing functions, complete list functions within Motus server R package can found GitHub motusServer repository. Next Chapter 3 - Accessing detections data (Explore articles)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"Chapter 3 - Accessing detections data","text":"tag detection database stored SQLite (dplyr::src_sqlite) file extension ‘.motus’. sqlite format chosen : flexible, allowing many data formats. accessible many software platforms (just R). appendable, meaning database can created updated disk without read resave entire contents. save time computer memory searching see new detections available project receiver. .motus file contains series interrelated tables data stored condensed format save memory. following tables included .motus file; activity: data related radio activity hour period (hourBin) antenna, including count number short runs used helping identify false detections. admInfo: internal table used keep track motus package used create motus file, data version. antDeps: metadata related antenna deployments, e.g., deployment height, angle, antenna type. batchRuns: metadata runIDs associated batchIDs batches: detection data given receiver boot number. filters: metadata related user created filters associated specified receiver. gps: metadata related Geographic Positioning System (GPS) position receiver. hits: detection data level individual hits. meta: metadata related project datatype (tags vs. receivers) included .motus file nodeData: data related nodes batchID time (ts) nodeDeps: metadata related nodes projAmbig: metadata related projects ambiguous tag detections projs: metadata related projects, e.g., project name, principal investigator. pulseCounts: number radio pulses measured antenna hour period (hourBin). recvDeps: metadata related receiver deployments, e.g., deployment date, location, receiver characteristics. recvs: metadata related receiver serial number associated Motus deviceID runs: detection data associated run (continuous detections unique tag given receiver). runsFilters: list runIDs associated user created filters assigned probabilities. species: metadata related species, e.g., unique identifier, scientific name, common name. tagAmbig: metadata related ambiguous tags, e.g., ambigID associated motusTagID tagDeps: metadata related tag deployments, e.g., deployment date, location, species. tagProp: metadata related custom deployment properties entered principal investigator (e.g. body weight). tags: metadata related tags, e.g., unique identifier, tag characteristics (e.g., burst interval). addition tables, also ‘virtual’ tables ‘views’, created queries merge data various tables single convenient ‘view’ contains fields likely need. following views currently included .motus file: allambigs: lists long-data format motusTagID (6) associated negative ambigID. alltags: provides full detection data tags, ambiguous (duplicate) tags, associated project. Ambiguous detections repeated motusTagID represented ambigID. alltagsGPS: alltags includes GPS latitude, longitude altitude (much slower load large databases). file dplyr::src_sqlite file, dplyr functions can used filter summarize .motus database, without needing first save data flat file (typical two-dimensional dataframe). SQL format advantageous large file – queries using SQL substantially faster done flat dataframe.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"database-types","dir":"Articles","previous_headings":"","what":"Database types","title":"Chapter 3 - Accessing detections data","text":"two types tag detection databases available download: receiver database: includes detections registered tags single receiver. receiver database name like SG-1234BBBK5678.motus, name serial number receiver. project database: includes detections registered tags across Motus network. tag project database name like project-123.motus, number Motus project ID. two databases correspond basic model data sharing: get detections anyone’s tags receivers (.e., one receiver tag database receiver deploy). get detections tags anyone’s receivers (.e., one project tag database Motus projects).","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"load-relevant-r-packages","dir":"Articles","previous_headings":"","what":"Load relevant R packages","title":"Chapter 3 - Accessing detections data","text":"begin working data, need load required packages chapter. yet installed packages (github CRAN) please return Chapter 2 - Installing Packages.","code":"library(motus) library(lubridate) library(dplyr)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"set-system-environment","dir":"Articles","previous_headings":"","what":"Set system environment","title":"Chapter 3 - Accessing detections data","text":"Set system environment time zone Greenwich Mean Time (UTC), ensure always working UTC. important step, part every working session. fail , two problems can arise. Times stored Motus database UTC, keep environment UTC, can inadvertently changed import. Second, tags detected across multiple time zones, can also inadvertently changed.","code":"Sys.setenv(TZ = \"UTC\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"downloading-tag-detections","dir":"Articles","previous_headings":"","what":"Downloading tag detections","title":"Chapter 3 - Accessing detections data","text":"import tag detections project receiver, need numerical project id character scalar receiver serial number. success Motus network dependent timely upload detection data receivers, maintenance accurate --date tag receiver metadata collaborators. downloading data Motus server, users encouraged update detections update metadata time run analysis, collaborators can add detection data metadata time, influence completeness detections data. warned large datasets can take time (sometimes hours) download Motus server downloading first time. initial download, loading .motus file R updating new data near instantaneous, unless lot new data.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"download","dir":"Articles","previous_headings":"Downloading tag detections","what":"Download data for a project for the first time","title":"Chapter 3 - Accessing detections data","text":"data downloads completed using tagme() function motus R package. function save SQLite database computer extension “.motus”; see details data structure. following parameters available tagme() function: projRecv: integer project number character vector receiver serial number. new: set TRUE, create new empty .motus file local directory. use parameter set FALSE already .motus file. update: set TRUE, download available data existing .motus file. Must set TRUE first data download subsequent downloads wish check new data. Set FALSE wish check new data (e.g., working offline). dir: .motus data automatically saved working directory, unless specify different location using parameter. forceMeta: set TRUE, force update metadata existing .motus file. Throughout articles use sample data assigned project 176. Let’s get started downloading data project - include detections tags receiver. Note downloading data Motus server first time, must specify new = TRUE update = TRUE. also prompted login. Unless directory want data saved stated explicitly within function call, data downloaded current working directory. Lets start determining working directory know file saved. first time downloading data project 176, set projRecv = 176, new = TRUE update = TRUE. create .motus file current working directory, shown using getwd(). also create SQL object R environment called sql.motus Alternatively can specify different location save data entering preferred filepath. example save data folder using dir argument. Note ./ simply means ‘relative current folder’ (shown getwd()). Note: ’ll need use username motus.sample password motus.sample access data (see login details)! Using tagme() shown download file working specified directory called project-176.motus sample data (number file name corresponds project number). progress download process print console; seeing , try scrolling screen tagme() running. event connection Motus server fails prior complete download (e.g., due poor internet connection), use tagme(proj.num, update = TRUE) continue download left , ensuring specify directory saved outside working directory.","code":"getwd() sql.motus <- tagme(projRecv = 176, new = TRUE, update = TRUE) sql.motus <- tagme(projRecv = 176, new = TRUE, update = TRUE, dir = \"./data/\")"},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"login","dir":"Articles","previous_headings":"Downloading tag detections > User Authentication","what":"Login","title":"Chapter 3 - Accessing detections data","text":"first time call function using Motus R package, asked enter motus.org username password R console authenticate access project data. happen per R session. Motus username password, can sign get one. Permission access project data granted Motus staff project principal investigator. accessing sample data need login using username password ‘motus.sample’ R console prompted tagme() function (see Download section ). look like :  download data one projects, change project number project tagme() call, enter Motus login/password R console prompted. already logged sample data user, need first logout download data.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"logout","dir":"Articles","previous_headings":"Downloading tag detections > User Authentication","what":"Logging out","title":"Chapter 3 - Accessing detections data","text":"logged one user account, able access data another account. need logout current account access data, need use logout function.","code":"motusLogout()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"download-data-for-a-receiver-for-the-first-time","dir":"Articles","previous_headings":"Downloading tag detections","what":"Download data for a receiver for the first time","title":"Chapter 3 - Accessing detections data","text":"also download data receiver process described . provide detections tags specified receiver. receivers registered sample project 176, call work. receiver registered project, replace receiver serial number tagme call serial number receiver, ensuring logged using credentials. download file working directory named SG-123BBBK1234.motus. users may wish work directly .motus SQLite file. However, since many users familiar ‘flat’ dataframe format, instructions view data flat dataframe within R, export flat file .csv .rds format, included .","code":"proj.num <- \"SG-123BBBK1234\" sql.motus <- tagme(projRecv = proj.num, new = TRUE, update = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"downloading-multiple-receivers-at-the-same-time","dir":"Articles","previous_headings":"Downloading tag detections","what":"Downloading multiple receivers at the same time","title":"Chapter 3 - Accessing detections data","text":"large number receivers project, wish get receiver specific data one, rather downloading one one , can download simple loop. Note since sample project doesn’t receivers associated , script result download can try project receivers. can also create list receivers ’d like download don’t want download project-wide receivers:","code":"# get a copy of the metadata only sql.motus <- tagme(176, new = TRUE, update = FALSE, dir = \"./data/\") metadata(sql.motus, 176) tbl.recvDeps <- tbl(sql.motus, \"recvDeps\")  df.serno <- tbl.recvDeps %>%    filter(projectID == 176) %>%    select(serno) %>%    distinct() %>%    collect() %>%    as.data.frame()  # loop through each receiver (may take a while!) for (row in 1:nrow(df.serno)) {   tagme(df.serno[row, \"serno\"], dir = \"./data/\", new = TRUE, update = TRUE) }  # Note you can remove the dir argument if you want to save it to your working # directory, just make sure that you use the same directory in both calls # create list of receivers you'd like to download df.serno <- c(\"SG-AB12RPI3CD34\", \"SG-1234BBBK4321\")  # loop through each receiver (may take a while!), and save to the working directory for (k in 1:length(df.serno)) {   tagme(df.serno[k], new = TRUE, update = TRUE) }  # loop through each receiver (may take a while!), and save to a specified directory for (k in 1:length(df.serno)) {   tagme(df.serno[k], dir = \"./data/\",          new = TRUE, update = TRUE) }"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"updating-all--motus-files-within-a-directory","dir":"Articles","previous_headings":"Downloading tag detections","what":"Updating all .motus files within a directory","title":"Chapter 3 - Accessing detections data","text":".motus files, can also update simply calling tagme() function leaving arguments blank, apart directory:","code":"# If you have them saved your working directory: tagme()  # If you have them saved in a different directory: tagme(dir = \"./data/\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"accessing-downloaded-detection-data","dir":"Articles","previous_headings":"Downloading tag detections","what":"Accessing downloaded detection data","title":"Chapter 3 - Accessing detections data","text":"Now ’ve downloaded data SQLite database loaded R object called sql.motus, want access tables stored within. Detailed descriptions tables stored .motus file can found Data structure section. can also view list tables, variables contained within tables, using DBI RSQLite packages (automatically installed install motus). virtual table alltags contains detection data, along metadata variables users need various underlying .motus tables. access tables using tbl() function dplyr package installed Chapter 2 loaded start chapter. example, retrieve virtual alltags table sql.motus SQLite file. now new tbl.alltags object R. underlying structure tables list length 2: first part list, src, list provides details SQLiteConnection, including directory database stored. second part list includes underlying table. Thus, R object alltags virtual table stores database structure information required connect underlying data .motus file. stated , advantage storing data way saves memory accessing large databases, functions within dplyr package can used manipulate summarize tables collecting results typical ‘flat’ format dataframe. want use familiar functions get access components underlying data frame, use collect() function. example, look names variables alltags table: want access GPS data can either use alltagsGPS view, , filtering data (see Chapter 5 - Data cleaning article -depth detections filtering) can use getGPS() function (see Working GPS points).","code":"library(DBI) library(RSQLite)  # specify the filepath where your .motus file is saved, and the file name. file.name <- dbConnect(SQLite(), \"./data/project-176.motus\")   # get a list of tables in the .motus file specified above. dbListTables(file.name) ##  [1] \"activity\"    \"activityAll\" \"admInfo\"     \"allambigs\"   \"allruns\"     ##  [6] \"allrunsGPS\"  \"alltags\"     \"alltagsGPS\"  \"antDeps\"     \"batchRuns\"   ## [11] \"batches\"     \"clarified\"   \"deprecated\"  \"filters\"     \"gps\"         ## [16] \"gpsAll\"      \"hits\"        \"meta\"        \"nodeData\"    \"nodeDeps\"    ## [21] \"projAmbig\"   \"projBatch\"   \"projs\"       \"recvDeps\"    \"recvs\"       ## [26] \"runs\"        \"runsFilters\" \"species\"     \"tagAmbig\"    \"tagDeps\"     ## [31] \"tagProps\"    \"tags\" # get a list of variables in the \"species\" table in the .motus file. dbListFields(file.name, \"species\") ## [1] \"id\"         \"english\"    \"french\"     \"scientific\" \"group\"      ## [6] \"sort\" tbl.alltags <- tbl(sql.motus, \"alltags\") str(tbl.alltags) ## List of 2 ##  $ src:List of 2 ##   ..$ con  :Formal class 'SQLiteConnection' [package \"RSQLite\"] with 8 slots ##   .. .. ..@ ptr                :<externalptr>  ##   .. .. ..@ dbname             : chr \"/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus\" ##   .. .. ..@ loadable.extensions: logi TRUE ##   .. .. ..@ flags              : int 70 ##   .. .. ..@ vfs                : chr \"\" ##   .. .. ..@ ref                :<environment: 0x55762111b3c8>  ##   .. .. ..@ bigint             : chr \"integer64\" ##   .. .. ..@ extended_types     : logi FALSE ##   ..$ disco:<environment: 0x5576211dfd38>  ##   ..- attr(*, \"class\")= chr [1:4] \"src_SQLiteConnection\" \"src_dbi\" \"src_sql\" \"src\" ##  $ ops:List of 2 ##   ..$ x   : 'ident' chr \"alltags\" ##   ..$ vars: chr [1:62] \"hitID\" \"runID\" \"batchID\" \"ts\" ... ##   ..- attr(*, \"class\")= chr [1:3] \"op_base_remote\" \"op_base\" \"op\" ##  - attr(*, \"class\")= chr [1:5] \"tbl_SQLiteConnection\" \"tbl_dbi\" \"tbl_sql\" \"tbl_lazy\" ... tbl.alltags %>%    collect() %>%   names() # list the variable names in the table ##  [1] \"hitID\"          \"runID\"          \"batchID\"        \"ts\"             ##  [5] \"tsCorrected\"    \"sig\"            \"sigsd\"          \"noise\"          ##  [9] \"freq\"           \"freqsd\"         \"slop\"           \"burstSlop\"      ## [13] \"done\"           \"motusTagID\"     \"ambigID\"        \"port\"           ## [17] \"nodeNum\"        \"runLen\"         \"motusFilter\"    \"bootnum\"        ## [21] \"tagProjID\"      \"mfgID\"          \"tagType\"        \"codeSet\"        ## [25] \"mfg\"            \"tagModel\"       \"tagLifespan\"    \"nomFreq\"        ## [29] \"tagBI\"          \"pulseLen\"       \"tagDeployID\"    \"speciesID\"      ## [33] \"markerNumber\"   \"markerType\"     \"tagDeployStart\" \"tagDeployEnd\"   ## [37] \"tagDepLat\"      \"tagDepLon\"      \"tagDepAlt\"      \"tagDepComments\" ## [41] \"tagDeployTest\"  \"fullID\"         \"deviceID\"       \"recvDeployID\"   ## [45] \"recvDeployLat\"  \"recvDeployLon\"  \"recvDeployAlt\"  \"recv\"           ## [49] \"recvDeployName\" \"recvSiteName\"   \"isRecvMobile\"   \"recvProjID\"     ## [53] \"recvUtcOffset\"  \"antType\"        \"antBearing\"     \"antHeight\"      ## [57] \"speciesEN\"      \"speciesFR\"      \"speciesSci\"     \"speciesGroup\"   ## [61] \"tagProjName\"    \"recvProjName\""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"converting-to-flat-data","dir":"Articles","previous_headings":"Downloading tag detections","what":"Converting to flat data","title":"Chapter 3 - Accessing detections data","text":"convert alltags view table .motus file typical ‘flat’ format, .e., every record field filled , use collect() .data.frame() functions. output can manipulated, used generate RDS file data archiving export. Now flat data alltags table called df.alltags. can look metrics file: Note format time stamp (ts) field numeric represents seconds since 1 January 1970. recommend transform tables flat dataframes, format time stamp using lubridate package. results time column date/time format, leaving ts column numeric. Note: default, as_datetime() uses origin 1 January 1970 UTC timezone, exactly want! Note time stamps can manipulated way collecting data flat dataframe. Throughout articles, use ts numeric time stamps time date/time formatted time stamps. want load part entire virtual table (e.g. certain fields, certain tags, tags specified project species), can use dplyr functions filter data collecting dataframe. examples : select certain variables: select certain tag IDs: select specific species: Using dplyr, virtual table can also summarized converting flat file. example, find number different detections tag receiver: later chapter(s) show additional ways summarizing working data.","code":"df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame() names(df.alltags)     # field names str(df.alltags)       # structure of your data fields head(df.alltags)      # prints the first 6 rows of your df to the console summary(df.alltags)   # summary of each column in your df df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame() %>%     # for all fields in the df (data frame)   mutate(time = as_datetime(ts))  # the tz = \"UTC\" is not necessary here, provided you have set your system time to UTC # ... but it serves as a useful reminder! # to grab a subset of variables, in this case a unique list of Motus tag IDs at # each receiver and antenna. df.alltagsSub <- tbl.alltags %>%   select(recv, port, motusTagID) %>%   distinct() %>%    collect() %>%    as.data.frame() # filter to include only motusTagIDs 16011, 23316 df.alltagsSub <- tbl.alltags %>%   filter(motusTagID %in% c(16011, 23316)) %>%    collect() %>%    as.data.frame() %>%       mutate(time = as_datetime(ts)) # filter to only Red Knot (using speciesID) df.4670 <- tbl.alltags %>%   filter(speciesID == 4670) %>%     collect() %>%    as.data.frame() %>%       mutate(time = as_datetime(ts))    # filter to only Red Knot (using English name) df.redKnot <- tbl.alltags %>%   filter(speciesEN == \"Red Knot\") %>%      collect() %>%    as.data.frame() %>%       mutate(time = as_datetime(ts)) df.detectSum <- tbl.alltags %>%    count(motusTagID, recv) %>%   collect() %>%   as.data.frame()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"exporting-detections","dir":"Articles","previous_headings":"","what":"Exporting detections","title":"Chapter 3 - Accessing detections data","text":"good workflow create script deals data issues (described later chapters), saves resulting ‘flat’ dataframe CSV RDS re-use. , can quickly start analysis visualization session known (consistent) starting point. use .rds file, preserves associated R data structures (time stamps). users may also want export flat dataframe .csv file analysis programs. can easily done following code. Note preserve time stamps:","code":"saveRDS(df.alltags, \"./data/df_alltags.rds\") write.csv(df.alltags, \"./data/df_alltags.csv\")"},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"updating-detections","dir":"Articles","previous_headings":"Updating a database","what":"Updating detections","title":"Chapter 3 - Accessing detections data","text":"users upload data server, may additional tag detections weren’t present initial data download. Since .motus file SQLite database, can update existing file newly available data, rather complete new download entire database. open update detections database already exists (downloaded previously), use tagme() function set new = FALSE: working offline, simply want open already downloaded database without connecting server update, use new = FALSE update = FALSE:","code":"sql.motus <- tagme(projRecv = 176, new = FALSE, update = TRUE, dir = \"./data/\") ## Checking for new data in project 176 ## Updating metadata ## activity:     1 new batch records to check ## batchID  1977125 (#     1 of      1): got    156 activity records ## batchID  1977125 (#     1 of      1): got      0 activity records ## Downloaded 156 activity records ## nodeData:     0 new batch records to check ## Fetching deprecated batches ## Total deprecated batches: 6 ## New deprecated batches: 0 # use dir = to specify a directory sql.motus <- tagme(projRecv = 176, new = FALSE, update = FALSE, dir = \"./data\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"checking-for-new-detections","dir":"Articles","previous_headings":"Updating a database","what":"Checking for new detections","title":"Chapter 3 - Accessing detections data","text":"check new data available project receiver without downloading data, can use tellme() function, returns list : numHits: number new tag detections. numBytes: approximate uncompressed size data transfer required, megabytes. numRuns: number runs new tag detections, run series continuous detections tag given antenna. numBatches: number batches new data. numGPS: number GPS records new data. following assumes local copy database already exists: check much data available project database , use ‘new’ parameter:","code":"tellme(projRecv = 176)                    # If db is in the working directory tellme(projRecv = 176, dir = \"./data/\")   # To specify a different directory tellme(projRecv = 176, new = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"updating-metadata","dir":"Articles","previous_headings":"Updating a database","what":"Updating metadata","title":"Chapter 3 - Accessing detections data","text":"Tag receiver metadata automatically merged tag detections data downloaded. However, metadata updated since initial download, can force re-import metadata updating database running:","code":"sql.motus <- tagme(projRecv = 176, forceMeta = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"all-metadata","dir":"Articles","previous_headings":"","what":"Import full tag and receiver metadata","title":"Chapter 3 - Accessing detections data","text":"use tagme() download update .motus file, provided metadata : tags registered project detections; tags projects associated ambiguous detections (see Chapter 5 - Data Cleaning data; receivers tags ambiguous tags detected . many instances, want access full metadata tags receivers across network, e.g., determine many deployed tags detected, plot location stations without detections. metadata() function can used add complete Motus metadata .motus file. metadata() function needs run , suggest re-import metadata occasionally ensure recent --date information. Running metadata() function follows add appropriate metadata across network (tags receivers) recvDeps tagDeps tables .motus file: Alternatively, can load metadata specific project(s) using:","code":"# access all tag and receiver metadata for all projects in the network. metadata(sql.motus) # access tag and receiver metadata associated with project 176 metadata(sql.motus, projectIDs = 176)   # access tag and receiver metadata associated with projects 176 and 1 metadata(sql.motus, projectIDs = c(176, 1))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"checkVersion","dir":"Articles","previous_headings":"","what":"Ensure that you have the correct database version","title":"Chapter 3 - Accessing detections data","text":"call tagme() function load sqlite database, version R package used download data stored admInfo table. time, changes made functionality R package may require adding new tables, views fields database. version database match version R package, examples contained articles may work. following call check database updated version matching current version motus R package. database match current version R package, use tagme() update = TRUE update database correct format. Refer Troubleshooting checkVersion() call returns warning.","code":"checkVersion(sql.motus)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/03-accessing-data.html","id":"r-object-naming-convention","dir":"Articles","previous_headings":"","what":"R object naming convention","title":"Chapter 3 - Accessing detections data","text":"Throughout chapter rest articles, name R objects according structure source data contained object. , SQLite objects prefixed sql., virtual table objects prefixed tbl., dataframe objects prefixed df.; rest name include name .motus table data originates . following code assumes already downloaded sample data need update ; downloaded data, see section downloading data first time instructions initial download. Next Chapter 4 - Project Deployments (Explore articles)","code":"# SQLite R object, which links to the .motus file: sql.motus <- tagme(176, update = TRUE, dir = \"./data\")    # virtual table object of the alltags table in the sample.motus file: tbl.alltags <- tbl(sql.motus, \"alltags\")   df.alltags <- tbl.alltags %>%                 collect() %>%                 as.data.frame() %>% # dataframe (\"flat\") object of alltags table                 mutate(time = as_datetime(ts))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Chapter 4 - Tag and receiver deployments","text":"begin working data, need load required packages chapter. yet installed packages (GitHub CRAN) please return Chapter 2 - Installing packages.","code":"library(tidyverse) library(motus) library(lubridate) library(rnaturalearth) library(sf)  # Set the system environment time zone to UTC (to ensure that you are always working in UTC) Sys.setenv(TZ = \"UTC\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"load--motus-file","dir":"Articles","previous_headings":"","what":"Load .motus file","title":"Chapter 4 - Tag and receiver deployments","text":"chapter assumes .motus file already downloaded, done please return Chapter 3 - Accessing detections data. update load existing file R, use tagme(), may login username password ‘motus.sample’.","code":"sql.motus <- tagme(176, update = TRUE, dir = \"./data\") ## Checking for new data in project 176 ## Updating metadata ## activity:     1 new batch records to check ## batchID  1977125 (#     1 of      1): got    156 activity records ## batchID  1977125 (#     1 of      1): got      0 activity records ## Downloaded 156 activity records ## nodeData:     0 new batch records to check ## Fetching deprecated batches ## Total deprecated batches: 6 ## New deprecated batches: 0"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"tag-deployments","dir":"Articles","previous_headings":"","what":"Tag deployments","title":"Chapter 4 - Tag and receiver deployments","text":".motus file, using tagme function, provided metadata tags project detections along metadata associated ambiguous tags projects, receiver metadata stations tags detected. : download full tag metadata project determine many tags registered project determine many registered tags deployed determine location tag deployments determine completeness accuracy tag deployment metadata run sequence.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"download-full-project-tag-metadata","dir":"Articles","previous_headings":"Tag deployments","what":"Download full project tag metadata","title":"Chapter 4 - Tag and receiver deployments","text":"Incomplete metadata missing tag registrations can result missing detection data. therefore want assess completeness tags registered projects - just tags detections. order use metadata() function project 176, described detail Chapter 3.","code":"metadata(sql.motus, projectIDs = 176)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"number-of-registered-tags","dir":"Articles","previous_headings":"Tag deployments","what":"Number of registered tags","title":"Chapter 4 - Tag and receiver deployments","text":"Now complete tag metadata project, can check number tags registered loading tags table .motus file. tags table contains metadata registered tag, including unique tagID information manufacturer, model, nominal offset frequency, burst interval, pulse length. tags table include deployment information. select metadata specific James Bay Shorebird Project, ignore tag metadata associated duplicate tags belonging projects: number rows df.tags database equivalent number tags registered James Bay Shorebird Project sample dataset (.e., 18 tags): can view motusTagIDs: missing registered tags, please follow instructions https://motus.org/tag-registration/.","code":"tbl.tags <- tbl(sql.motus, \"tags\")  df.tags <- tbl.tags %>%   filter(projectID == 176) %>%   collect() %>%   as.data.frame() nrow(df.tags) # number of registered tags in the database ## [1] 18 unique(df.tags$tagID) ##  [1] 16011 16035 16036 16037 16038 16039 16044 16047 16048 16052 17357 19129 ## [13] 22867 22897 22902 22905 23316 23319"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"number-of-registered-tags-that-were-deployed","dir":"Articles","previous_headings":"Tag deployments","what":"Number of registered tags that were deployed","title":"Chapter 4 - Tag and receiver deployments","text":"tag deployment metadata table (tagDeps) .motus file required check registered tags deployments. file includes date, time, species, location tag deployment. database subset project ‘176’, use anti_join() function determine registered tags () corresponding deployment information. sample data, registered tags without deployment metadata, suggests tags deployed. undeployed tags files, please check records ensure case; without deployment metadata, detections registered ‘undeployed’ tags missing detections database.","code":"tbl.tagDeps <- tbl(sql.motus, \"tagDeps\")   df.tagDeps <- tbl.tagDeps %>%   filter(projectID == 176) %>%   collect() %>%   as.data.frame() %>% # once in df format, can format dates with lubridate   mutate(timeStart = as_datetime(tsStart),          timeEnd = as_datetime(tsEnd))   anti_join(df.tags, df.tagDeps, by = \"tagID\") ##  [1] tagID        projectID    mfgID        type         codeSet      ##  [6] manufacturer model        lifeSpan     nomFreq      offsetFreq   ## [11] bi           pulseLen     ## <0 lignes> (ou 'row.names' de longueur nulle)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"number-of-deployments-per-tag","dir":"Articles","previous_headings":"Tag deployments","what":"Number of deployments per tag","title":"Chapter 4 - Tag and receiver deployments","text":"tag might deployed , example, previously deployed tag recovered, later re-deployed another individual. tags deployed , detections data considered independently deployment. Throughout articles use motusTagID unique identifier deployment. However, tag deployed , motusTagID remain consistent deployments, instead need use tagDeployID, combination motusTagID tagDeployID distinguish detections belong deployment. , check whether tags one deployment sample data (none), show make combined motusTagID/tagDeployID variable use place motusTagID multiple deployments tag data: multiple deployments tag, recommend creating motusTagDepID use place motusTagID define unique deployments tag. Moving forward, use motusTagDepID place motusTagID work rest articles:","code":"df.alltags <- tbl(sql.motus, \"alltags\") %>%    collect() %>%    as.data.frame() %>%     # for all fields in the df (data frame)   mutate(time = as_datetime(ts))  df.alltags %>%   select(motusTagID, tagDeployID) %>%   filter(!(is.na(tagDeployID))) %>% # remove NA tagDeployIDs   distinct() %>%   group_by(motusTagID) %>%   mutate(n = n()) %>%   filter(n > 1) ## # A tibble: 0 × 3 ## # Groups:   motusTagID [0] ## # … with 3 variables: motusTagID <int>, tagDeployID <int>, n <int> df.alltags <- df.alltags %>%   mutate(motusTagDepID = paste(motusTagID, tagDeployID, sep = \".\"))  # and do the same for the tag metadata df.tagDeps <- df.tagDeps %>%   mutate(motusTagDepID = paste(tagID, deployID, sep = \".\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"location-of-tag-deployments","dir":"Articles","previous_headings":"Tag deployments","what":"Location of tag deployments","title":"Chapter 4 - Tag and receiver deployments","text":"Creating map tag deployments can point obvious errors tag deployment latitude longitude weren’t captured online metadata message centre queries. . Load base map files Load base map files rnaturalearth package. need rgdal rgeos packages installed. first time run code, need download lakes shapefiles. Like tagme function, destdir argument allows specify directory like save files; created map-data folder within working directory example: need download shapefiles . return analysis later run code , can use ne_load function shapefiles already stored computer: b. Map locations tag deployments Map location tag deployments sample data:  errors tag deployment location, please correct online https://motus.org/data/.","code":"world <- ne_countries(scale = \"medium\", returnclass = \"sf\")  lakes <- ne_download(scale = \"medium\", type = 'lakes', category = 'physical',                      returnclass = \"sf\", destdir = \"map-data\") # only need this first time downloading lakes <- ne_load(type = \"lakes\", scale = \"medium\", category = 'physical',                  returnclass = \"sf\",                  destdir = \"map-data\") # use this if already downloaded shapefiles # set limits to map based on locations of detections, ensuring they include the # deployment locations xmin <- -100 #min(df.tagDeps$longitude, na.rm = TRUE) - 5 xmax <- max(df.tagDeps$longitude, na.rm = TRUE) + 5 ymin <- min(df.tagDeps$latitude, na.rm = TRUE) - 5 ymax <- max(df.tagDeps$latitude, na.rm = TRUE) + 5                  # map using ggplot and sf ggplot(data = world) +    geom_sf(colour = NA) +   geom_sf(data = lakes, colour = NA, fill = \"white\") +   coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +   labs(x = \"\", y = \"\") +    theme_bw() +    geom_point(data = filter(df.tagDeps, projectID == 176),               aes(longitude, latitude), size = 2, shape = 19, colour = \"red\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"check-completeness-and-accuracy-of-tag-deployment-metadata","dir":"Articles","previous_headings":"Tag deployments","what":"Check completeness and accuracy of tag deployment metadata","title":"Chapter 4 - Tag and receiver deployments","text":"Required tag metadata includes deployment start date/time, end date/time (applicable), deployment latitude, deployment longitude, species. Lack information deployment date, time, location particular can influence estimated lifespan tag, therefore whether tagFinder ‘look’ tag appropriate time(s). can also increase potential ambiguities duplicate tags system. . Look range metadata values first step, use summary(df.tagDeps) get idea range variable, whether variables missing (NA) odd values. following summarizes subset variables df.tagDeps database. several things consider: range start end dates reasonable deployments, obvious errors timing deployments? range deployment latitude longitude reasonable? values speciesID correct? missing start dates (timeStart), deployment start dates range 2015 2016, reasonable project. speciesIDs numeric, somewhat meaningless without ability assign actual species name numeric ID, next, however missing values. b. Check speciesIDs appropriate data species table .motus file associates numeric speciesID English, French, scientific name. load table, subset suite numeric speciesIDs tag metadata: lists species included tag deployment metadata project. species make sense, likely due data entry error assigning deployment species. can look records tag metadata associated particular speciesID using following code; use deployID associated entry/entries find update deployment record project metadata online: Please remember, metadata corrections need made online.","code":"df.tagDeps %>%   select(tagID, projectID, timeStart, timeEnd, speciesID, latitude, longitude) %>%   summary() ##      tagID         projectID     timeStart                   ##  Min.   :16011   Min.   :176   Min.   :2015-08-02 11:40:00   ##  1st Qu.:16038   1st Qu.:176   1st Qu.:2015-08-13 15:25:00   ##  Median :16050   Median :176   Median :2015-09-10 17:50:30   ##  Mean   :18616   Mean   :176   Mean   :2016-01-24 12:49:36   ##  3rd Qu.:22890   3rd Qu.:176   3rd Qu.:2016-09-25 15:34:15   ##  Max.   :23319   Max.   :176   Max.   :2016-10-15 16:00:00   ##     timeEnd                      speciesID       latitude       longitude      ##  Min.   :2015-12-17 11:40:00   Min.   :4180   Min.   :50.19   Min.   :-80.69   ##  1st Qu.:2015-12-28 15:25:00   1st Qu.:4670   1st Qu.:50.52   1st Qu.:-80.45   ##  Median :2016-03-10 17:50:30   Median :4690   Median :51.48   Median :-80.45   ##  Mean   :2016-07-28 18:09:36   Mean   :4674   Mean   :51.18   Mean   :-75.85   ##  3rd Qu.:2017-06-06 09:53:45   3rd Qu.:4690   3rd Qu.:51.48   3rd Qu.:-67.92   ##  Max.   :2017-06-26 16:00:00   Max.   :4820   Max.   :51.80   Max.   :-63.75 # generate list of species IDs in project 176 metadata sp.list <- unique(df.tagDeps$speciesID)    # Species metadata tbl.species <- tbl(sql.motus, \"species\")  tbl.species %>%   filter(id %in% sp.list) %>%   collect() %>%   as.data.frame() ##     id                english                       french ## 1 4180    Semipalmated Plover            Pluvier semipalmé ## 2 4670               Red Knot           Bécasseau maubèche ## 3 4680             Sanderling         Bécasseau sanderling ## 4 4690 Semipalmated Sandpiper          Bécasseau semipalmé ## 5 4760 White-rumped Sandpiper   Bécasseau à croupion blanc ## 6 4780     Pectoral Sandpiper Bécasseau à poitrine cendrée ## 7 4820                 Dunlin           Bécasseau variable ##                scientific group sort ## 1 Charadrius semipalmatus BIRDS   NA ## 2        Calidris canutus BIRDS   NA ## 3           Calidris alba BIRDS   NA ## 4        Calidris pusilla BIRDS   NA ## 5    Calidris fuscicollis BIRDS   NA ## 6      Calidris melanotos BIRDS   NA ## 7         Calidris alpina BIRDS   NA filter(df.tagDeps, speciesID == 4780) ##   tagID deployID projectID    tsStart      tsEnd deferSec speciesID markerType ## 1 22867    10517       176 1473176100 1495121700       NA      4780 metal band ##   markerNumber  sex  age latitude longitude elevation ## 1   2641-20877 <NA> <NA> 51.79861 -80.69139        NA ##                                                                                                                                                                                                                                                                                               comments ## 1 Sex:F, Age:HY, Bill28, Tarsus:26.2, Wing Chord:123, Wing Flat:129, Mass:57.7, Flag: (FEW)7P6, Blood:Y, Canada, Ontario, James Bay, LONGRIDGE, Comments: REKN tag on mesh; has a duplicate tag same burst rate 380-272 a HY REKN banded at Mingan Islands on 02-Oct-2016 and band number 9822-53171\\n ##   test attachment tsStartCode tsEndCode bandNumber id bi ## 1   NA       <NA>          1L        3L       <NA> NA NA ##                                 fullID status           timeStart ## 1 SampleData#272.1:5.3@166.38(M.22867)   <NA> 2016-09-06 15:35:00 ##               timeEnd motusTagDepID ## 1 2017-05-18 15:35:00   22867.10517"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"check-receiver-metadata","dir":"Articles","previous_headings":"","what":"Check receiver metadata","title":"Chapter 4 - Tag and receiver deployments","text":"two sources receiver metadata Motus detection data: receivers registered project, receivers registered projects others. can access metadata receivers network, negative data (.e., tag detected station X even though station X active) often important positive data. also allows map tags detected relative distribution receivers throughout Motus network. Receiver metadata errors omissions find .motus file can fixed receivers registered project. users encouraged enter complete accurate receiver metadata benefit entire network. anticipate needing specific information receiver antenna deployments stations deployed others, please consider using Motus discussion group request registered users record receiver deployment details need; specific exact receiver deployment details interested , network tags deployed potentially detected. following steps : download full receiver metadata across network determine number project receiver deployments determine timing project receiver deployments determine location network-wide project receiver deployments determine completeness accuracy receiver metadata","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"download-full-receiver-metadata","dir":"Articles","previous_headings":"Check receiver metadata","what":"Download full receiver metadata","title":"Chapter 4 - Tag and receiver deployments","text":"Later chapter want map receivers network, now load metadata projects, opposed simply project 176 . metadata() function described detail Chapter 3.","code":"metadata(sql.motus)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"number-of-project-receiver-deployments","dir":"Articles","previous_headings":"Check receiver metadata","what":"Number of project receiver deployments","title":"Chapter 4 - Tag and receiver deployments","text":"see () receiver deployments registered project, import, subset summarize receiver deployment data: 18 receiver deployments registered sample project. Four deployments missing latitude longitude, six deployments missing end dates, suggests receivers still deployed. following code keeps variables interest (removing need), arranges remaining records receiver ID, latitude, start date: number receiver deployments metadata correspond number field deployments. Looking isMobile column four receiver deployments missing latitude longitude information, evident mobile receivers fixed position (.e. value 1). mobile, coordinates deployment aren’t expected, case remain NA. Receiver deployment coordinates mobile receivers, present, meant represent starting point deployment.","code":"tbl.recvDeps <- tbl(sql.motus, \"recvDeps\")   df.projRecvs <- tbl.recvDeps %>%   filter(projectID == 176) %>%   collect() %>%   as.data.frame() %>%   mutate(timeStart = as_datetime(tsStart),          timeEnd = as_datetime(tsEnd))  summary(df.projRecvs) ##     deployID      projectID      serno           receiverType       ##  Min.   :1134   Min.   :176   Length:18          Length:18          ##  1st Qu.:2287   1st Qu.:176   Class :character   Class :character   ##  Median :3101   Median :176   Mode  :character   Mode  :character   ##  Mean   :2952   Mean   :176                                         ##  3rd Qu.:4002   3rd Qu.:176                                         ##  Max.   :4221   Max.   :176                                         ##                                                                     ##     deviceID         status              name             siteName         ##  Min.   : 74.00   Length:18          Length:18          Length:18          ##  1st Qu.: 75.75   Class :character   Class :character   Class :character   ##  Median :280.00   Mode  :character   Mode  :character   Mode  :character   ##  Mean   :250.11                                                            ##  3rd Qu.:333.00                                                            ##  Max.   :528.00                                                            ##                                                                            ##  stationName        fixtureType           latitude       longitude      ##  Length:18          Length:18          Min.   :51.15   Min.   :-80.80   ##  Class :character   Class :character   1st Qu.:51.48   1st Qu.:-80.63   ##  Mode  :character   Mode  :character   Median :51.66   Median :-80.57   ##                                        Mean   :51.58   Mean   :-80.47   ##                                        3rd Qu.:51.74   3rd Qu.:-80.45   ##                                        Max.   :51.88   Max.   :-79.81   ##                                        NA's   :3       NA's   :3        ##    elevation        isMobile         tsStart              tsEnd           ##  Min.   :-7.00   Min.   :0.0000   Min.   :1.405e+09   Min.   :1.415e+09   ##  1st Qu.:-6.25   1st Qu.:0.0000   1st Qu.:1.432e+09   1st Qu.:1.445e+09   ##  Median :-5.50   Median :0.0000   Median :1.463e+09   Median :1.458e+09   ##  Mean   :-5.50   Mean   :0.1667   Mean   :1.454e+09   Mean   :1.459e+09   ##  3rd Qu.:-4.75   3rd Qu.:0.0000   3rd Qu.:1.470e+09   3rd Qu.:1.481e+09   ##  Max.   :-4.00   Max.   :1.0000   Max.   :1.503e+09   Max.   :1.503e+09   ##  NA's   :16                                           NA's   :2           ##    utcOffset     stationID    macAddress          timeStart                   ##  Min.   : NA   Min.   : NA   Length:18          Min.   :2014-07-12 00:00:00   ##  1st Qu.: NA   1st Qu.: NA   Class :character   1st Qu.:2015-05-24 06:00:00   ##  Median : NA   Median : NA   Mode  :character   Median :2016-05-17 12:00:00   ##  Mean   :NaN   Mean   :NaN                      Mean   :2016-01-23 14:03:16   ##  3rd Qu.: NA   3rd Qu.: NA                      3rd Qu.:2016-08-04 01:26:15   ##  Max.   : NA   Max.   : NA                      Max.   :2017-08-20 23:30:00   ##  NA's   :18    NA's   :18                                                     ##     timeEnd                    ##  Min.   :2014-11-06 00:00:00   ##  1st Qu.:2015-10-20 00:00:00   ##  Median :2016-03-16 21:05:00   ##  Mean   :2016-03-25 17:06:15   ##  3rd Qu.:2016-12-01 00:00:00   ##  Max.   :2017-08-20 23:30:00   ##  NA's   :2 df.projRecvs %>%   mutate(dateStart = date(timeStart)) %>%    select(-serno,-fixtureType, -macAddress, -timeStart, -timeEnd, -elevation,           -projectID, -status, -receiverType, -siteName) %>%   arrange(deviceID, latitude, dateStart) ##    deployID deviceID             name stationName latitude longitude isMobile ## 1      3100       74       Washkaugou        <NA>  51.1540  -79.8144        0 ## 2      2291       75      North Bluff        <NA>  51.4839  -80.4500        0 ## 3      3102       75      North Bluff        <NA>  51.4839  -80.4501        0 ## 4      4051       75      North Bluff        <NA>  51.4839  -80.4501        0 ## 5      4221       75      North Bluff        <NA>  51.4839  -80.4501        0 ## 6      3103       78       Piskwamish        <NA>  51.6579  -80.5678        0 ## 7      4050       78       Piskwamish        <NA>  51.6580  -80.5679        0 ## 8      1134      280        Longridge        <NA>  51.8230  -80.6911        0 ## 9      2285      280        Longridge        <NA>  51.8231  -80.6912        0 ## 10     3097      280        Longridge        <NA>  51.8244  -80.6909        0 ## 11     4048      280    Halfway Point        <NA>  51.8753  -80.7973        0 ## 12     1135      285        Netitishi        <NA>  51.2913  -80.1167        0 ## 13     2289      285        Netitishi        <NA>  51.2913  -80.1168        0 ## 14     2286      349       Piskwamish        <NA>  51.6578  -80.5676        0 ## 15     1137      349       Piskwamish        <NA>  51.6582  -80.5669        0 ## 16     3813      528        NP mobile        <NA>       NA        NA        1 ## 17     4001      528 BurntPointAerial        <NA>       NA        NA        1 ## 18     4002      528   JamesBayAerial        <NA>       NA        NA        1 ##       tsStart      tsEnd utcOffset stationID  dateStart ## 1  1463529600 1480291200        NA        NA 2016-05-18 ## 2  1432512000 1446422400        NA        NA 2015-05-25 ## 3  1463529600 1480550400        NA        NA 2016-05-18 ## 4  1495033200 1503271800        NA        NA 2017-05-17 ## 5  1503271800 1503271800        NA        NA 2017-08-20 ## 6  1463529600 1480550400        NA        NA 2016-05-18 ## 7  1495034340         NA        NA        NA 2017-05-17 ## 8  1405468800 1415232000        NA        NA 2014-07-16 ## 9  1432425600 1446508800        NA        NA 2015-05-24 ## 10 1463443200 1480550400        NA        NA 2016-05-17 ## 11 1494950100         NA        NA        NA 2017-05-16 ## 12 1405123200 1415232000        NA        NA 2014-07-12 ## 13 1432512000 1446422400        NA        NA 2015-05-25 ## 14 1432425600 1446508800        NA        NA 2015-05-24 ## 15 1405468800 1415232000        NA        NA 2014-07-16 ## 16 1436140800 1441929600        NA        NA 2015-07-06 ## 17 1468915200 1469815800        NA        NA 2016-07-19 ## 18 1470726900 1471019400        NA        NA 2016-08-09"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"timing-of-project-receiver-deployments","dir":"Articles","previous_headings":"Check receiver metadata","what":"Timing of project receiver deployments","title":"Chapter 4 - Tag and receiver deployments","text":"timing deployments can displayed graphically; horizontal line(s) following plot show time span receiver (deviceID) deployment registered James Bay Shorebird Project. Note two receivers without deployment end dates, code assigns arbitrary end date based maximum end date receivers plus one month - without fix, deployments without end dates get displayed. Different deployments receiver overlap time:  want detail given year (years) can either subset re-plot, use day year x-axis, facet_wrap() year.","code":"# put data in long format to simplify plotting (or use geom_segment) df.projRecvs.long <- df.projRecvs %>%   select(deviceID, deployID, timeStart, timeEnd) %>%    gather(when, time, c(timeStart, timeEnd)) %>%   # fake end date:   mutate(time = if_else(is.na(time), max(time, na.rm = TRUE) + duration(1, \"month\"), time))   ggplot(data = df.projRecvs.long,         aes(x = time, y = as.factor(deviceID), colour = as.factor(deployID))) +   theme(legend.position = \"none\") +   geom_line(lwd = 3) +    # instead, centre to the right   geom_text(data = filter(df.projRecvs.long, when == \"timeStart\"),              aes(label = deployID), hjust = \"left\", nudge_y = 0.2, size = 3, angle = 45) +   scale_color_viridis_d() +   theme_bw() +   labs(x = \"Year\", y = \"Receiver ID\") ggplot(data = df.projRecvs.long,         aes(x = yday(time), y = as.factor(deviceID), colour = as.factor(deployID))) +   theme_bw() +   theme(legend.position = \"none\") +    geom_line(lwd = 3) +    # centre labels to the left   geom_text(data = filter(df.projRecvs.long, when == \"timeStart\"),              aes(label = deployID), hjust = \"left\", nudge_y = 0.4, size = 3) +   labs(x = \"Day of year\", y = \"Receiver ID\") +   facet_grid(year(time) ~ ., scales = \"free\") +   scale_color_viridis_d()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"location-of-receiver-deployments","dir":"Articles","previous_headings":"Check receiver metadata","what":"Location of receiver deployments","title":"Chapter 4 - Tag and receiver deployments","text":"Maps provide better spatial context simple plots; following steps plot location Motus receivers map North America, receivers deployed sample project displayed red. . Load receiver metadata b. Load base map files c. Map location receivers Americas Map showing location network-wide receivers (dark grey points) receivers deployed James Bay Shorebird Project (project 176; red points).  d. Map location project specific receivers Map project-specific receivers, created setting x-axis (longitude) y-axis (latitude) map limits using df.projRecvs dataframe created . Deployments restricted active 2016.","code":"df.recvDeps <- tbl.recvDeps %>%   collect() %>%   as.data.frame() %>%   mutate(timeStart = as_datetime(tsStart),          timeEnd = as_datetime(tsEnd)) # include all of the Americas to begin world <- ne_countries(scale = \"medium\", returnclass = \"sf\")   lakes <- ne_load(type = \"lakes\", scale = \"medium\", category = 'physical',                  returnclass = \"sf\",                  destdir = paste0(getwd(), \"./map-data\")) # use this if already downloaded shapefiles # set map limits using detection locations;  # ensure they include the deployment locations xmin <- min(df.recvDeps$longitude, na.rm = TRUE) - 2 xmax <- -20 # restrict to the Americas (excluding a few points in Europe) ymin <- -60 #min(df.recvDeps$longitude, na.rm = TRUE) - 2 ymax <- max(df.recvDeps$latitude, na.rm = TRUE) + 2                  # map ggplot(data = world) +    geom_sf(colour = NA) +   geom_sf(data = lakes, colour = NA, fill = \"white\") +   coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +   labs(x = \"\", y = \"\") +    theme_bw() +     geom_point(data = df.recvDeps,               aes(longitude, latitude, colour = as.logical(projectID == 176)),               size = 0.8, shape = 19) +   scale_colour_manual(values = c(\"grey30\", \"red\"), name = \"Project 176 Deployment\") # get a higher resolution basemap for the James Bay region region <- ne_states(country = \"Canada\", returnclass = \"sf\") %>%    filter(name %in% c(\"Ontario\", \"Québec\", \"Nunavut\"))  # set map limits using detection locations; # ensure they include the deployment locations xmin <- min(df.projRecvs$longitude, na.rm = TRUE) - 2 xmax <- max(df.projRecvs$longitude, na.rm = TRUE) + 2 ymin <- min(df.projRecvs$latitude, na.rm = TRUE) - 1 ymax <- max(df.projRecvs$latitude, na.rm = TRUE) + 1                  # map ggplot(data = region) +    geom_sf(colour = NA) +   geom_sf(data = lakes, colour = NA, fill = \"white\") +   coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +   labs(x = \"\", y = \"\") +    theme_bw() +     labs(x = \"\", y = \"\") +   geom_point(data = filter(df.projRecvs,                             year(timeStart) == 2016,                             !is.na(latitude)),  # remove mobile receivers              aes(longitude, latitude, colour = as.factor(deviceID)), size = 2, shape = 19)+   scale_colour_viridis_d(name = \"Receiver ID\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/04-deployments.html","id":"completeness-and-accuracy-of-receiver-metadata","dir":"Articles","previous_headings":"Check receiver metadata","what":"Completeness and accuracy of receiver metadata","title":"Chapter 4 - Tag and receiver deployments","text":"Motus users concerned primarily completeness metadata receiver deployments detection(s) tags, can directly influence interpretation detections. example, missing deployment latitude longitude result unknown location tag detection, missing information antenna type /orientation can impede estimation flight departure orientation. many cases, however, metadata receiver deployments without tag detections can also useful, example estimate probability detecting animal passes within range station. section, focus metadata receivers registered particular project. Depending interests, summaries can applied larger group receivers, e.g., receivers detections receivers within certain geographic limits (without detections). . Load receiver antenna metadata Subset receivers registered project: b. Look range metadata values Use summary() get general idea distribution variables data. 4 deployments missing latitude longitude associated four deployments mobile receivers saw earlier. Elevation missing 74 91 records, elevation required field, can estimated sources, directly R (see example). Antenna bearing missing 18 91 records, height antenna(s) missing 4 91 records. Subset records missing antenna bearing see can fixed: Receiver deployments missing antenna bearing(s) restricted deployments omni-directional antennas mobile receivers, missing values make sense. records also show four records missing antenna height also associated four mobile receivers, missing values make sense need fixed. Remember missing metadata needs corrected online. Metadata corrected online automatically corrected detection files. already downloaded detection data, can update existing file include new data (see Updating database Chapter 3). Next Chapter 5 - Data cleaning (Explore articles)","code":"# antenna metadata for ALL Motus antenna deployments;  # to simplify, keep only the variables of interest. tbl.antDeps <- tbl(sql.motus, \"antDeps\")   df.antDeps <- tbl.antDeps %>%   select(deployID, port, antennaType, bearing, heightMeters) %>%   collect() %>%   as.data.frame()  # receiver deployments; select variables of interest df.recvDeps <- df.recvDeps %>%   select(deployID, receiverType, deviceID, name, latitude, longitude,           isMobile, timeStart, timeEnd, projectID, elevation)   df.stationDeps <- left_join(df.recvDeps, df.antDeps, by = \"deployID\") df.stationDeps <- filter(df.stationDeps, projectID == 176) summary(df.stationDeps) ##     deployID    receiverType          deviceID         name           ##  Min.   :1134   Length:55          Min.   : 74.0   Length:55          ##  1st Qu.:2286   Class :character   1st Qu.: 75.0   Class :character   ##  Median :3100   Mode  :character   Median :280.0   Mode  :character   ##  Mean   :2919                      Mean   :201.3                      ##  3rd Qu.:4048                      3rd Qu.:285.0                      ##  Max.   :4221                      Max.   :528.0                      ##                                                                       ##     latitude       longitude         isMobile       ##  Min.   :51.15   Min.   :-80.80   Min.   :0.00000   ##  1st Qu.:51.48   1st Qu.:-80.60   1st Qu.:0.00000   ##  Median :51.66   Median :-80.57   Median :0.00000   ##  Mean   :51.57   Mean   :-80.46   Mean   :0.05455   ##  3rd Qu.:51.70   3rd Qu.:-80.45   3rd Qu.:0.00000   ##  Max.   :51.88   Max.   :-79.81   Max.   :1.00000   ##  NA's   :3       NA's   :3                          ##    timeStart                      timeEnd                      projectID   ##  Min.   :2014-07-12 00:00:00   Min.   :2014-11-06 00:00:00   Min.   :176   ##  1st Qu.:2015-05-24 00:00:00   1st Qu.:2015-11-02 00:00:00   1st Qu.:176   ##  Median :2016-05-18 00:00:00   Median :2016-10-05 08:15:00   Median :176   ##  Mean   :2016-02-22 12:28:39   Mean   :2016-05-04 00:08:20   Mean   :176   ##  3rd Qu.:2017-05-16 15:55:00   3rd Qu.:2016-12-01 00:00:00   3rd Qu.:176   ##  Max.   :2017-08-20 23:30:00   Max.   :2017-08-20 23:30:00   Max.   :176   ##                                NA's   :7                                   ##    elevation          port           antennaType           bearing       ##  Min.   :-7.000   Length:55          Length:55          Min.   : 10.00   ##  1st Qu.:-7.000   Class :character   Class :character   1st Qu.: 66.25   ##  Median :-7.000   Mode  :character   Mode  :character   Median :145.00   ##  Mean   :-5.714                                         Mean   :151.34   ##  3rd Qu.:-4.000                                         3rd Qu.:215.00   ##  Max.   :-4.000                                         Max.   :357.50   ##  NA's   :48                                             NA's   :11       ##   heightMeters  ##  Min.   :5.60   ##  1st Qu.:5.60   ##  Median :5.80   ##  Mean   :5.85   ##  3rd Qu.:6.00   ##  Max.   :6.20   ##  NA's   :3 df.stationDeps %>%   filter(is.na(bearing)) %>%   select(-elevation, -deviceID, -timeEnd) ##    deployID receiverType             name latitude longitude isMobile ## 1      3097  SENSORGNOME        Longridge  51.8244  -80.6909        0 ## 2      3100  SENSORGNOME       Washkaugou  51.1540  -79.8144        0 ## 3      3102  SENSORGNOME      North Bluff  51.4839  -80.4501        0 ## 4      3103  SENSORGNOME       Piskwamish  51.6579  -80.5678        0 ## 5      3813  LOTEKSRX800        NP mobile       NA        NA        1 ## 6      4001  LOTEKSRX800 BurntPointAerial       NA        NA        1 ## 7      4002  LOTEKSRX800   JamesBayAerial       NA        NA        1 ## 8      4048  SENSORGNOME    Halfway Point  51.8753  -80.7973        0 ## 9      4050  SENSORGNOME       Piskwamish  51.6580  -80.5679        0 ## 10     4051  SENSORGNOME      North Bluff  51.4839  -80.4501        0 ## 11     4221  SENSORGNOME      North Bluff  51.4839  -80.4501        0 ##              timeStart projectID port antennaType bearing heightMeters ## 1  2016-05-17 00:00:00       176    4   omni-whip      NA          6.0 ## 2  2016-05-18 00:00:00       176    4   omni-whip      NA          6.0 ## 3  2016-05-18 00:00:00       176    4   omni-whip      NA          6.0 ## 4  2016-05-18 00:00:00       176    4   omni-whip      NA          6.0 ## 5  2015-07-06 00:00:00       176    1      yagi-3      NA           NA ## 6  2016-07-19 08:00:00       176    1      yagi-3      NA           NA ## 7  2016-08-09 07:15:00       176    1      yagi-3      NA           NA ## 8  2017-05-16 15:55:00       176    3   omni-whip      NA          6.2 ## 9  2017-05-17 15:19:00       176    4   omni-whip      NA          6.2 ## 10 2017-05-17 15:00:00       176    4   omni-whip      NA          6.2 ## 11 2017-08-20 23:30:00       176    4   omni-whip      NA          6.2"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Chapter 5 - Data Cleaning","text":"Follow instructions Chapter 2 install following packages loading, already installed.","code":"library(motus) library(tidyverse) library(lubridate)  Sys.setenv(tz = \"UTC\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"load-detections-data","dir":"Articles","previous_headings":"","what":"Load detections data","title":"Chapter 5 - Data Cleaning","text":"Recall Chapter 3 accessing sample database, need input motus.sample R console username password prompted tagme() user authentication process. section assumes already completed initial sample data download.","code":"sql.motus <- tagme(176, update = TRUE, dir = \"./data/\") ## Checking for new data in project 176 ## Updating metadata ## activity:     1 new batch records to check ## batchID  1977125 (#     1 of      1): got    156 activity records ## batchID  1977125 (#     1 of      1): got      0 activity records ## Downloaded 156 activity records ## nodeData:     0 new batch records to check ## Fetching deprecated batches ## Total deprecated batches: 6 ## New deprecated batches: 0"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"assess-tag-detections","dir":"Articles","previous_headings":"","what":"Assess tag detections","title":"Chapter 5 - Data Cleaning","text":"First, determine project tags detections. several reasons deployed tags might detected, including: tag properly activated deployment. avoid , always check tag active using hand-held receiver attaching tag study animal releasing . animal properly activated tag might passed within range receiving station. Study designs incorporate strategic placement receivers meet project goals can improve probability tag detected. Missing incorrect tag deployment metadata Motus database can result data processing algorithm ‘looking’ tag time tag deployed, . Please ensure tag metadata entered correctly. going , please check whether tags deployed , described Chapter 4 - Number deployments per tag. , need use tagDeployID combination motusTagID tagDeployID uniquely define detections associated tag deployment (either , combining two fields let know tagID associated deployment). sample data, tags deployed , use motusTagID unique identifier tag deployment R code throughout articles.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"preliminary-filtering","dir":"Articles","previous_headings":"","what":"Preliminary filtering","title":"Chapter 5 - Data Cleaning","text":"Invariably run false detections tag detection data. Sometimes may due random glitches noisy radio conditions. various outputs Motus web site pre-filtered, data downloaded via motus R package provide access detections, allowing users control detections keep omit. Therefore, important filter part data cleaning process. runs composed sequences hits, longer run confident can represents true detection. However, local conditions individual receiver may vary exposure background radio noise/interference. Sites relatively background noise may prone generating high number short runs reality spurious data. two filtering options motus R package follow ideas: Easiest field/column called motusFilter found runs table alltags view customizable, function called filterByActivity() continue motusFilter column, encourage users check article -depth detections filtering details motusFilter calculated customize filtering filterByActivity() function. motusFilter column runs table good first option identifying detections higher probability false. Currently motusFilter contains just two values: 0 1. Runs motusFilter 0 considered “invalid” (.e. low probability true detections) therefore omitted. omit dubious runs (0) keep ‘good’ runs (1) identified motusFilter filter() . double check can filter short runs original alltags view: compare newly created filtered table tbl.alltags.sub: Note filters may exclude true detections process. Therefore, recommend full analysis data, return detections examine individually determine (usually contextually) can considered real. mind, let’s keep track detections ’ve just removed.","code":"tbl(sql.motus, \"alltags\") %>%   select(hitID, runID, batchID, ts, motusFilter) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##     hitID runID batchID          ts motusFilter ##     <int> <int>   <int>       <dbl>       <dbl> ##  1  45107  8886      53 1445858390.           1 ##  2  45108  8886      53 1445858429.           1 ##  3  45109  8886      53 1445858477.           1 ##  4  45110  8886      53 1445858516.           1 ##  5  45111  8886      53 1445858564.           1 ##  6 199885 23305      64 1445857924.           1 ##  7 199886 23305      64 1445857983.           1 ##  8 199887 23305      64 1445858041.           1 ##  9 199888 23305      64 1445858089.           1 ## 10 199889 23305      64 1445858147.           1 ## # … with more rows tbl.alltags.sub <- tbl(sql.motus, \"alltags\") %>%   filter(motusFilter == 1) tbl(sql.motus, \"alltags\") %>%   select(hitID, runID, batchID, motusTagID, runLen) %>%   filter(runLen <= 3) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##     hitID  runID batchID motusTagID runLen ##     <int>  <int>   <int>      <int>  <int> ##  1 516095 104118     141      16047      3 ##  2 516096 104118     141      16047      3 ##  3 516097 104119     141      16047      3 ##  4 516098 104119     141      16047      3 ##  5 516099 104118     141      16047      3 ##  6 516100 104119     141      16047      3 ##  7 516101 104120     141      16047      2 ##  8 516102 104120     141      16047      2 ##  9 516132 104133      97      16047      2 ## 10 516133 104133      97      16047      2 ## # … with more rows tbl.alltags.sub %>%   select(hitID, runID, batchID, motusTagID, runLen) %>%   filter(runLen <= 3) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ## # … with 5 variables: hitID <int>, runID <int>, batchID <int>, ## #   motusTagID <lgl>, runLen <int> df.block.0 <- tbl(sql.motus, \"alltags\") %>%   filter(motusFilter == 0) %>%   collect()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"preliminary-data-checks","dir":"Articles","previous_headings":"","what":"Preliminary data checks","title":"Chapter 5 - Data Cleaning","text":"Prior specific data filtering, perform checks, summaries plots data.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"checking-receivers","dir":"Articles","previous_headings":"Preliminary data checks","what":"Checking receivers","title":"Chapter 5 - Data Cleaning","text":"example, need remove 150 detections, geographic data associated receiver metadata, way determine location detections. example, can see receivers missing data filtering .na(recvDeployLat) .na(recvDeployName): Notice receivers also missing names. users explore fix metadata, missing values begin disappear. don’t problems data, can continue walk-. However multiple missing recvDeployName may want flatten data change names proceeding. make new name latitude longitude. take route, remember future examples ’ll want use new, flatted data frame df.alltags.sub, un-flatted tbl.alltags.sub Note: GPS points data, may wish check article Working GPS points, particularly section details might wish combine create new lat/lons combination recvDeployLat/recvDeployLon gpsLat/gpsLon.","code":"tbl.alltags.sub %>%   filter(is.na(recvDeployLat) | is.na(recvDeployName)) %>%   select(recvDeployLat, recvDeployLon, recvDeployName, recvDeployID, recv,           recvProjID, recvProjName) %>%   distinct() ## # Source:   lazy query [?? x 7] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##   recvDeployLat recvDeployLon recvDeployName recvDeployID recv        recvProjID ##           <dbl>         <dbl> <chr>                 <int> <chr>            <int> ## 1            NA            NA NP mobile              3813 Lotek-280          176 ## 2            NA            NA NA                       NA SG-1415BBB…         NA ## 3            NA            NA NA                       NA SG-2814BBB…         NA ## # … with 1 more variable: recvProjName <chr> df.alltags.sub <- tbl.alltags.sub %>%   collect() %>% # flatten your data   mutate(recvDeployName = if_else(is.na(recvDeployName),                                    paste0(recvDeployLat, \":\", recvDeployLon),                                   recvDeployName))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"summarize-tag-detections","dir":"Articles","previous_headings":"Preliminary data checks","what":"Summarize tag detections","title":"Chapter 5 - Data Cleaning","text":"initial view data best achieved plotting. show later plot detections map, prefer simpler approach first; plotting detections time latitude longitude. First however, simplify data. don’t, risk trying plot thousands millions points plot (can take long time). Simplify data plotting can simplify data summarizing runID. want summarize finer/coarser scale, can also create groups summarize . create summary data frame can filter produce different plots: initially plot subset tags either latitude longitude1, get overview might issues. , simplify example, plot six tags. avoid examining ambiguous tags now.  Although don’t seem immediate problems, let’s take look tags showing around 44 degrees September. Let’s examine tags detail examining runs data frame associated detections September. Since already filtered dubious detections, remaining ones don’t seem immediately unreliable (high runLen). interested, can re-run code , full data frame (tbl(sql.motus, \"alltags\")) containing run lengths 2 3. see likely false positive detections sites, already eliminated filtering. Hypothetically, decided detections September false positives, create data frame contains motusTagIDs runIDs : Remove plotting data frame: plot data , omitted detections:  encouraged explore rest tags within group, determine additional false positives.","code":"df.summary <- tbl.alltags.sub %>%   filter(tagProjID == 176, # keep only tags registered to the sample project          !is.na(recvDeployLat) | !(recvDeployLat == 0)) %>% # drop data without lon/lat   group_by(motusTagID, runID, recvDeployName, ambigID,             tagDepLon, tagDepLat, recvDeployLat, recvDeployLon) %>%   #summarizing by runID to get max run length and mean time stamp:   summarize(max.runLen = max(runLen),              ts = mean(ts), .groups = \"drop\") %>%    arrange(motusTagID, ts) %>%   collect() %>%   mutate(time = as_datetime(ts)) ggplot(data = filter(df.summary,                      motusTagID %in% c(16011, 16035, 16036, 16037, 16038, 16039)),         aes(x = time, y = recvDeployLat)) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +    geom_point() +    geom_path() +   facet_wrap(~ motusTagID, scales = \"free\", ncol = 2) +   scale_x_datetime(date_labels = \"%Y-%m-%d\") tbl.alltags.sub %>%   filter(motusTagID %in% c(16035, 16037, 16039),          recvDeployLat < 44) %>%    collect() %>%   mutate(time = as_datetime(ts)) %>%   filter(month(time) == 9) %>%   group_by(recvDeployName, month = month(time), runLen) %>%   summarize(n = length(time),              n.tags = length(unique(motusTagID)),              .groups = \"drop\") %>%   arrange(runLen) ## # A tibble: 14 × 5 ##    recvDeployName        month runLen     n n.tags ##    <chr>                 <dbl>  <int> <int>  <int> ##  1 Assateague State Park     9      6     6      1 ##  2 FINWR                     9      6     6      1 ##  3 FINWR                     9     10    10      1 ##  4 FINWR                     9     20    20      1 ##  5 Prime Hook                9     23    23      1 ##  6 BULL                      9     24    24      1 ##  7 Prime Hook                9     27    27      1 ##  8 Bombay Hook               9     32    32      1 ##  9 Prime Hook                9     32    32      1 ## 10 Bombay Hook               9     36    36      1 ## 11 BULL                      9     38    38      1 ## 12 Port Maitland             9     42    42      1 ## 13 Bombay Hook               9     53    53      1 ## 14 FINWR                     9     73    73      1 df.block.1 <- tbl.alltags.sub %>%   filter(motusTagID %in% c(16035, 16037, 16039)) %>%   collect() %>%   mutate(time = as_datetime(ts)) %>%   filter(month(time) == 9) %>%   select(motusTagID, runID) %>%   distinct() %>%   collect() df.summary.sub <- df.summary %>%   anti_join(df.block.1, by = c(\"motusTagID\", \"runID\")) ggplot(data = filter(df.summary.sub,                      motusTagID %in% c(16011, 16035, 16036, 16037, 16038, 16039)),         aes(x = time, y = recvDeployLat)) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +    geom_point() +    geom_path() +   facet_wrap(~ motusTagID, scales = \"free\", ncol = 2) +   scale_x_datetime(date_labels = \"%Y-%m-%d\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"ambiguous","dir":"Articles","previous_headings":"","what":"Examining ambiguous detections","title":"Chapter 5 - Data Cleaning","text":"go , need check see tags ambiguous detections. , need explore , create additional filters remove detections database. tags associated ambiguous detections? clarify() function motus R package provides summary ambiguities detections data. ambigID refers selection detections belong one (6) motusTagIDs, listed id1 id6 columns: can see six tags ambiguous detections within data set. Detections associated five six ambigIDs belong one two tags, detections associated one ambigID (-171) belong one three tags. fullID fields list project names associated duplicate tags (e.g., “SampleData”, “Selva”, “Niles”), along features tags (manufacturer tag ID, burst, transmit frequency). Let’s get data frame , plots see may issues. Using df.summary, data frame can filter detections. also need create new IDs showing links ambiguous non-ambiguous detections tags ambiguous detections: Plot results! ’ll add information plot, showing (time) tags actually ambiguous. can inspect overall plots (portions ) determine can contextually unambiguously assign detection ambiguous tag single deployment.  Let’s deal easy ones first. ambigID -337: motusTagIDs 10811 16011 can see plot ambiguous tag -337 ambiguous beginning deployment. can see summary tag deployment data 4 detections, exact latitude deployment tag 16011, just non-ambiguous detections motusTagID 16011. issue simply tail end deployment tag 10811 slightly overlaps deployment tag 16011. can confidently claim detections belonging motusTagID 16011, remove ambiguous detections assigned tag. ’ll create another data frame keep track runs. ambigID -134: motusTagIDs 22905 23319 similar situation, one bit complex. Two identical tags deployed location, shortly one another. Let’s examine simple plot.  appears overlapping detections, two sites proximity one another. Additional information field researchers may enable us disentangle , clear data. therefore remove detections ambiguous tag database. , collect motusTagIDs want remove. ambigID -171: motusTagIDs 22778, 22902 22403 ambiguous detections tag, occur Great Lakes region, also belong motusTagID 22778 RBrownAMWO project motusTagID 24303 Neonics project. Let’s take closer look detections. First, find deployment dates locations tag. plot ambiguous detections date receiver.  see large number ambiguous detections 10 May 2017 Old Cut (Long Point, Lake Erie, Ontario), consistent bird ‘hanging around’. almost certainly detections motusTagID ‘24303’ deployed Old Cut 10 May 2017. Subsequent detections 18th May near Old Cut (Bird Studies Canada HQ, Port Rowan, Ontario), location North Old Cut (Hagersville, Ontario). detections consistent bird departing migration. Note particular pattern latter two panels increasing decreasing signal strength indicates bird flying beam antenna. detections belong another project, simply remove detections ambiguous tag database. ambigID -114: motusTagIDs 22897 24298 Next look ambiguities ambiguous tag -114. subset detections plot . initial plot suggested detections represent migratory flight, construct somewhat different plot one emphasizes behaviour better.  Notice detections consistent migratory departure Long Point area (Old Cut Field Station, Lake Erie, Ontario) week ambiguous tag 24298 deployed location. suggests ambiguous detections can removed data belong another project. ambigID -106: motusTagIDs 17021 17357 two tags pose interesting problem. short period overlap, mid-August 2015 mid-September. One individual Grey-cheeked Thrush, tagged Colombia, White-rumped Sandpiper, associated sample project. plot ambiguous detections date examine period overlap.  sets detections long run lengths, look valid (increasing decreasing signal strength). day apart, possible represent two different birds, departure flight White-rumped Sandpiper staging ground. Let’s use siteTrans() function examine flight Netitishi MDR/Seal (Gulf Maine). detections >1200 km distant one another, flight speed (17 m/s) consistent White-rumped Sandpiper. Given Gray-cheeked Thrush tag near end expected lifetime, can reasonably claim detections project, remove ambiguous detections associated motusTagID 17021. ambigID -56: motusTagIDs 22867 23316 two tags also deployed project. Tag 23316 deployed James Bay Shorebird Project (sample project) three weeks tag 22867, deployed location far west.  can see plot tag detected consistently near longitude -65, near deployment location motusTagID 23316 ’s deployment start date, also present -65 detections far west. ’s likely detections -65 belong motusTagID 23316, also clear anything informative ambiguity occurs 9-11 October, let’s zoom part data set.  can see ambiguous tag detected consistently Niapiskau Grand Ile period also detected north west (Washkaugou Piskwamish) south (NBNJ, SHNJ, CONY). can look transition filtering portion data near Niapiskau, using siteTrans() function motus package. bird made 14.5 hour (52386/60/60) flight Washkaugou SHNJ rate 24 m/s, plausible. researchers involved may data support refute inference (e.g. actual sighting Red Knot still Niapiskau flight recorded) seems likely one tag remained sites around longitude -65, another tag made migratory flights. can make another detailed plot signal strength examine potential migratory flights closely:  look like typical fly-patterns increasing decreasing signal strength. , coupled overall detection patterns knowledge species, leads us believe ambiguous detections can reasonably divided two individuals; one detected consistently around longitude -65 (23316), migrating SW period (22867). address problem, need create two filters: one excludes ambiguous detections tag 22867, one excludes detections 23316. instance, can easily filtering motusTagID recvDeployName. Tag 23316 ever “Grand-Ile”, “Niapiskau”, tag 22867 never detected sites. exclude detections “Grand-Ile”, “Niapiskau” motusTag 23316, opposite tag 22867.","code":"clarify(sql.motus) ##   ambigID numHits   id1                              fullID1   id2 ## 1    -337       4 10811        Niles#152:6.1@166.38(M.10811) 16011 ## 2    -171    2074 22778   RBrownAMWO#308:5.3@166.38(M.22778) 22902 ## 3    -134   22749 22905   SampleData#301:5.3@166.38(M.22905) 23319 ## 4    -114      86 22897 SampleData#303.1:5.3@166.38(M.22897) 24298 ## 5    -106     279 17021        Selva#172:6.1@166.38(M.17021) 17357 ## 6     -56    5734 22867 SampleData#272.1:5.3@166.38(M.22867) 23316 ##                                fullID2   id3                         fullID3 ## 1   SampleData#152:6.1@166.38(M.16011)    NA                            <NA> ## 2 SampleData#308.1:5.3@166.38(M.22902) 24303 NEONICS#308:5.3@166.38(M.24303) ## 3 SampleData#301.1:5.3@166.38(M.23319)    NA                            <NA> ## 4      NEONICS#303:5.3@166.38(M.24298)    NA                            <NA> ## 5   SampleData#172:6.1@166.38(M.17357)    NA                            <NA> ## 6   SampleData#272:5.3@166.38(M.23316)    NA                            <NA> ##   id4 fullID4 id5 fullID5 id6 fullID6 motusTagID tsStart tsEnd ## 1  NA      NA  NA      NA  NA      NA         NA      NA    NA ## 2  NA      NA  NA      NA  NA      NA         NA      NA    NA ## 3  NA      NA  NA      NA  NA      NA         NA      NA    NA ## 4  NA      NA  NA      NA  NA      NA         NA      NA    NA ## 5  NA      NA  NA      NA  NA      NA         NA      NA    NA ## 6  NA      NA  NA      NA  NA      NA         NA      NA    NA df.ambigTags <- tbl.alltags.sub %>%   select(ambigID, motusTagID) %>%   filter(!is.na(ambigID)) %>%   distinct() %>%   collect() df.summary.ambig <- filter(df.summary, motusTagID %in% df.ambigTags$motusTagID) %>%    mutate(ambig = !is.na(ambigID)) # Ambiguous or not? TRUE/FALSE  # to put all ambiguous tags from the same project on the same plot together, we # need to create a new 'ambig tag' variable we call 'newID' that includes the  # multiple 'motusTagIDs' for each 'ambigID'  ambigTags2 <- tbl.alltags.sub %>%   select(ambigID, motusTagID) %>%   filter(!is.na(ambigID)) %>%   distinct() %>%   collect() %>%    group_by(ambigID) %>%   summarize(newID = paste(unique(ambigID), toString(motusTagID), sep = \": \")) %>%   left_join(df.ambigTags, by = \"ambigID\")  # and merge that with 'df.summary'  df.summary.ambig <- left_join(df.summary.ambig, ambigTags2, by = \"motusTagID\") %>%    arrange(time) ggplot(data = df.summary.ambig,         aes(x = time, y = recvDeployLat, colour = ambig)) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +    geom_point() +    geom_path() +    facet_wrap(~ newID, scales = \"free\", ncol = 2) tbl.alltags.sub %>%   filter(ambigID == -337) %>%   count(motusTagID, tagDeployStart, tagDeployEnd, tagDepLat, tagDepLon) %>%    collect() %>%    mutate(tagDeployStart = as_datetime(tagDeployStart),          tagDeployEnd = as_datetime(tagDeployEnd)) ## # A tibble: 2 × 6 ## # Groups:   motusTagID, tagDeployStart, tagDeployEnd, tagDepLat [2] ##   motusTagID tagDeployStart      tagDeployEnd        tagDepLat tagDepLon     n ##        <int> <dttm>              <dttm>                  <dbl>     <dbl> <int> ## 1      10811 2014-10-28 07:00:00 2015-08-03 07:00:00      39.1     -74.7     4 ## 2      16011 2015-08-02 11:39:59 2015-12-17 11:39:59      51.5     -80.4     4 # we want the detections associated with the motusTagID that we want to  # ultimately REMOVE from the data frame  df.block.2 <- tbl.alltags.sub %>%   filter(ambigID == -337,          motusTagID == 10811) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect() tbl.alltags.sub %>%   filter(ambigID == -134) %>%   collect() %>%    mutate(tagDeployStart = as_datetime(tagDeployStart),          tagDeployEnd = as_datetime(tagDeployEnd),          month = month(as_datetime(ts))) %>%    count(motusTagID, tagDeployStart, tagDeployEnd,             tagDepLat, tagDepLon, month) ## # A tibble: 2 × 7 ##   motusTagID tagDeployStart      tagDeployEnd        tagDepLat tagDepLon month ##        <int> <dttm>              <dttm>                  <dbl>     <dbl> <dbl> ## 1      22905 2016-10-01 16:00:00 2017-06-12 16:00:00      50.2     -63.7    10 ## 2      23319 2016-10-15 16:00:00 2017-06-26 16:00:00      50.2     -63.7    10 ## # … with 1 more variable: n <int> df.plot <- tbl.alltags.sub %>%   filter(motusTagID %in% c(22905, 23319)) %>%   collect() %>%   mutate(time = as_datetime(ts))  ggplot(data = df.plot,        aes(x = time, y = sig, group = recvDeployName, colour = recvDeployName)) +    geom_point() +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   facet_grid(recvDeployLon ~ .) df.block.3 <- tbl.alltags.sub %>%   filter(ambigID == -134) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect() tbl.alltags.sub %>%   filter(ambigID == -171) %>%    filter(!is.na(tagDeployStart)) %>%   select(motusTagID, tagProjID, start = tagDeployStart, end = tagDeployEnd,           lat = tagDepLat, lon = tagDepLon, species = speciesEN) %>%   distinct() %>%   arrange(start) %>%   collect() %>%   mutate(start = as_datetime(start),          end = as_datetime(end)) ## # A tibble: 3 × 7 ##   motusTagID tagProjID start               end                   lat   lon ##        <int>     <int> <dttm>              <dttm>              <dbl> <dbl> ## 1      22902       176 2016-10-01 16:00:00 2017-06-12 16:00:00  50.2 -63.7 ## 2      22778        82 2016-10-21 00:00:00 2018-09-09 00:00:00  45.1 -67.3 ## 3      24303       146 2017-05-10 22:30:59 2017-06-30 22:30:59  42.6 -80.5 ## # … with 1 more variable: species <chr> df.ambig.171 <- filter(tbl.alltags.sub, ambigID == -171) %>%    collect() %>%   mutate(time = as_datetime(ts),          date = as_date(time))  ggplot(data = df.ambig.171, aes(x = time, y = sig, colour = as.factor(port))) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +    geom_point() +    geom_smooth(method = \"loess\", se = FALSE) +    facet_wrap(date ~ recvDeployName, scales = \"free_x\") ## `geom_smooth()` using formula 'y ~ x' df.block.4 <- tbl.alltags.sub %>%   filter(ambigID == -171) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect() tbl.alltags.sub %>%   filter(ambigID == -114) %>%    filter(!is.na(tagDeployStart)) %>%   select(motusTagID, tagProjID, start = tagDeployStart, end = tagDeployEnd,           lat = tagDepLat, lon = tagDepLon, species = speciesEN) %>%   distinct() %>%   arrange(start) %>%    collect() %>%    mutate(start = as_datetime(start),          end = as_datetime(end)) ## # A tibble: 2 × 7 ##   motusTagID tagProjID start               end                   lat   lon ##        <int>     <int> <dttm>              <dttm>              <dbl> <dbl> ## 1      22897       176 2016-10-01 16:00:00 2017-06-12 16:00:00  50.2 -63.7 ## 2      24298       146 2017-05-10 03:00:00 2017-06-30 03:00:00  42.6 -80.5 ## # … with 1 more variable: species <chr> df.ambig.114 <- tbl.alltags.sub %>%   filter(ambigID == -114) %>%   collect() %>%   mutate(LatLonStationName = paste(recvDeployLat, recvDeployLon,                                     recvDeployName, sep=\": \"),          time = as_datetime(ts))  ggplot(data = df.ambig.114, aes(x = time, y = sig, colour = LatLonStationName)) +   geom_point() +    theme_bw() df.block.5 <- tbl.alltags.sub %>%   filter(ambigID == -114) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect() tbl.alltags.sub %>%   filter(ambigID == -106) %>%    filter(!is.na(tagDeployStart)) %>%   select(motusTagID, tagProjID, start = tagDeployStart, end = tagDeployEnd,           lat = tagDepLat, lon = tagDepLon, species = speciesEN) %>%   distinct() %>%   arrange(start) %>%    collect() %>%    mutate(start = as_datetime(start),          end = as_datetime(end)) ## # A tibble: 2 × 7 ##   motusTagID tagProjID start               end                   lat   lon ##        <int>     <int> <dttm>              <dttm>              <dbl> <dbl> ## 1      17021        57 2015-04-30 05:00:00 2015-09-14 05:00:00  11.1 -74.1 ## 2      17357       176 2015-08-11 07:20:00 2015-12-26 07:20:00  51.5 -80.4 ## # … with 1 more variable: species <chr> df.ambig.106 <- tbl.alltags.sub %>%   filter(ambigID == -106) %>%   collect() %>%    mutate(time = as_datetime(ts),          date = as_date(time),           col = paste(recvDeployLat, recvDeployLon, recvDeployName, sep = \": \"))  ggplot(data = df.ambig.106, aes(x = time, y = sig, colour = col)) +   theme_bw() +   geom_point() +    scale_colour_discrete(name = \"Lat/Lon and\\nStation Name\") +   facet_wrap(~ date, scales = \"free_x\") df.ambig.106 %>%    filter(motusTagID == 17021) %>% # just pick one of the two ambiguous IDs   siteTrans() %>%   filter(rate < 60) %>% # remove the simultaneous detections from Seal and MDR   mutate(total.time = as.numeric(round(seconds_to_period(tot_ts)))) %>%   select(start = recvDeployName.x, end = recvDeployName.y,           date = ts.x, `rate(m/s)` = rate,           dist, total.time = total.time, bearing) ## # A tibble: 1 × 7 ##   start          end   date                `rate(m/s)`   dist total.time bearing ##   <chr>          <chr> <dttm>                    <dbl>  <dbl>      <dbl>   <dbl> ## 1 Netitishi_51.… MDR_… 2015-09-02 04:18:42        17.1 1.21e6      70879    128. df.block.6 <- tbl.alltags.sub %>%   filter(ambigID == -106, motusTagID == 17021) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect() tbl.alltags.sub %>%   filter(ambigID == -56) %>%    filter(!is.na(tagDeployStart)) %>%   select(motusTagID, tagProjID, start = tagDeployStart, end = tagDeployEnd,           lat = tagDepLat, lon = tagDepLon, species = speciesEN) %>%   distinct() %>%   arrange(start) %>%    collect() %>%    mutate(start = as_datetime(start),          end = as_datetime(end)) ## # A tibble: 2 × 7 ##   motusTagID tagProjID start               end                   lat   lon ##        <int>     <int> <dttm>              <dttm>              <dbl> <dbl> ## 1      22867       176 2016-09-06 15:35:00 2017-05-18 15:35:00  51.8 -80.7 ## 2      23316       176 2016-10-02 16:00:00 2017-06-13 16:00:00  50.2 -63.7 ## # … with 1 more variable: species <chr> df.ambig.56 <- tbl.alltags.sub %>%   filter(ambigID == -56) %>%   collect() %>%   mutate(sig = ifelse(sig > 0, sig * -1, sig),          time = as_datetime(ts),          col = paste(recvDeployLat, recvDeployLon, recvDeployName, sep=\": \"))  ggplot(data = df.ambig.56, aes(x = time, y = recvDeployLon, colour = col)) +   theme_bw() +   geom_point() +    scale_colour_discrete(name=\"Lat/Lon and\\nStation Name\") time.begin <- \"2016-10-06 00:00:00\" time.end <- \"2016-10-12 23:00:00\"  ggplot(data = filter(df.ambig.56, time > time.begin, time < time.end),        aes(x = time, y = recvDeployLon, colour = col)) +   theme_bw() +   geom_point() +    scale_colour_discrete(name = \"Lat/Lon and\\nStation Name\") # other tag is a duplicate df.56.tmp <- filter(df.ambig.56, !(recvDeployLat == 50.2), motusTagID == 22867)   siteTrans(df.56.tmp) %>%   filter(rate < 60) %>% # get rid of simultaneous detections   mutate(total.time = as.numeric(round(seconds_to_period(tot_ts)))) %>%   select(start = recvDeployName.x,           end = recvDeployName.y,           date = ts.x, `rate(m/s)` = rate,           dist, total.time = total.time, bearing) ## # A tibble: 11 × 7 ##    start         end   date                `rate(m/s)`   dist total.time bearing ##    <chr>         <chr> <dttm>                    <dbl>  <dbl>      <dbl>   <dbl> ##  1 Piskwamish_5… Wash… 2016-10-09 22:49:59      20.4   7.68e4       3767   137.  ##  2 Washkaugou_5… SHNJ… 2016-10-10 00:00:42      24.3   1.27e6      52386   157.  ##  3 NBNJ_39.4, -… Niap… 2016-10-10 15:47:37       7.74  1.46e6     188426    31.4 ##  4 Niapiskau_50… Gran… 2016-10-18 04:22:02      43.5   1.16e4        266   -92.2 ##  5 Grand-Ile_50… Niap… 2016-10-18 04:29:12       0.728 1.16e4      15887    87.7 ##  6 Grand-Ile_50… Niap… 2016-10-19 04:34:04       0.531 1.16e4      21758    87.7 ##  7 Niapiskau_50… Gran… 2016-10-23 01:39:14       5.55  1.16e4       2084   -92.2 ##  8 Grand-Ile_50… Niap… 2016-10-25 17:57:52      19.3   1.16e4        600    87.7 ##  9 Niapiskau_50… Gran… 2016-10-25 21:13:49       0.243 1.16e4      47541   -92.2 ## 10 Grand-Ile_50… Niap… 2016-10-26 19:43:34       0.758 1.16e4      15254    87.7 ## 11 Niapiskau_50… Gran… 2016-10-27 00:03:21       0.246 1.16e4      46941   -92.2 df.56.tmp <- tbl.alltags.sub %>%   filter(ambigID == -56, recvDeployLon < -70) %>%   collect() %>%    mutate(time = as_datetime(ts),          date = as_date(time),          col = paste(recvDeployLat, recvDeployLon, recvDeployName, sep = \": \"))  ggplot(data = df.56.tmp, aes(x = time, y = sig, colour = col)) +    theme_bw() +   geom_point() +    scale_colour_discrete(name = \"Lat/Lon and\\nStation Name\") +    facet_wrap(~ date, scales = \"free_x\") df.block.7 <- tbl.alltags.sub %>%   filter(ambigID == -56,           motusTagID == 23316,           !(recvDeployName %in% c(\"Grand-Ile\", \"Niapiskau\"))) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect()  df.block.8 <- tbl.alltags.sub %>%   filter(ambigID == -56,           motusTagID == 22867,           recvDeployName %in% c(\"Grand-Ile\", \"Niapiskau\")) %>%    select(motusTagID, runID) %>%   distinct() %>%   collect()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"checking-validity-of-short-runs","dir":"Articles","previous_headings":"","what":"Checking validity of short runs","title":"Chapter 5 - Data Cleaning","text":"beginning chapter, removed short/noisy detections motusFilter 0, considered high probability false positive. Now ’ve cleaned data, confident detections remain, might point decide go back take closer look omitted detections. , example, re-running various plots described chapter (begin lat/lon time plots), see detections make sense context true detections lie. user decide detections reasonable terms biology behaviour tagged individual.","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"filter-and-save-to-rds","dir":"Articles","previous_headings":"Filtering the data","what":"Filter and save to RDS","title":"Chapter 5 - Data Cleaning","text":"filter data, can omit rows df.block data frames original data using anti_join(), removes rows x (tbl.alltags.sub) present y (df.block). First combine df.block data frames single data frame: Now save local data frame RDS file, use next chapter. Recall Exporting detections Chapter 3 RDS format preserves R data structure, including time stamps. benefit saving RDS output given workflow saved flat file, can access simple readRDS() statement. read data :","code":"df.block.all <- bind_rows(df.block.0, df.block.2, df.block.3,                           df.block.4, df.block.5, df.block.6, df.block.7,                            df.block.8)  df.alltags.sub <- tbl(sql.motus, \"alltags\") %>%    collect() %>%   anti_join(df.block.all, by = c(\"runID\", \"motusTagID\")) saveRDS(df.alltags.sub, file = \"./data/dfAlltagsSub.rds\") df.alltags.sub <- readRDS(\"./data/dfAlltagsSub.rds\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/05-data-cleaning.html","id":"saveFilter","dir":"Articles","previous_headings":"Filtering the data","what":"Save a custom filter in the motus database, and apply it to the data","title":"Chapter 5 - Data Cleaning","text":"alternative saving data RDS file, Motus R package offers functionalities save filters directly within .motus file. saved database, can type anti_join() without rely dataframes RDS file store data. learn functions available work Motus filters, refer Appendix D details. Now can obtain table object filtered records tbl.filter removed: Next Chapter 6 - Exploring detections data (Explore articles)","code":"df.block.all <- bind_rows(df.block.0, df.block.2, df.block.3,                            df.block.4, df.block.5, df.block.6, df.block.7,                            df.block.8) %>%   mutate(probability = 0)  # create a new filter with name filtAmbigFalsePos and populate it with df.block.all tbl.filter <- writeRunsFilter(sql.motus, \"filtAmbigFalsePos\",                                df = df.block.all, delete = TRUE) ## Filter records saved tbl.alltags.sub <- anti_join(tbl(sql.motus, \"alltags\"),                               tbl.filter,                               by = c(\"runID\", \"motusTagID\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Chapter 6 - Exploring detections data","text":"Follow instructions Chapter 2 install following packages loading, haven’t already done .","code":"library(motus) library(tidyverse) library(sf) library(lubridate) library(rnaturalearth) library(ggmap)  Sys.setenv(TZ = \"UTC\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Chapter 6 - Exploring detections data","text":"followed along previous Chapter (Chapter 5 - Data cleaning) working cleaned df.alltags.sub file, can skip step go directly Summarizing data. Otherwise, saved data RDS file, can load using: , ’ve applied custom filter .motus file, can load previously downloaded sample Motus data (see Chapter 3) clean now. Currently main benefit using custom filter apply filter .motus file, allows flexibility applying dplyr functions manage filter data (e.g., can select different variables include data included RDS file Chapter 5 - Data cleaning). approach also allows readily integrate new data added database tagme() function. selecting variables filtering records, following gives dataset readRDS() statement : Note project large, may want convert portion dataframe, avoid memory issues. Details filtering tbl prior collecting dataframe available Converting flat data Chapter 3. adding filter command, case, creating dataframe motusTagID 16047, can decide best subset data based need (e.g. species year):","code":"df.alltags.sub <- readRDS(\"./data/dfAlltagsSub.rds\") # change dir to local directory # load the .motus file (remember 'motus.sample' is both username and password) sql.motus <- tagme(176, update = TRUE, dir = \"./data/\") ## Checking for new data in project 176 ## Updating metadata ## activity:     1 new batch records to check ## batchID  1977125 (#     1 of      1): got    156 activity records ## batchID  1977125 (#     1 of      1): got      0 activity records ## Downloaded 156 activity records ## nodeData:     0 new batch records to check ## Fetching deprecated batches ## Total deprecated batches: 6 ## New deprecated batches: 0 tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")  # obtain a table object of the filter tbl.filter <- getRunsFilters(sql.motus, \"filtAmbigFalsePos\")  # filter and convert the table into a dataframe, with a few modications df.alltags.sub <- left_join(tbl.alltags, tbl.filter, by = c(\"runID\", \"motusTagID\")) %>%   mutate(probability = ifelse(is.na(probability), 1, probability)) %>%   filter(probability > 0) %>%   select(-noise, -slop, -burstSlop, -done, -bootnum, -codeSet,           -mfg, -nomFreq, -markerNumber, -markerType, -tagDepComments,           -fullID, -deviceID, -recvDeployAlt,           -speciesGroup, -gpsLat, -gpsLon, -recvSiteName) %>%   collect() %>%   mutate(time = as_datetime(ts),  # work with times AFTER transforming to flat file          tagDeployStart = as_datetime(tagDeployStart),          tagDeployEnd = as_datetime(tagDeployEnd),          recvDeployName = if_else(is.na(recvDeployName),                                    paste(recvDeployLat, recvDeployLon, sep=\":\"),                                    recvDeployName)) # create a subset for a single tag, to keep the dataframe small df.alltags.16047 <- filter(df.alltags.sub, motusTagID == 16047)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"summarizing-your-data","dir":"Articles","previous_headings":"","what":"Summarizing your data","title":"Chapter 6 - Exploring detections data","text":"run basic commands, starting summary() function view selection variables data frame: dplyr package allows easily summarize data group, manipulate variables, create new variables based data. can manipulate existing variables create new ones dplyr’s mutate() function, ’ll convert ts date/time format, make new variable year day year (doy). ’ll also remove set points missing receiver latitude longitudes. may useful contexts (example approximate location receiver known) can cause warnings errors plotting. can also summarize information group, case motusTagID, apply various functions groups getting total number detections (n) tag, number receivers tag detected , first last detection date, total number days least one detection: can also group multiple variables; applying function now grouping motusTagID recvDeployName, get information tag detected receiver. Since grouping recvDeployName, default one recvDeployName group, thus variable nRecv 1 row. informative, however include help illustrate grouping works:","code":"sql.motus %>%    tbl(\"alltags\") %>%    select(ts, motusTagID, runLen, speciesEN, tagDepLat, tagDepLon,           recvDeployLat, recvDeployLon) %>%    collect() %>%   mutate(time = as_datetime(ts)) %>%    summary() ##        ts              motusTagID        runLen        speciesEN         ##  Min.   :1.438e+09   Min.   :-1953   Min.   :   2.0   Length:188354      ##  1st Qu.:1.477e+09   1st Qu.:22758   1st Qu.:   2.0   Class :character   ##  Median :1.477e+09   Median :22897   Median :  12.0   Mode  :character   ##  Mean   :1.482e+09   Mean   :22604   Mean   : 206.5                      ##  3rd Qu.:1.489e+09   3rd Qu.:22905   3rd Qu.: 153.0                      ##  Max.   :1.498e+09   Max.   :24303   Max.   :2474.0                      ##                                                                          ##    tagDepLat       tagDepLon      recvDeployLat    recvDeployLon     ##  Min.   :11.12   Min.   :-80.69   Min.   :-42.50   Min.   :-143.68   ##  1st Qu.:50.19   1st Qu.:-63.75   1st Qu.:-42.50   1st Qu.: -73.88   ##  Median :50.19   Median :-63.75   Median : 50.19   Median : -63.91   ##  Mean   :50.15   Mean   :-65.86   Mean   : 10.36   Mean   : -69.12   ##  3rd Qu.:50.19   3rd Qu.:-63.75   3rd Qu.: 50.20   3rd Qu.: -63.75   ##  Max.   :51.80   Max.   :-63.75   Max.   : 62.89   Max.   : -60.02   ##  NA's   :80949   NA's   :80949    NA's   :173      NA's   :173       ##       time                     ##  Min.   :2015-07-23 10:10:54   ##  1st Qu.:2016-10-19 02:00:53   ##  Median :2016-10-26 13:19:24   ##  Mean   :2016-12-15 03:37:44   ##  3rd Qu.:2017-03-14 08:46:57   ##  Max.   :2017-06-26 16:11:04   ## # same summary for the filtered sql data df.alltags.sub %>%    select(time, motusTagID, runLen, speciesEN, tagDepLat, tagDepLon,           recvDeployLat, recvDeployLon) %>%    summary() ##       time                       motusTagID        runLen       ##  Min.   :2015-08-03 06:37:11   Min.   :-1953   Min.   :   4.0   ##  1st Qu.:2016-10-06 19:18:39   1st Qu.:22897   1st Qu.:  27.0   ##  Median :2016-10-09 21:50:50   Median :22897   Median :  97.0   ##  Mean   :2016-09-05 19:18:32   Mean   :22262   Mean   : 234.7   ##  3rd Qu.:2016-10-19 10:42:18   3rd Qu.:22897   3rd Qu.: 287.0   ##  Max.   :2017-04-20 22:33:19   Max.   :23316   Max.   :1371.0   ##                                                                 ##   speciesEN           tagDepLat       tagDepLon      recvDeployLat    ##  Length:48225       Min.   :50.19   Min.   :-80.69   Min.   :-42.50   ##  Class :character   1st Qu.:50.19   1st Qu.:-63.75   1st Qu.: 50.20   ##  Mode  :character   Median :50.19   Median :-63.75   Median : 50.20   ##                     Mean   :50.34   Mean   :-65.56   Mean   : 49.87   ##                     3rd Qu.:50.19   3rd Qu.:-63.75   3rd Qu.: 50.20   ##                     Max.   :51.80   Max.   :-63.75   Max.   : 51.82   ##                     NA's   :92      NA's   :92       NA's   :164      ##  recvDeployLon    ##  Min.   :-80.69   ##  1st Qu.:-63.75   ##  Median :-63.75   ##  Mean   :-65.28   ##  3rd Qu.:-63.75   ##  Max.   :-62.99   ##  NA's   :164 df.alltags.sub <- df.alltags.sub %>%   mutate(year = year(time), # extract year from time          doy = yday(time)) %>% # extract numeric day of year from time   filter(!is.na(recvDeployLat))  head(df.alltags.sub) ## # A tibble: 6 × 52 ##     hitID runID batchID       ts tsCorrected   sig sigsd  freq freqsd motusTagID ##   <int64> <int>   <int>    <dbl>       <dbl> <dbl> <dbl> <dbl>  <dbl>      <int> ## 1   45107  8886      53   1.45e9 1445858390.    52     0     4      0      16047 ## 2   45108  8886      53   1.45e9 1445858429.    54     0     4      0      16047 ## 3   45109  8886      53   1.45e9 1445858477.    55     0     4      0      16047 ## 4   45110  8886      53   1.45e9 1445858516.    52     0     4      0      16047 ## 5   45111  8886      53   1.45e9 1445858564.    49     0     4      0      16047 ## 6  199885 23305      64   1.45e9 1445857924.    33     0     4      0      16047 ## # … with 42 more variables: ambigID <int>, port <chr>, nodeNum <chr>, ## #   runLen <int>, motusFilter <dbl>, tagProjID <int>, mfgID <chr>, ## #   tagType <chr>, tagModel <chr>, tagLifespan <dbl>, tagBI <dbl>, ## #   pulseLen <dbl>, tagDeployID <int>, speciesID <int>, tagDeployStart <dttm>, ## #   tagDeployEnd <dttm>, tagDepLat <dbl>, tagDepLon <dbl>, tagDepAlt <dbl>, ## #   tagDeployTest <int>, recvDeployID <int>, recvDeployLat <dbl>, ## #   recvDeployLon <dbl>, recv <chr>, recvDeployName <chr>, … tagSummary <- df.alltags.sub %>%   group_by(motusTagID) %>%    summarize(nDet = n(),             nRecv = length(unique(recvDeployName)),             timeMin = min(time),             timeMax = max(time),             totDay = length(unique(doy)))  head(tagSummary) ## # A tibble: 6 × 6 ##   motusTagID  nDet nRecv timeMin             timeMax             totDay ##        <int> <int> <int> <dttm>              <dttm>               <int> ## 1      -1953    10     1 2017-03-18 06:21:12 2017-03-25 05:54:54      2 ## 2      16011   116     1 2015-08-03 06:37:11 2015-08-05 20:41:12      3 ## 3      16035   415     5 2015-08-14 17:53:49 2015-09-02 14:06:09      6 ## 4      16036    62     1 2015-08-17 21:56:44 2015-08-17 21:58:52      1 ## 5      16037  1278     3 2015-08-23 15:13:57 2015-09-08 18:37:16     14 ## 6      16038    70     1 2015-08-20 18:42:33 2015-08-22 22:19:37      3 tagRecvSummary <- df.alltags.sub %>%   group_by(motusTagID, recvDeployName) %>%    summarize(nDet = n(),             nRecv = length(unique(recvDeployName)),             timeMin = min(time),             timeMax = max(time),             totDay = length(unique(doy)), .groups = \"drop\")  head(tagRecvSummary) ## # A tibble: 6 × 7 ##   motusTagID recvDeployName  nDet nRecv timeMin             timeMax             ##        <int> <chr>          <int> <int> <dttm>              <dttm>              ## 1      -1953 LLICALDAD         10     1 2017-03-18 06:21:12 2017-03-25 05:54:54 ## 2      16011 North Bluff      116     1 2015-08-03 06:37:11 2015-08-05 20:41:12 ## 3      16035 Brier2            38     1 2015-09-02 14:03:19 2015-09-02 14:06:09 ## 4      16035 D'Estimauville    32     1 2015-09-02 07:58:43 2015-09-02 08:04:24 ## 5      16035 Netitishi        274     1 2015-08-14 17:53:49 2015-09-01 21:35:32 ## 6      16035 Southwest Head    65     1 2015-09-02 13:06:13 2015-09-02 13:14:39 ## # … with 1 more variable: totDay <int>"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"plotting-your-data","dir":"Articles","previous_headings":"","what":"Plotting your data","title":"Chapter 6 - Exploring detections data","text":"Plotting data powerful way visualize broad fine-scale detection patterns. section give brief introduction plotting using ggplot2. depth information uses ggplot2, recommend Cookbook R, Rstudio ggplot2 cheatsheet. make coarse-scale plots large files, suggest first rounding detection time nearest hour day processing time faster. round detection times nearest hour, make basic plot hourly detections motusTagID:  Let’s focus tags deployed 2016, can colour tags species:  can see tags moved latitudinally first ordering hour, colouring motusTagID:  Now let’s look detailed plots signal variation. use full df.alltags.sub dataframe can get signal strength detection specific tag. Let’s examine fall 2016 detections tag 22897 Niapiskau; facet plot deployment name, ordered decreasing latitude:  use sunRiseSet() get sunrise sunset times detections. zoom certain timeframe add information plot adding geom_vline() statement code, adds yellow line sunrise time, blue line sunset time:  can see period, tag often detected day, suggesting may actively foraging area time. plots can provide valuable movement information receivers ordered geographically. motusTagID 16039:  zoom section plot look antenna bearings see directional movement past stations:  plot shows typical fly-pattern migrating animal, signal strength increasing decreasing tag moves beams antennas.","code":"df.alltags.sub.2 <- df.alltags.sub %>%   mutate(hour = hour(time)) %>%    select(motusTagID, port, tagDeployStart, tagDepLat, tagDepLon,           recvDeployLat, recvDeployLon, recvDeployName, antBearing, speciesEN, year, doy, hour) %>%    distinct()  ggplot(data = df.alltags.sub.2, aes(x = hour, y = as.factor(motusTagID))) +   theme_bw() +   geom_point() +    labs(x = \"Hour\", y = \"MotusTagID\") ggplot(data = filter(df.alltags.sub.2, year(tagDeployStart) == 2016),         aes(x = hour, y = as.factor(motusTagID), colour = speciesEN)) +   theme_bw() +    geom_point() +   labs(x = \"Hour\", y = \"MotusTagID\") +   scale_colour_discrete(name = \"Species\") df.alltags.sub.2 <- arrange(df.alltags.sub.2, hour)  ggplot(data = filter(df.alltags.sub.2, year(tagDeployStart) == 2016),         aes(x = hour, y = recvDeployLat, col = as.factor(motusTagID),             group = as.factor(motusTagID))) +    theme_bw() +    geom_point() +   geom_path() +   labs(x = \"Hour\", y = \"Receiver latitude\") +   scale_colour_discrete(name = \"MotusTagID\") ggplot(data = filter(df.alltags.sub,                       motusTagID == 22897,                       recvDeployName == \"Niapiskau\"),         aes(x = time, y = sig)) +   theme_bw() +    geom_point() +    labs(x = \"Time\", y = \"Signal strength\") +   facet_grid(recvDeployName ~ .) # add sunrise and sunset times to the dataframe df.alltags.sub <- sunRiseSet(df.alltags.sub, lat = \"recvDeployLat\", lon = \"recvDeployLon\")   ggplot(data = filter(df.alltags.sub, motusTagID == 22897,                      time > \"2016-10-11\",                      time < \"2016-10-17\",                      recvDeployName == \"Niapiskau\"),         aes(x = time, y = sig)) +   theme_bw() +    geom_point() +    labs(x = \"Time of year\", y = \"Signal strength\") +   geom_vline(aes(xintercept = sunrise), col = \"orange\") +    geom_vline(aes(xintercept = sunset), col = \"blue\") # We'll first order sitelat by latitude (for plots) df.alltags.sub <- mutate(df.alltags.sub,                           recvDeployName = reorder(recvDeployName, recvDeployLat))  ggplot(data = filter(df.alltags.sub,                       motusTagID == 16039,                      time < \"2015-10-01\"),         aes(x = time, y = recvDeployName)) +   theme_bw() +    geom_point() +    labs(x = \"Time of year\", y = \"Receiver name (ordered by latitude)\") ggplot(data = filter(df.alltags.sub, motusTagID == 16039,                       time > \"2015-09-14\",                       time < \"2015-10-01\"),         aes(x = time, y = sig, col = as.factor(antBearing))) +   theme_bw() +    geom_point() +    labs(x = \"Time of day\", y = \"Signal strength\") +   scale_color_discrete(name = \"Antenna bearing\") +   facet_grid(recvDeployName ~ .)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"mapping-your-data","dir":"Articles","previous_headings":"","what":"Mapping your data","title":"Chapter 6 - Exploring detections data","text":"generate maps tag paths, use summarized data can work much smaller database faster processing. ’ll summarize detections day. use code similar code used Chapter 5 - Data cleaning, however, create simple function summarize data, since likely want type summary .","code":"# Simplify the data by summarizing by the runID # If you want to summarize at a finer (or coarser) scale, you can also create # other groups.  fun.getpath <- function(df) {   df %>%     filter(tagProjID == 176, # keep only tags registered to the sample project            !is.na(recvDeployLat) | !(recvDeployLat == 0)) %>%      group_by(motusTagID, runID, recvDeployName, ambigID,               tagDepLon, tagDepLat, recvDeployLat, recvDeployLon) %>%     summarize(max.runLen = max(runLen), time = mean(time), .groups = \"drop\") %>%     arrange(motusTagID, time) %>%     data.frame() } # end of function call  df.alltags.path <- fun.getpath(df.alltags.sub) df.alltags.sub.path <- df.alltags.sub %>%   filter(tagProjID == 176) %>% # only tags registered to project   arrange(motusTagID, time) %>%       # order by time stamp for each tag   mutate(date = as_date(time)) %>%    # create date variable   group_by(motusTagID, date, recvDeployName, ambigID,             tagDepLon, tagDepLat, recvDeployLat, recvDeployLon)  df.alltags.path <- fun.getpath(df.alltags.sub.path)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"creating-simple-maps-with-the-sf-package","dir":"Articles","previous_headings":"Mapping your data","what":"Creating simple maps with the sf package","title":"Chapter 6 - Exploring detections data","text":"Mapping allows us spatially view data connect sequential detections may represent flight paths cases. First load base maps rnaturalearth package. Please see Chapter 4 detail already downloaded rnaturalearth shapefiles. , map paths, set x-axis y-axis limits based location receivers detections. Depending data, might need modified encompass deployment location tags, tags deployed near towers detections. use ggplot sf plot map tag paths. add points receivers lines connecting consecutive detections motusTagID. also include ‘x’ tags deployed. can also add points receivers active, detect birds certain time period already downloaded metadata.","code":"world <- ne_countries(scale = \"medium\", returnclass = \"sf\")  lakes <- ne_load(type = \"lakes\", scale = \"medium\", category = 'physical',                  returnclass = \"sf\",                  destdir = \"map-data\") # use this if already downloaded shapefiles ## OGR data source with driver: ESRI Shapefile  ## Source: \"/home/runner/work/motus/motus/vignettes/articles/map-data\", layer: \"ne_50m_lakes\" ## with 412 features ## It has 39 fields ## Integer64 fields read as strings:  scalerank ne_id # just use the tags that we have examined carefully and filtered (in the # previous chapter) df.tmp <- df.alltags.path %>%   filter(motusTagID %in% c(16011, 16035, 16036, 16037, 16038, 16039)) %>%   arrange(time)  %>% # arrange by hour   as.data.frame()  # set limits to map based on locations of detections, ensuring they include the # deployment locations xmin <- min(df.tmp$recvDeployLon, na.rm = TRUE) - 2 xmax <- max(df.tmp$recvDeployLon, na.rm = TRUE) + 2 ymin <- min(df.tmp$recvDeployLat, na.rm = TRUE) - 1 ymax <- max(df.tmp$recvDeployLat, na.rm = TRUE) + 1  # map ggplot(data = world) +    geom_sf(colour = NA) +   geom_sf(data = lakes, colour = NA, fill = \"white\") +   coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +   theme_bw() +    labs(x = \"\", y = \"\") +   geom_path(data = df.tmp,              aes(x = recvDeployLon, y = recvDeployLat,                  group = as.factor(motusTagID), colour = as.factor(motusTagID))) +   geom_point(data = df.tmp, aes(x = recvDeployLon, y = recvDeployLat),               shape = 16, colour = \"black\") +   geom_point(data = df.tmp,               aes(x = tagDepLon, y = tagDepLat), colour = \"red\", shape = 4) +   scale_colour_discrete(\"motusTagID\") # get receiver metadata tbl.recvDeps <- tbl(sql.motus, \"recvDeps\") df.recvDeps <- tbl.recvDeps %>%    collect() %>%    mutate(timeStart = as_datetime(tsStart),          timeEnd = as_datetime(tsEnd),          # for deployments with no end dates, make an end date a year from now          timeEnd = if_else(is.na(timeEnd), Sys.time() + years(1), timeEnd))  # get running intervals for all receiver deployments siteOp <- with(df.recvDeps, interval(timeStart, timeEnd))  # set the date range you're interested in dateRange <- interval(as_date(\"2015-08-01\"), as_date(\"2016-01-01\"))  # create new variable \"active\" which will be set to TRUE if the receiver was # active at some point during your specified date range, and FALSE if not df.recvDeps$active <- int_overlaps(siteOp, dateRange)   # create map with receivers active during specified date range as red, and # receivers with detections as yellow ggplot(data = world) +    geom_sf(colour = NA) +   geom_sf(data = lakes, colour = NA, fill = \"white\") +   coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand = FALSE) +   theme_bw() +    labs(x = \"\", y = \"\") +   geom_point(data = filter(df.recvDeps, active == TRUE),               aes(x = longitude, y = latitude),               shape = 16, colour = \"grey60\") +   geom_path(data = df.tmp,              aes(x = recvDeployLon, y = recvDeployLat,                  group = as.factor(motusTagID), colour = as.factor(motusTagID))) +   geom_point(data = df.tmp, aes(x = recvDeployLon, y = recvDeployLat),               shape = 16, colour = \"black\") +   geom_point(data = df.tmp,               aes(x = tagDepLon, y = tagDepLat), colour = \"red\", shape = 4) +   scale_colour_discrete(\"motusTagID\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/06-exploring-data.html","id":"mapping-with-the-ggmap-package","dir":"Articles","previous_headings":"Mapping your data","what":"Mapping with the ggmap package","title":"Chapter 6 - Exploring detections data","text":"Mapping ggmap allows select multiple base layers. several ways use ggmap package. One Google Maps, , October 16, 2018, requires Google Maps API key (see Troubleshooting details). alternative method use open source map tiles, Stamen Map tiles, require API key. following example uses Stamen Map tiles. first step create map specified map , maptype (“terrain”, “toner”, “watercolor”, among others), level zoom (integer zoom 3-21, 3 continent level, 10 city-scale. stamen maps represents level detail want). add points receivers lines connecting consecutive detections motusTagID. functions provide examples can begin exploring data means exhaustive. Next? Explore articles","code":"gmap <-  get_stamenmap(bbox = c(left = -90, right = -57, bottom = 35, top = 55),                        maptype = \"terrain-background\", # select maptype                        zoom = 6) # zoom, must be a whole number  # just use the tags that we have examined carefully and filtered (in the # previous chapter) df.tmp <- df.alltags.path %>%   filter(motusTagID %in% c(16011, 16035, 16036, 16037, 16038, 16039)) %>%   arrange(time)  %>% # arrange by hour   as.data.frame()  ggmap(gmap) +   theme_bw() +    geom_point(data = df.tmp, aes(x = recvDeployLon, y = recvDeployLat),               shape = 21, colour = \"black\", fill = \"yellow\") +   geom_path(data = df.tmp,              aes(x = recvDeployLon, y = recvDeployLat, group = motusTagID, col = as.factor(motusTagID))) +   scale_color_discrete(name = \"MotusTagID\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/database-variables.html","id":"variables","dir":"Articles","previous_headings":"","what":"Variables","title":"Database Variables","text":"table lists variables present .motus SQLite databases. Notes: Variable Name refers name variable (column/field) table Table Name reflects tables (actual database tables) variable can found Views refer database ‘views’ variable can found (views contain data , show data collected arranged various tables) e.g., alt variable gps table, put alltagsGPS view, called gpsAlt Creation Comments specific comments particular variable created. applies mostly variables created fly, , might come different tables. Use Search bar narrow results particular variable (e.g., latitude), table (e.g., recvDeps), view (e.g., alltags) Next? Explore articles","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"In-depth detections filtering","text":"runs composed sequences hits, longer run confident can represents true detection. Run lengths (runLen) included alltags view. However, local conditions individual receiver may vary level background radio noise/interference. Sites background noise may prone generating high number short runs actually spurious data. activity table contains information number runs (numRuns) many runs particularly short (.e. 2 hits = run2 3 hits = run3, etc.) per hour (hourBin). Therefore good first pass filter use length run amount radio activity (number short runs) given site determine whether remove run hits.","code":"library(motus) library(tidyverse) library(lubridate)  sql.motus <- tagme(176, update = TRUE, new = FALSE, dir = \"./data/\") tbl(sql.motus, \"alltags\") %>%   select(hitID, runID, batchID, motusTagID, runLen) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##     hitID runID batchID motusTagID runLen ##     <int> <int>   <int>      <int>  <int> ##  1  45107  8886      53      16047      5 ##  2  45108  8886      53      16047      5 ##  3  45109  8886      53      16047      5 ##  4  45110  8886      53      16047      5 ##  5  45111  8886      53      16047      5 ##  6 199885 23305      64      16047     11 ##  7 199886 23305      64      16047     11 ##  8 199887 23305      64      16047     11 ##  9 199888 23305      64      16047     11 ## 10 199889 23305      64      16047     11 ## # … with more rows tbl(sql.motus, \"activity\") %>%   select(batchID, motusDeviceID, ant, year, month, day, hourBin, numRuns, run2, run3) ## # Source:   lazy query [?? x 10] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##    batchID motusDeviceID ant    year month   day hourBin numRuns  run2  run3 ##      <int>         <int> <chr> <int> <int> <int>   <int>   <int> <int> <int> ##  1      53           486 1      2015     9    25  400872       1     0     0 ##  2      53           486 1      2015     9    30  401014       1     0     0 ##  3      53           486 1      2015    10     8  401204       1     0     0 ##  4      53           486 -1     2015     9    30  401014       1     1     0 ##  5      53           486 -1     2015    10     8  401204       1     0     0 ##  6      53           486 2      2015     9    30  401012       1     0     1 ##  7      53           486 2      2015     9    30  401014       1     1     0 ##  8      53           486 2      2015    10     8  401204       1     0     0 ##  9      53           486 3      2015     9    21  400796       1     1     0 ## 10      53           486 3      2015     9    25  400872       1     0     1 ## # … with more rows"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"empirically-based-cutoffs","dir":"Articles","previous_headings":"","what":"Empirically-based cutoffs","title":"In-depth detections filtering","text":"Based ideas empirical examination data, Motus team determined set specific cutoffs work well default filter. general, short runs (length 2 3) relatively high probability false positives. contrast, long runs (length 5 ) high probability true positives. Therefore, runs length 3 less conservatively considered invalid, runs length 5 considered valid. noisy sites, greater chance spurious detections. Therefore, intermediate runs (length 4), considered valid quiet sites, likely invalid noisy sites. Noisy sites categorized many runs (>= 100 hourBin) high ratio runs lengths 2 given time (>= 85% per hourBin).","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"filtering-in-motus","dir":"Articles","previous_headings":"","what":"Filtering in motus","title":"In-depth detections filtering","text":"two filtering options motus R package follow ideas: motusFilter field/column runs table easiest option 1 filterByActivity() function motus package customizable","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"motusfilter","dir":"Articles","previous_headings":"Filtering in motus","what":"motusFilter","title":"In-depth detections filtering","text":"column/field motusFilter runs table filter value created server reflects: Empirically-based cutoffs defined manual filtering based aliasing --range records 2 good first option identifying detections higher probability false. Currently motusFilter contains just two values 0 1. Runs motusFilter 0 considered invalid (.e. low probability true detections) can therefore omitted. omit runs identified dubious motusFilter can use anti_join() dplyr package. First identify invalid runs motusFilter 0: Now use anti_join() remove runs alltags view: double check can filter short runs original alltags view compare newly created alltags_filtered table short runs, good!","code":"tbl(sql.motus, \"runs\") ## # Source:   table<runs> [?? x 10] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##     runID batchIDbegin     tsBegin  tsEnd  done motusTagID ant     len nodeNum motusFilter ##     <int>        <int>       <dbl>  <dbl> <int>      <int> <chr> <int> <chr>         <dbl> ##  1   8886           53 1445858390. 1.45e9     1      16047 3         5 NA                1 ##  2  23305           64 1445857924. 1.45e9     1      16047 1        11 NA                1 ##  3  23306           64 1445858341. 1.45e9     1      16047 3         6 NA                1 ##  4  23307           64 1445858497. 1.45e9     1      16047 2         5 NA                1 ##  5  23308           64 1445858826. 1.45e9     1      16047 2         5 NA                1 ##  6 104118          141 1445858904. 1.45e9     1      16047 2         3 NA                0 ##  7 104119          141 1445858875. 1.45e9     1      16047 3         3 NA                0 ##  8 104120          141 1445858933. 1.45e9     1      16047 -1        2 NA                0 ##  9 104131           97 1445855802. 1.45e9     1      16047 2         4 NA                1 ## 10 104132           97 1445855812. 1.45e9     1      16047 3         5 NA                1 ## # … with more rows bad_runs <- tbl(sql.motus, \"runs\") %>%   filter(motusFilter == 0) alltags_filtered <- anti_join(tbl(sql.motus, \"alltags\"), bad_runs, by = \"runID\") tbl(sql.motus, \"alltags\") %>%   select(hitID, runID, batchID, motusTagID, runLen) %>%   filter(runLen <= 3) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ##     hitID  runID batchID motusTagID runLen ##     <int>  <int>   <int>      <int>  <int> ##  1 516095 104118     141      16047      3 ##  2 516096 104118     141      16047      3 ##  3 516097 104119     141      16047      3 ##  4 516098 104119     141      16047      3 ##  5 516099 104118     141      16047      3 ##  6 516100 104119     141      16047      3 ##  7 516101 104120     141      16047      2 ##  8 516102 104120     141      16047      2 ##  9 516132 104133      97      16047      2 ## 10 516133 104133      97      16047      2 ## # … with more rows alltags_filtered %>%   select(hitID, runID, batchID, motusTagID, runLen) %>%   filter(runLen <= 3) ## # Source:   lazy query [?? x 5] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/project-176.motus] ## # … with 5 variables: hitID <int>, runID <int>, batchID <int>, motusTagID <lgl>, ## #   runLen <int>"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"filterbyactivity","dir":"Articles","previous_headings":"Filtering in motus","what":"filterByActivity()","title":"In-depth detections filtering","text":"motusFilter one method determining false detections, Motus users encouraged explore alternative filter parameters. default, filterByActivity() filters detections using specific cutoffs defined Empirically-based cutoffs. However, users can fine-tune filter adjusting cutoffs. get results example motusFilter, can use filterByActivity() default arguments return good (runLen > 3) runs. Note filterByActivity() requires SQLite database connection (flat data frame). compare hits, runs, batches, see two filtered data sets identical (although won’t always case3). Alternatively can change default view used, filterByActivity() function uses alltagsGPS view. However, large databases slow.","code":"alltags_filtered2 <- filterByActivity(sql.motus, return = \"good\") test1 <- alltags_filtered %>%   select(hitID, runID, batchID) %>%   collect()  test2 <- alltags_filtered2 %>%   select(hitID, runID, batchID) %>%   collect()  waldo::compare(test1, test2) ## ✔ No differences alltags_filtered3 <- filterByActivity(sql.motus, return = \"all\", view = \"alltagsGPS\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"customizing-the-filterbyactivity","dir":"Articles","previous_headings":"Filtering in motus > filterByActivity()","what":"Customizing the filterByActivity()","title":"In-depth detections filtering","text":"filterByActivity() function uses activity table identify potentially problematic runs. , can return just “true” positives (return = \"good\"), can also return just “false” positives (return = \"bad\") runs (return = \"\"). return runs, also get new column, probability, reflects either 0 (expected false positive) 1 (expected true positive), similar motusFilter column. example, following code adds probability column sample project data. can adjust parameters less strict (.e., exclude fewer detections). example, exclude runs length 2 less (minLen), keep runs length 4 (maxLen), exclude runs less length 3 (2 < run < 4) hour 500 runs (maxRuns) least 95% (ratio) runs run length 2. parameters can also strict (.e., exclude detections). next example excludes runs length 4 less (minLen), keeps runs length 10 (maxLen), exclude runs length 5-9 (4 < run < 10) hours 50 runs (maxRuns) least 75% (ratio) runs run length 2. Note filters may exclude true detections process. Therefore, recommend full analysis data, return detections examine individually, determine (usually contextually) can considered valid.","code":"alltags_filtered4 <- filterByActivity(sql.motus, return = \"all\") %>%   select(hitID, runID, batchID, motusTagID, runLen, probability)  alltags_filtered4 ## # A tibble: 188,354 × 6 ##       hitID   runID batchID motusTagID runLen probability ##     <int64>   <int>   <int>      <int>  <int>       <dbl> ##  1 57633911 3923241   27722      16052      2           0 ##  2 57633913 3923242   27722      16052      2           0 ##  3 57633915 3923243   27722      16052      2           0 ##  4 57633917 3923244   27722      16052      2           0 ##  5 57633919 3923245   27722      16052      2           0 ##  6 57633912 3923241   27722      16052      2           0 ##  7 57633914 3923242   27722      16052      2           0 ##  8 57633916 3923243   27722      16052      2           0 ##  9 57633918 3923244   27722      16052      2           0 ## 10 57633920 3923245   27722      16052      2           0 ## # … with 188,344 more rows relaxed <- filterByActivity(sql.motus, minLen = 2, maxLen = 4,                              maxRuns = 500, ratio = 0.95,                              return = \"all\") strict <- filterByActivity(sql.motus, minLen = 4, maxLen = 10,                             maxRuns = 50, ratio = 0.75,                             return = \"all\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/filtering.html","id":"exploring-problematic-detections","dir":"Articles","previous_headings":"","what":"Exploring problematic detections","title":"In-depth detections filtering","text":"may also interested generally exploring data short run lengths. example, following code shows maximum run length sites month (runs haven’t removed filtering). collect summarize receiver month maximum run lengths. ’ll create date/time column time ts column using as_datetime() lubridate package ’ll use month() function pull months.  Alternatively, can produce list sites maximum run length detections never greater (say) 4, may sometimes (always!) indicate simply false detections.  impossible go every possible issue may encounter . Users strongly encouraged explore data fully, make reasoned decisions detections unlikely indeterminate. Next? Explore articles","code":"max_runlen <- tbl(sql.motus, \"alltags\") %>%   collect() %>%   mutate(time = as_datetime(ts),          month = month(time)) %>%   group_by(recvDeployName, month) %>%   summarize(max.rl = max(runLen)) ## `summarise()` has grouped output by 'recvDeployName'. You can override using the ## `.groups` argument. ggplot(max_runlen, aes(x = recvDeployName, y = max.rl, fill = month)) +   geom_col(position = \"dodge\") +   scale_fill_viridis_c() +   coord_flip() ggplot(filter(max_runlen, max.rl < 5),         aes(x = recvDeployName, y = max.rl, fill = month)) +   geom_col(position = \"dodge\") +   scale_fill_viridis_c() +   coord_flip()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/gps.html","id":"working-with-gps-points","dir":"Articles","previous_headings":"","what":"Working with GPS points","title":"Working with GPS points","text":"can work GPS points one two ways: small data bases - Use alltagsGPS view directly (can slow) large data bases - Filter first, use addGPS() function match GPS points hits","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/gps.html","id":"alltagsgps-view","dir":"Articles","previous_headings":"Working with GPS points","what":"alltagsGPS view","title":"Working with GPS points","text":"alltagsGPS view combines hits GPS points Note hits GPS point associated, can filter : Note: alltagsGPS view alltags view includes GPS points. , alltagsGPS view can slower work , particularly large database.","code":"tbl(gps_tags, \"alltagsGPS\") %>%   select(hitID, runID, batchID, ts, gpsLat, gpsLon, gpsAlt) ## # Source:   lazy query [?? x 7] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/gps_sample.motus] ##       hitID   runID batchID          ts gpsLat gpsLon gpsAlt ##       <int>   <int>   <int>       <dbl>  <dbl>  <dbl>  <dbl> ##  1 32811108 7984227  118721 1509139743.     NA     NA     NA ##  2 32811109 7984227  118721 1509139823.     NA     NA     NA ##  3 32912898 7985620  120474 1515877560.     NA     NA     NA ##  4 32912899 7985620  120474 1515877600.     NA     NA     NA ##  5 32913271 7985787  120474 1515878154.     NA     NA     NA ##  6 32913272 7985787  120474 1515878194.     NA     NA     NA ##  7 32913404 7985850  120474 1515878250.     NA     NA     NA ##  8 32913405 7985850  120474 1515878329.     NA     NA     NA ##  9 32913717 7985998  120474 1515878623.     NA     NA     NA ## 10 32913718 7985998  120474 1515878662.     NA     NA     NA ## # … with more rows tbl(gps_tags, \"alltagsGPS\") %>%   select(hitID, runID, batchID, ts, gpsLat, gpsLon, gpsAlt) %>%   filter(!is.na(gpsLat)) ## # Source:   lazy query [?? x 7] ## # Database: sqlite 3.37.2 ## #   [/home/runner/work/motus/motus/vignettes/articles/data/gps_sample.motus] ##        hitID    runID batchID          ts gpsLat gpsLon gpsAlt ##        <int>    <int>   <int>       <dbl>  <dbl>  <dbl>  <dbl> ##  1 449016552 24439773  370452 1457111891.   36.5  -76.0   -3.4 ##  2 449016553 24439773  370452 1457111897.   36.5  -76.0   -3.4 ##  3 449016554 24439773  370452 1457111904.   36.5  -76.0   -3.4 ##  4 449016555 24439774  370452 1457111897.   36.5  -76.0   -3.4 ##  5 449016556 24439774  370452 1457111904.   36.5  -76.0   -3.4 ##  6 449016557 24439775  370452 1457111891.   36.5  -76.0   -3.4 ##  7 449016558 24439775  370452 1457111910.   36.5  -76.0   -3.4 ##  8 449016559 24439773  370452 1457111910.   36.5  -76.0   -3.4 ##  9 449016560 24439774  370452 1457111916.   36.5  -76.0   -3.4 ## 10 449016561 24439775  370452 1457111916.   36.5  -76.0   -3.4 ## # … with more rows"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/gps.html","id":"filtering-then-adding-gps-data","dir":"Articles","previous_headings":"Working with GPS points","what":"Filtering then adding GPS data","title":"Working with GPS points","text":"example, let’s work subset alltags view, including King Rails. Now let’s retrieve daily median location GPS points data. Note use original database gps_tags well data subset rails. Also note getGPS() function requires original, numeric ts column, want date/time column ’s best rename (.e. time = as_datetime(ts)). table index matching GPS points specific hitID, next step join data subset using left_join() function dplyr package. Note point, need use collect() ensure rails ‘flat’ (.e. data frame, database; see Converting flat data details). can subset columns see worked expected (filter non-missing, hits GPS point using default matching).","code":"rails <- tbl(gps_tags, \"alltags\") %>%   filter(speciesEN == \"King Rail\") index_GPS <- getGPS(src = gps_tags, data = rails) rails_GPS <- left_join(collect(rails), index_GPS, by = \"hitID\") rails_GPS %>%   select(hitID, runID, batchID, ts, contains(\"gps\")) %>%   filter(!is.na(gpsLat)) ## # A tibble: 92 × 9 ##         hitID    runID batchID       ts gpsLat gpsLon gpsAlt gpsTs_min gpsTs_max ##         <int>    <int>   <int>    <dbl>  <dbl>  <dbl>  <dbl>     <dbl>     <dbl> ##  1 1136575629 47145854  742386   1.50e9   44.0  -79.5   313.    1.50e9    1.50e9 ##  2 1136575630 47145854  742386   1.50e9   44.0  -79.5   313.    1.50e9    1.50e9 ##  3 1136576447 47146254  742386   1.50e9   44.0  -79.5   313.    1.50e9    1.50e9 ##  4 1136576448 47146254  742386   1.50e9   44.0  -79.5   313.    1.50e9    1.50e9 ##  5 1136578247 47147138  742386   1.50e9   44.0  -79.5   319.    1.50e9    1.50e9 ##  6 1136578248 47147138  742386   1.50e9   44.0  -79.5   319.    1.50e9    1.50e9 ##  7 1136578942 47147480  742386   1.50e9   44.0  -79.5   318.    1.50e9    1.50e9 ##  8 1136578943 47147480  742386   1.50e9   44.0  -79.5   318.    1.50e9    1.50e9 ##  9 1136578998 47147506  742386   1.50e9   44.0  -79.5   318.    1.50e9    1.50e9 ## 10 1136578999 47147506  742386   1.50e9   44.0  -79.5   318.    1.50e9    1.50e9 ## # … with 82 more rows"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/gps.html","id":"more-ways-of-matching-gps-points","dir":"Articles","previous_headings":"Working with GPS points > Filtering then adding GPS data","what":"More ways of matching GPS points","title":"Working with GPS points","text":"default, getGPS() matches GPS points hits date. However, can match GPS locations hitIDs according one several different time values, specified argument. can one three options: , X can number greater zero represents size time block minutes calculate median location aware ideally chose period smaller frequency GPS fixes recorded, hits associated GPS example, median location within 60 minutes hitID. similar = X except duration 24hr (= 1440) method suitable receiver deployments fixed location. individual GPS lat/lons returned, matching closest hitID timestamp method accurate mobile deployments, potentially slower = X. can also specify cutoff match GPS records within cutoff = X minutes hit. way can avoid situations ‘closest’ GPS record actually days away. example, closest location time noted within 2 hours hit. keep hitIDs, regardless whether match GPS data , use argument keepAll = TRUE. results NA gpsLat, gpsLon gpsAlt corresponding GPS hit (otherwise hit omitted).","code":"index_GPS <- getGPS(src = gps_tags, data = rails, by = 60) index_GPS ## # A tibble: 80 × 6 ##         hitID gpsLat gpsLon gpsAlt  gpsTs_min  gpsTs_max ##         <int>  <dbl>  <dbl>  <dbl>      <dbl>      <dbl> ##  1 1136575629   44.0  -79.5   312. 1496846031 1496846031 ##  2 1136575630   44.0  -79.5   312. 1496846031 1496846031 ##  3 1136576447   44.0  -79.5   349  1496856831 1496856831 ##  4 1136576448   44.0  -79.5   349  1496856831 1496856831 ##  5 1136578247   44.0  -79.5   229. 1497019734 1497019734 ##  6 1136578248   44.0  -79.5   229. 1497019734 1497019734 ##  7 1136578942   44.0  -79.5   323. 1497100736 1497100736 ##  8 1136578943   44.0  -79.5   323. 1497100736 1497100736 ##  9 1136578998   44.0  -79.5   323. 1497100736 1497100736 ## 10 1136578999   44.0  -79.5   323. 1497100736 1497100736 ## # … with 70 more rows index_GPS <- getGPS(src = gps_tags, data = rails, by = \"daily\") index_GPS ## # A tibble: 92 × 6 ##         hitID gpsLat gpsLon gpsAlt  gpsTs_min  gpsTs_max ##         <int>  <dbl>  <dbl>  <dbl>      <dbl>      <dbl> ##  1 1136575629   44.0  -79.5   313. 1496797130 1496879031 ##  2 1136575630   44.0  -79.5   313. 1496797130 1496879031 ##  3 1136576447   44.0  -79.5   313. 1496797130 1496879031 ##  4 1136576448   44.0  -79.5   313. 1496797130 1496879031 ##  5 1136578247   44.0  -79.5   319. 1496968733 1497050035 ##  6 1136578248   44.0  -79.5   319. 1496968733 1497050035 ##  7 1136578942   44.0  -79.5   318. 1497053935 1497137937 ##  8 1136578943   44.0  -79.5   318. 1497053935 1497137937 ##  9 1136578998   44.0  -79.5   318. 1497053935 1497137937 ## 10 1136578999   44.0  -79.5   318. 1497053935 1497137937 ## # … with 82 more rows index_GPS <- getGPS(src = gps_tags, data = rails, by = \"closest\", cutoff = 120) index_GPS ## # A tibble: 92 × 6 ##         hitID    gpsID gpsLat gpsLon gpsAlt      gpsTs ##         <int>    <int>  <dbl>  <dbl>  <dbl>      <dbl> ##  1 1136575629 22242037   44.0  -79.5   312. 1496846031 ##  2 1136575630 22242037   44.0  -79.5   312. 1496846031 ##  3 1136576447 22242040   44.0  -79.5   349  1496856831 ##  4 1136576448 22242040   44.0  -79.5   349  1496856831 ##  5 1136578247 22242081   44.0  -79.5   229. 1497019734 ##  6 1136578248 22242081   44.0  -79.5   229. 1497019734 ##  7 1136578942 22242103   44.0  -79.5   323. 1497100736 ##  8 1136578943 22242103   44.0  -79.5   323. 1497100736 ##  9 1136578998 22242103   44.0  -79.5   323. 1497100736 ## 10 1136578999 22242103   44.0  -79.5   323. 1497100736 ## # … with 82 more rows index_GPS <- getGPS(src = gps_tags, data = rails, keepAll = TRUE) index_GPS ## # A tibble: 2,758 × 6 ##       hitID gpsLat gpsLon gpsAlt gpsTs_min gpsTs_max ##       <int>  <dbl>  <dbl>  <dbl>     <dbl>     <dbl> ##  1 32811108     NA     NA     NA        NA        NA ##  2 32811109     NA     NA     NA        NA        NA ##  3 32912898     NA     NA     NA        NA        NA ##  4 32912899     NA     NA     NA        NA        NA ##  5 32913271     NA     NA     NA        NA        NA ##  6 32913272     NA     NA     NA        NA        NA ##  7 32913404     NA     NA     NA        NA        NA ##  8 32913405     NA     NA     NA        NA        NA ##  9 32913717     NA     NA     NA        NA        NA ## 10 32913718     NA     NA     NA        NA        NA ## # … with 2,748 more rows"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/gps.html","id":"using-gps-locations","dir":"Articles","previous_headings":"","what":"Using GPS locations","title":"Working with GPS points","text":"Now GPS data (either loading alltagsGPS using getGPS() function), can use coordinates cleaning data Chapter 5. Chapter 5, used receiver deployment latitude longitude: recvDepLat, recvDepLon. However, now gps data, can create receiver latitude longitude variables (recvLat, recvLon, recvAlt) based coordinates recorded receiver GPS (gpsLat, gpsLon, gpsAlt), available, infilled coordinates receiver deployment metadata (recvDeployLat, recvDeployLon, recvDeployAlt). Missing GPS coordinates may appear NA missing, 0 999 problem unit recording. However, changing values data, ’ll need flatten data first. Using example Chapter 5 starting Checking receivers Continuing Chapter 5 values, replace instances recvDeployLat recvLat recevDeployLon recvLon. also use flattened data frame, df.alltagsGPS, rather un-flattened tbl.alltagsGPS. Next? Explore articles","code":"sql.motus <- tagme(176, update = TRUE, dir = \"./data/\") ## Checking for new data in project 176 ## Updating metadata ## activity:     1 new batch records to check ## batchID  1977125 (#     1 of      1): got    156 activity records ## batchID  1977125 (#     1 of      1): got      0 activity records ## Downloaded 156 activity records ## nodeData:     0 new batch records to check ## Fetching deprecated batches ## Total deprecated batches: 6 ## New deprecated batches: 0 df.alltagsGPS <- tbl(sql.motus, \"alltagsGPS\") %>%   mutate(recvLat = if_else(is.na(gpsLat) | gpsLat %in% c(0, 999),                             recvDeployLat, gpsLat),          recvLon = if_else(is.na(gpsLon) | gpsLon %in% c(0, 999),                             recvDeployLon, gpsLon),          recvAlt = if_else(is.na(gpsAlt), recvDeployAlt, gpsAlt)) %>%   collect()  # Flatten the data  # Take a look select(df.alltagsGPS, hitID, recvLat, recvLon) ## # A tibble: 188,354 × 3 ##      hitID recvLat recvLon ##    <int64>   <dbl>   <dbl> ##  1   45107    42.6   -72.7 ##  2   45108    42.6   -72.7 ##  3   45109    42.6   -72.7 ##  4   45110    42.6   -72.7 ##  5   45111    42.6   -72.7 ##  6  199885    42.7   -72.5 ##  7  199886    42.7   -72.5 ##  8  199887    42.7   -72.5 ##  9  199888    42.7   -72.5 ## 10  199889    42.7   -72.5 ## # … with 188,344 more rows"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"basic-terms","dir":"Articles","previous_headings":"","what":"Basic terms","title":"Understanding Motus Data","text":"Hardware two types tags, Lotek CTT, operate processed differently. Receivers - landscape, receive signals collected antennas Antennas - Attached receiver, detect different signals emitted tags Nodes - Special antennas CTT receivers Data Hits - individual detection tag signal antenna Runs - series hits specific tag Batches - collection hits/runs processed together better understand terms, let’s look visual data.","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"hits-and-runs","dir":"Articles","previous_headings":"Understanding the data","what":"Hits and Runs","title":"Understanding Motus Data","text":"’s segment data receiver (two antennas): row represents individual tag (left) specific antenna (right) individual number (digit) represents tag hit (also called detection) run series hits individual tag example, Tag shows two runs (1 4), 6 hits example, Tag C detected antenna 1 2 Overlapping Runs Technically, specific tag never overlapping runs single antenna, can happen noisy environments Lotek tags (see Chapter 5 - Data Cleaning: Preliminary Filtering address false positives). Overlapping runs happen CTT tags way runs built, rate hits still expected around 1 per second lower. Determining tag identity Lotek tags, multiple tags transmit ID, therefore distinctive period (time hits) used differentiate among tags ID. Since Lotek tags identified individual hits, means runs fundamental unit detection. spacing two hits considered compatible particular tag represents multiple period length (allows occasional missed hits). However, run can gaps (missing hits) certain size. Beyond size, measurement error clock drift large enough can’t sure next detection compatible . example, runs Tag () ’re sure gap last detection run 1 first detection run 4 really compatible tag , run 1 ended new run begun. link runs 1 4 post-hoc, saw run 4 built gaps compatible tag , present, run-building algorithm doesn’t backtrack. contrast, CTT tags, 232 unique codes, ensures unique, period distinct may vary power available photovoltaic cell. Runs assembled based consecutive hits single antenna (node, applicable), long spaced arbitrary period (600 seconds).","code":"Receiver R                                      Time ->        \\=============================================================\\ Tag A: / 1-----1--1----1-----1-----1         4---4----4--4------4--4-/ <- antenna #1        \\                                                             \\ Tag B: /               3-----3--3--3--3--3-----3----3--3             / <- antenna #1        \\                                                             \\ Tag C: /  2--2---2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2   / <- antenna #1        \\                                                             \\ Tag C: /            5--------5--5--5--5--5--5-----5-------5-------5  / <- antenna #2        \\=============================================================\\"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"batches","dir":"Articles","previous_headings":"Understanding the data","what":"Batches","title":"Understanding Motus Data","text":"batch result processing one collection raw data files receiver. Batches inherent data, instead reflect data processed. Batches arise ways: user visits isolated receiver, downloads raw data files , uploads files motus.org back field receiver connected via WiFi, Ethernet, cell modem polled new data files; typically happens roughly every hour, random jitter smooth processing load motus server archive data files receiver re-processed motus server, important metadata changed (e.g. new changed tag deployment records), significant change made processing algorithms. Batches artificial divisions data stream, runs hits often cross batch boundaries. Adding complication picture gives :","code":"Receiver R                                      Time ->        \\=============|==============================|==================\\ Tag A: / 1-----1--1--|--1-----1-----1         4---4-|---4--4------4--4-/        \\             |                              |                  \\ Tag B: /             |  3-----3--3--3--3--3-----3---|-3--3             /        \\             |                              |                  \\ Tag C: /  2--2---2--2|--2--2--2--2--2--2--2--2--2--2|--2--2--2--2--2   /        \\============================================|==================\\        <-- Batch N ->|<-------- Batch N+1 --------->|<--- Batch N+2 --->"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"false-positives","dir":"Articles","previous_headings":"","what":"False positives","title":"Understanding Motus Data","text":"False positives (apparent detections tags actually caused sources) need taken account. can happen quite number reasons, sometimes affect Lotek CTT tags different measure. False positives difficult identify, approaches identify conditions likely occur, potential ways mitigate . suggestions techniques using separate true detections false positives, encourage share us!","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"noisy-environments","dir":"Articles","previous_headings":"False positives","what":"Noisy environments","title":"Understanding Motus Data","text":"Radio noise interference can create bursts look like tags. amount radio pulses sources increases environment, expected number false positives also increase. See: Chapter 5 - Data Cleaning > Preliminary Filtering -depth detections filtering","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"bit-errors","dir":"Articles","previous_headings":"False positives","what":"Bit errors","title":"Understanding Motus Data","text":"Actual tag signals may incorrectly transmitted. rarely produce valid ID’s, likely CTT tags, mostly high number possible combinations (4 billions). still rarely produce ID tag actually manufactured. CTT tags, bit errors found lead often specific patterns (e.g. last trailing digits 7 F’s: xxxFFFF due partial signal received). patterns excluded list valid tags.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"aliasing","dir":"Articles","previous_headings":"False positives","what":"Aliasing","title":"Understanding Motus Data","text":"Aliasing occurs combination multiple tags create appearance tag present matches another known tag. can happen least 2 ways: 2 tags distinct ID’s, period (Lotek CTT). 2 tags ID, distinct periods (Lotek). first case, burst tags overlap, may interfere create appearance new tag time. Assuming 2 tags exactly period, bursts eventually drift apart alias expected persist long run. second case, multiple tags ID distinct periods, also result new periods, exceed 2 consecutive hits (run length = 2) rarely. types aliasing mostly problematic environments many tags present simultaneously increases incidence overlapping tags (e.g. colonies). Manufacturers Lotek CTT tags integrated various methods reduce incidence false detections proprietary technologies. Data collected Sensor Gnomes processed “Tag finder”, looks properties signal exclude likely false positives (e.g. higher deviation frequency pulses within burst). parameters can potentially adjusted, aggressive approach aimed reducing false positives also result increase false negatives. See: Chapter 5 - Data Cleaning > Examining ambiguous detections","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"run-length","dir":"Articles","previous_headings":"False positives","what":"Run length","title":"Understanding Motus Data","text":"types tag technologies, likelihood obtaining false positives decrease run length increases. Lotek tags, generally recommend ignoring runs comprised 2 3 hits. probably relate real tag detections, vast majority probably . CTT tags, yet suggested minimum threshold. cases, given tag period short, one expect true single-hit runs quite rare, excluded. exception specific tag IDs prone error, likelihood obtaining false ID consecutive detections probably low. Runs 2 detections probably safe instances.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"missed-detections","dir":"Articles","previous_headings":"False positives","what":"Missed detections","title":"Understanding Motus Data","text":"False positives often lead gaps detections run. run contains several gaps detection therefore deemed less reliable. simple metric divide number hits run (run length) duration run (tsEnd - tsStart). Longer runs gaps detection optimal.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"overlapping-runs","dir":"Articles","previous_headings":"False positives","what":"Overlapping runs","title":"Understanding Motus Data","text":"Runs tag antenna also indication false positives, highly correlated number /ratio short runs described .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"spatio-temporal-models","dir":"Articles","previous_headings":"False positives","what":"Spatio-temporal models","title":"Understanding Motus Data","text":"State-space models approach can used assess whether movement make sense biological point view, can help assign probabilities individual detections valid.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"false-negatives","dir":"Articles","previous_headings":"","what":"False negatives","title":"Understanding Motus Data","text":"False negatives usually even difficult detect. Faulty equipement installation always possible course. Please refer installation guidelines make sure follow recommendations. FORGET register tags! (details ) FORGET activate tags deploying ! Make sure report tag receiver deployment details uploading data. Motus tag finder seek tags known deployed.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"complications","dir":"Articles","previous_headings":"","what":"Complications","title":"Understanding Motus Data","text":"picture complicated several facts: receivers often deployed isolated areas can obtain raw data occasionally receivers aware full set currently-active tags sensorgnome receivers “know” full Lotek code set; record pulses thought Lotek coded ID tags, able assemble tag hits small set tags -board database, built user’s recordings tags. limitation due restrictions agreement Lotek Acadia University use codeset. Lotek receivers report detected tagID independently, assemble runs. means raw Lotek .DTA file distinguish tag 123:4.5 tag 123:9.1 (.e. tags ID 123 burst intervals 4.5 seconds 9.1 seconds). means : raw receiver data must processed server full knowledge : tags deployed likely active Lotek codeset(s) raw data must processed incremental batches processed data distributed users incremental batches, especially wish obtain results “arrive”, rather one lump tags expired.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"boot","dir":"Articles","previous_headings":"Complications","what":"Receiver Boot Sessions","title":"Understanding Motus Data","text":"receiver reboots powered (possibly much later) powered back . boot session definied period reboots. Reboots often correspond receiver: redeployed software updated change made attached radios, Motus treats receiver reboots special way: reboot always begins new batch; .e. batches never extend across reboots. simplifies determination data ownership. example, data boot session (time period consecutive reboots) deemed belong Motus project. reflects fact receiver (almost?) always turned time deployed one project, time redeployed another project. active tag runs ended receiver reboots. Even tag present broadcasting, even reboot takes minutes, hits tag reboot belong separate runs. partly convenience determining data ownership, mentioned . also necessary sometimes receiver clocks properly set GPS reboot, timestamps boot session revert machine default, e.g. 1 Jan 2000. Although runs boot sessions principle re-assembled post hoc system clock can pinned information field notes, done automatically present. parameters tag-finding algorithm set per-batch basis. field sites, want allow lenient filtering little radio noise. sites, filtering strict, considerable noise high false-positive rates tags. Motus allows projects set parameter overrides individual receivers, overrides applied boot session, redeployments (always?) cause reboot. reprocessing data (see ) archive data files, boot session processed batch.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"incremental-distribution-of-data","dir":"Articles","previous_headings":"Complications","what":"Incremental Distribution of Data","title":"Understanding Motus Data","text":"motus R package allows users build local copy database tags’ (receivers’) hits incrementally. user can regularly call tagme() function obtain new hits tags. data processed batches, tagme() either nothing, downloads one new batches data user’s local DB. new batch corresponds set files processed single receiver. batch record includes items: - receiver device ID - many hits tags occurred batch - first last timestamp raw data processed batch new batch downloaded include hits one users’s tags (someone’s tags, batch “receiver” database). new batch might also include GPS fixes, user knows receiver tags detected. new batch include information runs. information comes three versions: information new run; .e. one begins batch information continuing run; .e. run began previous batch, hits batch, known ended information ending run; .e. run began previous batch, might hits batch, also known end batch (sufficiently long time elapsed since last detection tag) Although unique runID identifier run doesn’t change user calls tagme(), number hits run status (done ), might change.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"reprocessing-data","dir":"Articles","previous_headings":"","what":"Reprocessing Data","title":"Understanding Motus Data","text":"Motus occasionally need reprocess raw files receivers. several reasons: New modified tag deployment records tag detection code relies knowing active life tag looks , control rates false positive false negative hits. deployment record tag reaches server already processed raw files overlapping tag’s deployment, files need reprocessed order (potentially) find tag therein. Similary, tag mistakenly sought period deployed, “used ” signals instead come tags, thereby causing false positives, false negatives tags. (true Lotek ID tags; CTT unaffected, provided deployed tags well dispersed ID codespace.) Bug fixes improvements tag finding algorithm Corrections mis-filed data receivers Sometimes, duplication among receiver serial numbers (rare event) noticed data already processed. data likely reprocessed hits assigned correct station. Interleaved data two receivers serial number typically prevent hits least one , tag finder ignores data clock seems jumped backwards significantly.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"the-eventual-reprocessing-contract","dir":"Articles","previous_headings":"Reprocessing Data","what":"The (eventual) Reprocessing Contract","title":"Understanding Motus Data","text":"Reprocessing can disruptive user’s point view (“happened hits?”), Motus reprocessing : Optional: users able obtain new data without accept reprocessed versions data already . Reversible: users able “go back” previous version reprocessed data accepted. Transparent: users receive record reprocessed, , , done differently, changed --nothing: receiver boot session users data, data must come entirely either original processing, subsequent single reprocessing event. user must end undefined mix data original reprocessed sources. -band: user’s copy data updated incorporate reprocessed data part normal process updating obtain new data, unless choose otherwise. expect users want accept reprocessed data time. Initially, Motus data processing might adhere contract, eventual goal.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"reprocessing-simplified","dir":"Articles","previous_headings":"Reprocessing Data","what":"Reprocessing simplified","title":"Understanding Motus Data","text":"Raw data records arbitrary stretch time complicated reprocess, runs cross reprocessing boundaries might lose gain hits within reprocessing period, outside . might even break existing run distinct new runs. challenging formalize represent database want maintain full history processing. example, reprocessing deletes hits run 2, represent old new versions run? Therefore, simplicity choose reprocessing periods cross runs. Currently, means boot session, discussed .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus-data.html","id":"distributing-reprocessed-data","dir":"Articles","previous_headings":"Reprocessing Data","what":"Distributing reprocessed data","title":"Understanding Motus Data","text":"previous section shows reprocess data boot session. Given , get reprocessed data users fulfilling reprocessing contract? Note reprocessed boot session fully replace one existing batches one runs, batches runs nest within boot sessions. Replacement data reprocessed versions happen -band (point #5 ), one approach : reprocessID == 0: data batch new raw files; normal situation reprocessID == X > 0: data batch reprocessing existing raw files. X ID reprocessing event, new API entry reprocessing_info (X) can called obtain details . user chooses accept reprocessed version, existing batches, runs, hits GPS fixes receiver boot session retired adding new batches. user chooses reject reprocessed version, X added client-side blacklist, user receive data batches whose reprocessID blacklist. later, user decides accept reprocessing event earlier declined, IDs new batches event can fetched another new API reprocessing_batches (X), original batches deleted replacedIn == 0: data batch replaced reprocessing event replacedIn == X > 0: data batch replaced reprocessing event X. client can ignore batches replacedIn > 0. also add new boolean parameter unreplacedOnly batches_for_XXX API entries. defaults false, true, batches replaced subsequent reprocessing events returned. Motus$acceptReprocessedData <- TRUE; always accept batches data reprocessing events Motus$acceptReprocessedData <- FALSE; never accept batches data reprocessing events Motus$acceptReprocessedData <- NA (default); ask reprocessing event Next? Explore articles","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/motus.html","id":"workflow-summary","dir":"Articles","previous_headings":"","what":"Workflow summary","title":"Get started","text":"data suggest creating script (scripts) following workflow: Download/update data (see Chapter 2 - Installing packages, Chapter 3 - Accessing detections data) Select variables interest table working (typically alltags) (see Chapter 3 - Accessing detections data, Chapter 4 - Tag receiver deployments) Initial cleaning (see Chapter 4 - Tag receiver deployments Chapter 5 - Data cleaning) Output resulting data .rds file (see Exporting detections Chapter 3). suggest using RDS instead CSV, RDS format preserves underlying structure data (e.g. times stay times). want export data another program, CSV format might preferred. next? Check walkthrough starting Chapter 1 - Introduction (Explore articles)","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/signal-strength.html","id":"basic-plot","dir":"Articles","previous_headings":"Exploring data","what":"Basic plot","title":"Plotting signal strength vs. time","text":"look single id date. can see least several examples fly based time signal strength.  Creating plots can yield lot information, especially start coding symbols help us .","code":"ggplot(data = filter(df_tags, motusTagID == 16039), aes(x = time, y = sig)) +    geom_point() +   theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   facet_wrap(~ date, scales = \"free\", ncol = 3)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/signal-strength.html","id":"adding-runlen","dir":"Articles","previous_headings":"Exploring data","what":"Adding runLen","title":"Plotting signal strength vs. time","text":"good starting point add runLen (run lengths). can ‘binning’ (categorizing) run lengths catch short runs.","code":"ggplot(data = filter(df_tags, motusTagID == 16039),         aes(x = time, y = sig, colour = runLen_cat)) +    geom_point() +   theme_bw() +   theme(legend.position = \"top\") +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   facet_wrap(~ date, scales = \"free\", ncol = 3)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/signal-strength.html","id":"adding-antenna-bearings","dir":"Articles","previous_headings":"Exploring data","what":"Adding antenna bearings","title":"Plotting signal strength vs. time","text":"Next can add information antenna bearings (direction). ’ll use Unicode arrows define general antenna directions.  can also look carefully get better idea ’s going .","code":"ggplot(data = filter(df_tags, motusTagID == 16039),         aes(x = time, y = sig, colour = runLen_cat, shape = antBearing_cat)) +    geom_point(size = 8) +    theme_bw() +   theme(legend.position = \"top\") +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\"),                       na.value = \"\\u25AA\") +   facet_wrap(~ date, scales = \"free\", ncol = 3) ggplot(data = filter(df_tags, motusTagID == 16039, date == \"2015-08-31\"),         aes(x = time, y = sig, colour = runLen_cat, shape = antBearing_cat)) +    geom_point(size = 8) +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\"),                       na.value = \"\\u25AA\") +   facet_wrap( ~ hourBin, scales = \"free\", ncol = 3)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/signal-strength.html","id":"by-reciver-latitude","dir":"Articles","previous_headings":"Exploring data","what":"By reciver latitude","title":"Plotting signal strength vs. time","text":"can also look patterns receiver latitude, , scale obscures small local patterns, shows clear global pattern time. case see steady northern direction early fall.  best worlds use patchwork package compare figures.","code":"ggplot(data = filter(df_tags, motusTagID == 16039, date < \"2015-10-01\"),         aes(x = time, y = sig, colour = runLen_cat, shape = antBearing_cat)) +    geom_point(size = 8) +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\"),                       na.value = \"\\u25AA\") +   facet_wrap(~recvDeployLat, ncol = 1, scales = \"free_y\") g1 <- ggplot(data = filter(df_tags, motusTagID == 16039, date < \"2015-10-01\"),         aes(x = time, y = sig, colour = runLen_cat, shape = antBearing_cat)) +    geom_point(size = 8) +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\"),                       na.value = \"\\u25AA\") +   facet_wrap(~recvDeployLat, ncol = 1, scales = \"free_y\")  g2 <- ggplot(data = filter(df_tags, motusTagID == 16039, date < \"2015-10-01\"),         aes(x = time, y = sig, colour = runLen_cat, shape = antBearing_cat)) +    geom_point(size = 4) +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_viridis_d(end = 0.7) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\"),                       na.value = \"\\u25AA\") +   facet_wrap(~recvDeployLat, ncol = 1, scales = \"free\")   g1 + g2 + plot_layout(widths = c(4, 1), guides = \"collect\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/signal-strength.html","id":"highlighting-problems","dir":"Articles","previous_headings":"","what":"Highlighting problems","title":"Plotting signal strength vs. time","text":"alternative feature may help us identify problematic data highlight hits flagged motusFilter.  alternative feature may help us identify problematic data highlight hits flagged ambiguous tags. filter tags ambiguity.  Next? Explore articles","code":"ggplot(data = filter(df_tags, motusTagID == \"24298\", date == \"2017-05-18\"),         aes(x = time, y = sig, colour = factor(motusFilter), shape = antBearing_cat)) +    geom_point(size = 8) +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_manual(values = c(\"1\" = \"black\", \"0\" = \"red\")) +   scale_shape_manual(values = c(\"N\" = \"\\u2191\", \"S\" = \"\\u2193\",                                 \"E\" = \"\\u2192\", \"W\" = \"\\u2190\")) +   facet_wrap(~recvDeployLat, ncol = 1) motus_id <- df_tags %>%   filter(!is.na(ambigID)) %>%   pull(motusTagID) %>%   unique()  df_ambig <- filter(df_tags, motusTagID %in% motus_id) ggplot(data = filter(df_ambig, date < \"2015-09-01\"),        aes(x = time, y = sig, colour = ambig)) +    geom_point() +    theme_bw() +   labs(x = \"Time\", y = \"Signal strength\") +   scale_colour_manual(values = c(\"red\", \"black\")) +   facet_wrap(~motusTagID, ncol = 1)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"installation-problems","dir":"Articles","previous_headings":"","what":"Installation Problems","title":"Troubleshooting","text":"Occasionally users run problems trying install update motus. Often related problems different versions package dependencies. suggest several solutions. Update packages installation installation Motus generates errors saying existing packages removed, can try quit R session, manually delete problematic package folder R libraries manually install package trying install motus. can also try set custom R library folder .libPaths() ensure full write permissions folder, try start R administrator (Windows) SUDO mode (Linux/Ubuntu) try installing . set custom library folder installing new packages: cases, easier upgrade R reinstalling newest version R: https://cran.r-project.org/. Note: results nice clean installation fewer problems, necessitates re-installation R packages can time-consuming.","code":"library(remotes) update_packages() ## pak (0.2.0.9000 -> NA) [local] ## Skipping 3 packages not available: rnaturalearthhires, motusData, motus ## Skipping 1 packages ahead of CRAN: rnaturalearthdata ## Error : Could not copy `pak` to `/tmp/Rtmph2GNIq/filece223d4a16d0` .libPaths(\"C:/r-libraries/\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"updating-motusfrom-a-much-earlier-version","dir":"Articles","previous_headings":"Installation Problems","what":"Updating motusfrom a much earlier version","title":"Troubleshooting","text":"updating version motus version <1.5.0 >= 1.5.0 (.e. motusClient separate package), best results first remove motus motusClient reinstall scratch: Now can install v1.5.0+.","code":"remove.packages(c(\"motus\", \"motusClient\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"cannot-remove-old-versions","dir":"Articles","previous_headings":"Installation Problems","what":"Cannot remove old versions","title":"Troubleshooting","text":"get errors “remove prior installation package …” (e.g. dplyr) trying install motus, due multiple R sessions active. can try following: find R package library location: Sys.getenv(\"R_LIBS_USER\") .libPaths() close session R /R Studio library folder, manually delete package failed remove (e.g. dplyr) restart R manually install package e.g. install.packages(\"dplyr\") Another possible cause problem relates file permissions library folders (e.g. libraries installed c:files-3.x.x). confirm , can try running R “administrator” (right-clicking R icon), use SUDO R (Linux/Ubuntu) trying installation . resolves problem, consider setting libraries new folder logged user full access:","code":"# confirm the libPaths location(s) .libPaths() # add a new libPaths default location .libPaths(\"c:/users/myusername/R/win-libraries\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"general-problems","dir":"Articles","previous_headings":"","what":"General Problems","title":"Troubleshooting","text":"Many, many, problems arise conflicts R packages may date. problem can’t seem resolve, try following steps order (stopping problem goes away): Update motus packages motus depends . (may first need install remotes package). Re-start R Update packages. Re-start R Update R https://cran.r-project.org/. (may reinstall packages)","code":"remotes::update_packages(\"motus\") remotes::update_packages()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"logging-out-of-motus","dir":"Articles","previous_headings":"","what":"Logging out of motus","title":"Troubleshooting","text":"","code":"motusLogout()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"data-downloads","dir":"Articles","previous_headings":"","what":"Data downloads","title":"Troubleshooting","text":"attempting download data motus package, may encounter errors, many likely due interrupted connection. Always ensure connected internet using tagme() function update = TRUE. issues can solved either logging , restarting R resuming download. resume data download, run tagme() , include new = TRUE: errors persist unable download data, server may temporarily offline. Please contact Motus concerns motus@birdscanada.org.","code":"tagme(project.num, update = TRUE, dir = ...)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"google-maps","dir":"Articles","previous_headings":"","what":"Google Maps","title":"Troubleshooting","text":"October 16, 2018 recent updates require use Google key access google maps. obtain access key, must registered Google user date billing information, however pay service (first little least). obtain key: login Google Cloud Platform. already project create one. Check current billing information - charged must present date. navigation menu left, click APIs & Services > Credentials, click Create credentials > API key. may need enable Google Maps Static API. can navigation menu upper left corner, selecting APIs & Services > library, choosing “Google Maps Static API” clicking “Enable”. Full details listed “Detailed Guide” . Note may enable Google Maps Static API. troubleshooting see . access key, ’ll need provide call register_google(), time start new R session required enter key. can create Google maps ggmap package using get_googlemap() function specifying lat/lon center map (opposed bounding box stamen maps).","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-cannot-access-project-176-i-download-0-records-from-project-176","dir":"Articles","previous_headings":"Common errors","what":"I cannot access Project 176 / I download 0 records from Project 176","title":"Troubleshooting","text":"Remember project 176 accessible username password: motus.sample.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-the-message-auto-disconnecting-sqliteconnection-one-or-multiple-times-after-using-tagme","dir":"Articles","previous_headings":"Common errors","what":"I get the message “Auto-disconnecting SQLiteConnection” one or multiple times after using tagme()","title":"Troubleshooting","text":"occurs data download finished, message can ignored. occurs active download, connection usually maintained download continue. However download stops, simply run tagme() . work, suggest logging motus package restarting R resuming download.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-an-internal-server-error-message-when-using-tagme----update-true","dir":"Articles","previous_headings":"Common errors","what":"I get an “Internal Server Error” message when using tagme(..., update = TRUE)","title":"Troubleshooting","text":"get message updating .motus file, use tagme() continue download.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-an-error-forbidden-message-when-using-tagme","dir":"Articles","previous_headings":"Common errors","what":"I get an “Error: Forbidden” message when using tagme()","title":"Troubleshooting","text":"error may occur attempting download multiple projects simultaneously user account. get error, suggest logging motus package resuming download.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-an-error-object-xxxx-not-found-referring-to-a-table-or-field-name-or-some-of-your-examples-in-the-articles-do-not-work-","dir":"Articles","previous_headings":"Common errors","what":"I get an error “Object ‘xxxx’ not found”, referring to a table or field name, or some of your examples in the articles do not work.","title":"Troubleshooting","text":"sure start steps top chapter run sequential order. Another possibility .motus database hasn’t updated support latest version motus package. ensure .motus file --date motus package: correct warnings, follow steps: download latest version motus package (refer Chapter 2 - Loading packages). terminate restart R session. load motus package using library(motus) R console. load sqlite file. Look notes console indicating database updated. check version .","code":"sql.motus <- tagme(project.num, dir= ...) checkVersion(sql.motus) library(motus) sql <- tagme(project.num, dir= ...) checkVersion(sql)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-an-error-error-in-rsqlite_connectdbname-loadable-extensions-flags-vfs-could-not-connect-to-database-unable-to-open-database-file-when-attempting-to-run-tagme","dir":"Articles","previous_headings":"Common errors","what":"I get an error Error in rsqlite_connect(dbname, loadable.extensions, flags, vfs) : Could not connect to database: unable to open database file when attempting to run tagme()","title":"Troubleshooting","text":"get message, ’s likely ’re attempting new download update nonexistant directory. directory specified dir = \"\" command tagme() function. directory specified, files saved working directory. Use getwd() determine current working directory. Use setwd() set new working directory. specify location save files working directory use ./ followed file path.","code":"getwd() # show working directory, in this case it's \"C:/Documents\"  # downloads data to your working directory tagme(proj.num, new = TRUE, update = TRUE)  # downloads data to the data folder within your working directory # ie. the file path C:/Documents/data tagme(proj.num, new = TRUE, update = TRUE, dir = \"./data/\")   # downloads data to the file path C:/Downloads tagme(proj.num, new = TRUE, update = TRUE, dir = \"C:/Downloads\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-see-gps-coordinates-of-0-or-999","dir":"Articles","previous_headings":"Common errors","what":"I see GPS coordinates of “0” or “999”","title":"Troubleshooting","text":"values recorded GPS unit field. Values like ignored, can replace NA, insert recvDeployLat/recvDeplOyLon values taken receiver deployment metadata entered users.","code":"## to replace gpsLat/gpsLon values of NA, 0, or 999 with that of receiver deployment metadata in the alltags table, and read into a data.frame df.alltags <- tbl.alltags %>%    mutate(recvLat = if_else((is.na(gpsLat)|gpsLat == 0|gpsLat == 999),                             recvDeployLat, gpsLat),           recvLon = if_else((is.na(gpsLon)|gpsLon == 0|gpsLon == 999),                             recvDeployLon, gpsLon)   collect() %>% as.data.frame"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-see-port-with-a-value-of--1","dir":"Articles","previous_headings":"Common errors","what":"I see port with a value of -1","title":"Troubleshooting","text":"Port “-1” represents “A1+A2+A3+A4” compound antenna sometimes reported Lotek .DTA file detections. likely means receiver combined signal 4 antennas detect tag.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/troubleshooting.html","id":"i-get-the-error-error-in-rsqlite_fetchresptr-n-n-database-disk-image-is-malformed","dir":"Articles","previous_headings":"Common errors","what":"I get the error Error in rsqlite_fetch(res@ptr, n = n) : database disk image is malformed","title":"Troubleshooting","text":"likely due corrupt files can occur download. easiest solution delete current .motus file download scratch. course, always possibility articles contains errors! problems, please contact motus@birdscanada.org Next? Explore articles","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"things-to-be-aware-of","dir":"Articles","previous_headings":"","what":"Things to be aware of","title":"Vanishing bearings","text":"method assumes tagged animal departing general location receiving station, moving radially away station. really important note method WORK unless assumption met. tagged individuals likely aren’t departing exact location receiver station, considered coarse estimates departure orientation. deviation estimated vanishing bearings actual departure orientation results birds departing locations removed station called parallax error. Parallax error can minimized analyzing departures can confident signal strength characteristics individual departed fairly close receiving station. Using radar data, Sjöberg Nilsson (2015) estimated parallax error +- 10 degrees bird departed close station. Manual telemetry can used determine precise location individual stopover. absence known location, good way know individual departed general location receiving station look pattern detections pre- post-departure. individual departs near station, data show clear detection patterns least two different antennas prior departure. following plots use data collected tagged warblers spring 2014 2015 Morbey et al. (2017), show examples ) tag clear departure, b) tag show clear departure; information data can found Chapter 1’s Sample data section Load sample data section : Good departure: can see bird stayed vicinity Old Cut station stopover, shown increased signal variation day, decreased signal variation night. night departure, tag shows usual decrease activity night, followed increase activity around 02:30 departs; tag stops detected Old Cut’s station soon , detected nearby receivers departure flight:  Unclear departure: bird detected Old Cut station quite , detected apparent flyover; signal characteristics support clear departure station. case, know far bird station flyby. caution using examples like estimate vanishing bearings:  closely spaced antennas station, greater resolution estimate accurate vanishing bearing. Old Cut field station, three antennas spaced 120 degrees apart 2014, 90 degrees apart 2015 (facing approximately east, north west). years calculated coarse departure bearing using mean station--station bearings warblers detected multiple stations departure. gave us known departure direction. calculated vanishing bearings compare. following figure showing estimated coarse vanishing bearing warbler departing northwards Old Cut spring 2014, 3 antennas spaced 120 degrees apart. red line represents estimated vanishing bearing tag ID 277. blue line represents average coarse bearing based detections stations (red points):  example , estimated coarse vanishing bearings shown warbler departing north spring 2015, Old Cut’s antennas spaced 90 degrees apart. can see estimated vanishing bearing pretty close coarse bearing estimate.  Overall, mean deviation coarse vanishing bearings higher 2014 (n = 14 departures) antennas spaced 120 degrees apart, 2015 (n = 12 departures) antennas spaced 90 degrees apart:  suggests stations closer spaced antennas yield accurate vanishing bearings. estimation vanishing bearings primary goal research, suggest spacing antennas 60 degrees apart, Sjöberg Nilsson (2015). receivers negative signal strength values, weights need normalized calculating weighted circular means, negative weights used. therefore recommend normalizing signal strength values subtracting minimum signal strength, dividing difference min max signal strength, .e., using sig.norm = (sig - min(sig))/(max(sig)-min(sig)). , suggest using min max signal strength station, across data collected station, full range potential signal strength values used normalization equation. found normalizing using min max signal strength individual departure can result spurious vanishing bearing estimates range signal strengths observed large. Using full range signal strength values project database avoid .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"estimate-vanishing-bearings-step-by-step","dir":"Articles","previous_headings":"","what":"Estimate vanishing bearings: step-by-step","title":"Vanishing bearings","text":"now walk estimate vanishing bearings following steps: Load required R packages Load data Select individuals show clear departures station Get departure time individual Estimate vanishing bearings Plot vanishing bearing map","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"load-the-required-packages","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Load the required packages","title":"Vanishing bearings","text":"First install following packages install.packages() (see Chapter 2 - Installing packages help), load :","code":"library(circular) library(tidyverse) library(motus) library(ggplot2) library(jpeg) library(ggmap) library(lubridate)  #Make sure working in UTC  Sys.setenv(TZ = \"UTC\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"load-the-sample-data","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Load the sample data","title":"Vanishing bearings","text":"sample data used chapter includes detections three Magnolia Warblers tagged Old Cut field research station Long Point Bird Observatory Ontario, Canada, Morbey et al. (2017). warblers tagged released spring 2015. sample data included motusData R package “vanishBearing.rda” file. order access data, need first install motusData package, prior running code chapter:","code":"# load the motusData package, which contains the sample data for this chapter library(motusData)   # Load the sample data we provided from 3 individual warblers departing Old Cut # during the Spring of 2015.  # We also do a couple manipulations here, to reorder the levels of the # recvSiteName factor, and order the data by time.  df.vanish <- vanishBearing %>%   rename(time = ts) %>%   mutate(recvSiteName = reorder(recvSiteName, recvLat),          motusTagID = as.factor(as.character(motusTagID))) %>% # order sites by latitude   arrange(time) # arrange bytime"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"select-individuals-that-show-clear-departure-detections","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Select individuals that show clear departure detections","title":"Vanishing bearings","text":"First, subset data individuals showed clear departures stopover site interest. fact, sample data includes three departures birds know clear departures Old Cut, show step regardless! selecting clear departures, make sure bird departed nearby station, minimizing potential parallax error. look clear departures first plotting latitude time. case, can see birds departing north past several stations:  also make sure bird detected several antennas departure; detections one antenna, vanishing bearing simply direction lone antenna detections. plot signal strength time subset data, show last hours detections bird Old Cut. Let’s try tag # 16823 sample data:  can see typical detection pattern bird departing site, shown decrease movement (beginning roost) around 00:25 UTC, followed increase activity departure site later night 03:00 UTC. Soon leaving site, gets detected five stations north. bird detected departure, can assume departed somewhat close Old Cut station. data, look plots like tagged individuals, purpose vanishing bearings, remove individuals don’t clear departure.","code":"ggplot(data = df.vanish, aes(x = time, y = recvLat, colour = as.factor(recvSiteName))) +    geom_point(pch = 21) +   facet_wrap(~ motusTagID, scales = \"free\", ncol = 1) +   theme_bw() ggplot(data = filter(df.vanish, motusTagID == 16823, time > \"2015-05-30 00:00:00\"),         aes(x = time, y = sig, colour = as.factor(port))) +    theme_bw() +    geom_point(pch = 21) +   facet_grid(recvSiteName ~ .)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"obtain-departure-times","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Obtain departure times","title":"Vanishing bearings","text":"order estimate vanishing bearings based signal strength departure detections, must first determine approximate time bird started departure flight. now, best way manually going set detections bird obtaining approximate time plotting time versus signal strength. Continuing tag 16823, let’s find departure time.  can see complete set detections tag 16823 Old Cut stations bird detected post-departure. subset plot order zoom last minutes detections Old Cut, bird departing . zooming can find exact departure time.  case, can see increase signal strength beginning 3:04 90 260 degree antennas Old Cut. reach peak signal strength 3:04:59, signal strength declines. suggests bird likely south station began ’s departure - signal strength increased peaked passed antenna beams, declined bird moved away (north) Old Cut station. choose peak signal strength, .e., 3:04:59 departure time bird, exclude detections bird likely moving towards station; want ‘approaching’ station signals contribute vanishing bearing, assumes bird moving radially away station. create dataframe departure times bird motusTagIDs, use later data filtering. add departure times two birds sample dataset; keen, can try plots tags 16897 16791 see came departure times:","code":"ggplot(data = filter(df.vanish, motusTagID == 16823),         aes(x = time, y = sig, colour= as.factor(antBearing))) +    theme_bw() +    geom_point() +   facet_grid(recvSiteName ~ .) ggplot(data = filter(df.vanish,                       motusTagID == 16823,                        time > \"2015-05-30 03:03:00\",                        time < \"2015-05-30 03:10:00\"),         aes(x = time, y = sig, colour= as.factor(antBearing))) +    theme_bw() +    geom_point() ## create dataframe and assign column names dep.16823 <- as.data.frame(cbind(16823, \"2015-05-30 03:04:59\"))  ## create dataframes for the other two tags: dep.16867 <- as.data.frame(cbind(16867, \"2015-05-29 01:56:00\")) dep.16791 <- as.data.frame(cbind(16791, \"2015-05-08 02:41:40\"))  ## put them all together df.departTime <- rbind(dep.16823, dep.16867, dep.16791) names(df.departTime) <- c(\"motusTagID\", \"time_depart\")  ## convert time to posixCT using Lubridate functionality df.departTime <- mutate(df.departTime, time_depart = ymd_hms(time_depart))  df.departTime ##   motusTagID         time_depart ## 1      16823 2015-05-30 03:04:59 ## 2      16867 2015-05-29 01:56:00 ## 3      16791 2015-05-08 02:41:40 ## optionally, save to .RDS file to preserve time structure (you could save to ## .csv, but time structure will not be preserved) not run here:  # saveRDS(df.departTime, file = \"./data/departureTimes.RDS\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"calculate-vanishing-bearings-for-individuals-with-departure-times","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Calculate vanishing bearings for individuals with departure times","title":"Vanishing bearings","text":"Now, subset data one individual calculate vanishing bearing. continue individual, motusTagID 16823, using detections including specified departure time: Now post-departure detections bird interested , calculate vanishing bearing. First, normalize signal strengths, discussed , using minimum maximum observed signal strength across data collected receiver. differences range signal strengths detected antennas receiver, might want instead normalize antenna. access entire database sample data, know minimum maximum signal strengths detected Old Cut stations -78.0691 -17.8707, respectively. calculate weighted mean departure angle across entire departure period using circular function. numbers -78.0691 -17.8707 minimum maximum signal strength values Old Cut station. using data, make sure instead use min max signal strength station (using full stations’s data, subset tags analyzing). resulting df.vanish dataframe contains motusTagID, vanishing bearing tag, time seconds/minutes used estimate bearing, receiver’s name coordinates. can make circular plot points individual vanishing bearings arrow mean bearing follows:","code":"## Merge sample data with departure times, subset data, and calculate vanishing bearing  ## Note that we use the recvSiteName to specify the departure station of ## interest. Depending on whether the station has moved or changed names with ## deployments, recvDeployID might be more appropriate.  depart.station <- \"Old Cut\" min.sig <- -78.0691 # normally max/min sig comes from the complete raw data for a station max.sig <- -17.8707  # in this case, right join should drop any individuals that don't have departure # times in df.departTime df.vanishBearing <- right_join(df.vanish, df.departTime, by = \"motusTagID\") %>%   filter(time >= time_depart,          recvSiteName == depart.station) %>%   distinct() %>%   mutate(sig.norm = (sig - (min.sig))/((max.sig)-(min.sig)),           circ.bear = circular(antBearing,                                type = c(\"angles\"),                                units = c(\"degrees\"),                                rotation = c(\"clock\"))) %>%    group_by(motusTagID, recvSiteName, recvLat, recvLon) %>%    summarise(vanish.bearing = weighted.mean(circ.bear, sig.norm, na.rm = FALSE,                                             control.circular = list(type = \"angles\",                                                                     units = \"degrees\",                                                                     template = \"none\",                                                                     rotation = \"clock\")),             minutes.used = as.duration(min(time) %--% max(time)),              .groups = \"drop\") # if you have many bearings/points, can use stack = TRUE plot.circular(df.vanishBearing$vanish.bearing, zero = pi/2) arrows.circular(mean(df.vanishBearing$vanish.bearing), zero = pi/2)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"plot-the-vanishing-bearings-on-a-map","dir":"Articles","previous_headings":"Estimate vanishing bearings: step-by-step","what":"Plot the vanishing bearings on a map","title":"Vanishing bearings","text":"Mapping vanishing bearing(s) ggmap can also great way visualize departure direction bird(s). use Stamen maps show stations orientations antennas detected bird departure, along orientation vanishing bearing. information using ggmap create Google Maps, see Google Maps section Troubleshooting. First, let’s use tag 16823 create map specified map centre, maptype (“terrain”, “roadmap”, “satellite”, “hybrid”), level zoom (integer zoom 3-21, 3 continent level, 10 city-scale). add yellow point stations detections, yellow lines represent antenna bearings detections, red line vanishing bearing:  Lengths yellow red lines represent antenna range exact path bird. departure, detections two stations corroborate vanishing bearing. desired, can print map file follows:","code":"## First we obtain a map of our location of interest, in this case Old Cut map.OC <-  get_stamenmap(bbox = c(left = -80.6, right = -80.2, bottom = 42.5, top = 42.75),                    maptype = \"terrain-background\",                    zoom = 12,                    color = \"color\")  ## Do the following to make a scale bar bb <- attr(map.OC,\"bb\") sbar <- data.frame(lon.start = c(bb$ll.lon + 0.1*(bb$ur.lon - bb$ll.lon)),                    lon.end = c(bb$ll.lon + 0.25*(bb$ur.lon - bb$ll.lon)),                    lat.start = c(bb$ll.lat + 0.1*(bb$ur.lat - bb$ll.lat)),                    lat.end = c(bb$ll.lat + 0.1*(bb$ur.lat - bb$ll.lat)))  sbar$distance <- geosphere::distVincentyEllipsoid(c(sbar$lon.start,sbar$lat.start),                                                   c(sbar$lon.end,sbar$lat.end)) scalebar.length <- 10 sbar$lon.end <- sbar$lon.start +    ((sbar$lon.end-sbar$lon.start)/sbar$distance)*scalebar.length*1000 ptspermm <- 2.83464567  # need this because geom_text uses mm, and themes use pts.  ## To map antenna bearings: ## Create a station dataframe with antenna bearings for all antennas with ## detections for the tag of interest df.stations <- df.vanish %>%   filter(motusTagID == 16823) %>%   select(recvSiteName, antBearing, port, recvLon, recvLat) %>%   distinct()  # determines length of the vectors for antenna bearings and vanishing bearing lines arr.sc <- 0.03  rad <- function(x) {x * pi/180}  ## Now we make the map  ggmap(map.OC) +     geom_point(data = df.stations, aes(x = recvLon, y = recvLat), size = 1,                 colour = \"goldenrod\") +     # Add antenna bearings     geom_segment(data = df.stations,                   aes(x = recvLon, xend = recvLon + (sin(rad(antBearing))*arr.sc),                       y = recvLat, yend = recvLat + (cos(rad(antBearing))*arr.sc)),                   colour = \"goldenrod\") +          # add vanishing bearings     geom_segment(data = filter(df.vanishBearing, motusTagID == 16823),                   aes(x = recvLon, xend = recvLon + (sin(rad(vanish.bearing))*arr.sc),                      y = recvLat, yend = recvLat + (cos(rad(vanish.bearing))*arr.sc),                       colour = motusTagID)) +        # Add scale bar       geom_segment(data = sbar,                  aes(x = lon.start, xend = lon.end,                      y = lat.start, yend = lat.end),                   col = \"black\",                  arrow = arrow(angle = 90, length = unit(0.1, \"cm\"),                                ends = \"both\", type = \"open\")) +     geom_text(data = sbar,               aes(x = (lon.start + lon.end)/2,                   y = lat.start + 0.025*(bb$ur.lat - bb$ll.lat),                   label = paste(format(scalebar.length), 'km')),               hjust = 0.5,               vjust = 0,               size = 8/ptspermm, col = \"black\")  +     labs(x = \"Longitude\", y = \"Latitude\") tiff(file = \"16823vanishBearing.tiff\") print(out.map) dev.off()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/articles/vanishing-bearings.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Vanishing bearings","text":"Morbey, Y.E., K.. Jonasson, J.E. Deakin, .T. Beauchamp, C.G. Guglielmo. 2017. Studies migratory birds bats southern Ontario, 2014-2017 (Projects #20 #50). Data accessed Motus Wildlife Tracking System. Bird Studies Canada. Available: http://www.motus-wts.org. Accessed: May 1, 2018. Sjöberg, S., C. Nilsson. 2015. Nocturnal migratory songbirds adjust travelling direction aloft: evidence radiotelemetry radar study. Biology Letters 11:20150337. Next? Explore articles","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/authors.html","id":null,"dir":"","previous_headings":"","what":"Auteur·rice·s","title":"Auteur·rice·s et Citation","text":"Birds Canada. Auteur·rice, mainteneur·se. John Brzustowski. Auteur·rice. Denis Lepage. Auteur·rice. Steffi LaZerte. Contributeur·rice. Joey Bernard. Contributeur·rice. Lucas Berrigan. Contributeur·rice. Tara Crewe. Contributeur·rice. Zoe Crysler. Contributeur·rice. Jeremy Hussell. Contributeur·rice. Catherine Jardine. Contributeur·rice. Amie MacDonald. Contributeur·rice. Stuart Mackenzie. Contributeur·rice. Paul Morrill. Contributeur·rice. Josh Sayers. Contributeur·rice. Philip Taylor. Contributeur·rice.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Auteur·rice·s et Citation","text":"Birds Canada (2022). motus: Fetch use data Motus Wildlife Tracking System. https://github.com/motusWTS/motus, https://motusWTS.github.io/motus, https://motus.org.","code":"@Manual{,   title = {{motus}: Fetch and use data from the Motus Wildlife Tracking System},   author = {{Birds Canada}},   year = {2022},   url = {https://github.com/motusWTS/motus, https://motusWTS.github.io/motus, https://motus.org}, }"},{"path":"https://MotusWTS.github.io/motus/fr/fr/index.html","id":"motus","dir":"","previous_headings":"","what":"Fetch and use data from the Motus Wildlife Tracking System","title":"Fetch and use data from the Motus Wildlife Tracking System","text":"Placeholder French language version README documentation site.  R package pour le traitement des données de radio-télémétrie automatisée Motus. Consultez le site du package motus pour obtenir des informations détaillées sur l’utilisation.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/index.html","id":"linstallation","dir":"","previous_headings":"","what":"L’installation","title":"Fetch and use data from the Motus Wildlife Tracking System","text":"Et cetera… easiest way install motus Birds Canada’s R-universe: want check work--progress, can install development branches (betaX sandbox) using remotes. Running problems? Check Troubleshooting article","code":"install.packages(\"motus\",                   repos = c(birdscanada = 'https://birdscanada.r-universe.dev',                            CRAN = 'https://cloud.r-project.org')) install.packages(\"remotes\")                     # if don't already have it remotes::install_github(\"motusWTS/motus@beta3\") # the beta branch for v3+"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update batch activity — activity","title":"Add/update batch activity — activity","text":"Download resume download activity table existing Motus database. Batch activity refers number hits detected given batch. Batches large numbers hits may indicate interference thus unreliable hits.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update batch activity — activity","text":"","code":"activity(src, resume = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update batch activity — activity","text":"src src_sqlite object representing database resume Logical. Resume download? Otherwise activity table removed download started beginning.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activity.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Add/update batch activity — activity","text":"function automatically run tagme() function resume = TRUE. activity table exist, created prior downloading. existing activity table, update records.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Add/update batch activity — activity","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))    # Access 'activity' table library(dplyr) #>  #> Attachement du package : ‘dplyr’ #> Les objets suivants sont masqués depuis ‘package:stats’: #>  #>     filter, lag #> Les objets suivants sont masqués depuis ‘package:base’: #>  #>     intersect, setdiff, setequal, union a <- tbl(sql.motus, \"activity\")    # If interrupted and you want to resume if (FALSE) my_tags <- activity(sql.motus, resume = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activityAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update all batch activity — activityAll","title":"Add/update all batch activity — activityAll","text":"Download resume download activityAll table existing Motus database. Batch activity refers number hits detected given batch. Batches large numbers hits may indicate interference thus unreliable hits.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activityAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update all batch activity — activityAll","text":"","code":"activityAll(src, resume = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activityAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update all batch activity — activityAll","text":"src src_sqlite object representing database resume Logical. Resume download? Otherwise activityAll table removed download started beginning.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/activityAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Add/update all batch activity — activityAll","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))    # Get all activity if (FALSE) sql.motus <- activityAll(sql.motus)  # Access 'activityAll' table library(dplyr) a <- tbl(sql.motus, \"activityAll\")    # If interrupted and you want to resume if (FALSE) sql.motus <- activityAll(sql.motus, resume = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/checkVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Verifies the version of the package against the admInfo table of a motus file. Those should match\nif the updateMotusDb function has been properly loaded by the tagme function. — checkVersion","title":"Verifies the version of the package against the admInfo table of a motus file. Those should match\nif the updateMotusDb function has been properly loaded by the tagme function. — checkVersion","text":"Verifies version package admInfo table motus file. match updateMotusDb function properly loaded tagme function.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/checkVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verifies the version of the package against the admInfo table of a motus file. Those should match\nif the updateMotusDb function has been properly loaded by the tagme function. — checkVersion","text":"","code":"checkVersion(src)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/checkVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verifies the version of the package against the admInfo table of a motus file. Those should match\nif the updateMotusDb function has been properly loaded by the tagme function. — checkVersion","text":"src motus sqlite database source","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":null,"dir":"Reference","previous_headings":"","what":"report on or claim ambiguous tag detections — clarify","title":"report on or claim ambiguous tag detections — clarify","text":"detections \"ambiguous\" motus tag finder tell several tags detected, produce signal active time.  motus tag finder uses tag deployment lifetime metadata decide tags seek , notices distinguish two .  Detections tags periods overlap assigned negative motus tag ID represents 2 6 possible real motus tags.  ambiguities might real (.e. two tags transmitting signal active time), due errors tag registration deployment metadata.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"report on or claim ambiguous tag detections — clarify","text":"","code":"clarify(s, id, from, to, all.mine = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"report on or claim ambiguous tag detections — clarify","text":"s dplyr::src tag database, returned tagme() id missing, vector negative motus ambiguous tag IDs wish claim detections.  missing, tags claimed period specified . missing, start time claim ambiguous detections tag(s) id.  missing, claiming detections .  can numeric timestamp, character string compatible lubridate::ymd missing, end time claim ambiguous detections tag(s) id.  missing, claiming detections .  can numeric timestamp, character string compatible lubridate::ymd .mine logical; TRUE, claim ambiguous detections. case, id, ignored. missing, detections ambiguous tag(s) id claimed. Parameters id, , recycled length longest item. claim ambiguous tag T period, runs T overlap period claimed entirely, even extend beyond period; .e. runs split.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"report on or claim ambiguous tag detections — clarify","text":"parameters, returns summary data frame ambiguous tag detections, columns ambigID; integer: negative motus ambiguous tag ID, representing multiple possible real tags numHits; numeric: total number detections ambiguity id1; integer: first possible motus ID real tag detection might represent fullID1; character: fullID first possible real tag, \"Project#MFGID:BI@NOMFREQ(M.MotusID)\" format id2; integer: second possible motus ID real tag detection might represent fullID2; character: fullID second possible real tag, format fullID1 ... id6; integer: sixth possible motus ID real tag detection might represent fullID6; character: fullID sixth possible real tag, format fullID1 motusTagID; integer tag ID ambiguity resolved period tsStart; numeric: timestamp start period ambiguity resolution tsEnd; numeric: timestamp end period ambiguity resolution","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"report on or claim ambiguous tag detections — clarify","text":"function serves two purposes: called database dplyr::src, reports numbers ambiguous detections represent. called id, lets claim ambiguities tag, subsequent processing, appear . function (yet?) report claim motus.org WARNING: undo claim within copy database.  unsure, copy .motus file first, run clarify one copy.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/clarify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"report on or claim ambiguous tag detections — clarify","text":"","code":"## s = tagme(57) ## get a dplyr::src to the tag database for project 57 ## clarify(s)  ## report on the ambiguous tag detections in s ## clarify(all.mine=TRUE) ## claim all ambiguous tag detections as mine ## clarify(id = -57) ## claim all detections of ambiguous tag -57 as mine ## clarify(id = c(-72, -88, -91), from=(\"2017-01-02\"), to=(\"2017-05-06\"))  ## claim all detections of ambiguous tags -72, -88, and -91 from ##   January 2 through May 6, 2017, as mine"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/createRunsFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new filter records that can be applied to runs — createRunsFilter","title":"Create a new filter records that can be applied to runs — createRunsFilter","text":"Create new filter records can applied runs","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/createRunsFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new filter records that can be applied to runs — createRunsFilter","text":"","code":"createRunsFilter(src, filterName, motusProjID = NA, descr = NA, update = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/createRunsFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new filter records that can be applied to runs — createRunsFilter","text":"src dplyr sqlite src, returned dplyr::src_sqlite() filterName unique name given filter motusProjID optional project ID attached filter order share users project. descr optional filter description detailing filter meant update whether filter record gets updated filter name already exists.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/createRunsFilter.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Create a new filter records that can be applied to runs — createRunsFilter","text":"integer filterID","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deleteRunsFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a filter  matching a filter name (and optionally a project ID) — deleteRunsFilter","title":"Delete a filter  matching a filter name (and optionally a project ID) — deleteRunsFilter","text":"Delete filter  matching filter name (optionally project ID)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deleteRunsFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a filter  matching a filter name (and optionally a project ID) — deleteRunsFilter","text":"","code":"deleteRunsFilter(src, filterName, motusProjID = NA, clearOnly = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deleteRunsFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a filter  matching a filter name (and optionally a project ID) — deleteRunsFilter","text":"src dplyr sqlite src, returned dplyr::src_sqlite() filterName unique name given filter motusProjID optional project ID attached filter order share users project. clearOnly boolean. true, remove probability records associated filter, retain filter ","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deleteRunsFilter.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Delete a filter  matching a filter name (and optionally a project ID) — deleteRunsFilter","text":"integer filterID filter deleted","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deprecateBatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and remove deprecated batches — deprecateBatches","title":"Fetch and remove deprecated batches — deprecateBatches","text":"Deprecated batches removed online database local data files. function fetches list deprecated batches (stored 'deprecated' table), , optionally, removes batches tables reference batchIDs","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deprecateBatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and remove deprecated batches — deprecateBatches","text":"","code":"deprecateBatches(src, fetchOnly = FALSE, ask = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deprecateBatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and remove deprecated batches — deprecateBatches","text":"src src_sqlite object representing database fetchOnly Logical. fetch batches deprecated. remove deprecated batches tables. ask Logical. Ask confirmation removing deprecated batches","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/deprecateBatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Fetch and remove deprecated batches — deprecateBatches","text":"","code":"# Download and access data from project 176 in sql format if (FALSE) { # usename and password are both \"motus.sample\" sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))    # Access 'deprecated' table using tbl() from dplyr library(dplyr) tbl(sql.motus, \"deprecated\")  # See that there are deprecated batches in the data filter(tbl(sql.motus, \"alltags\"), batchID == 6000)  # Fetch deprecated batches deprecateBatches(sql.motus, fetchOnly = TRUE)  # Remove deprecated batches (will ask for confirmation unless ask = FALSE) deprecateBatches(sql.motus, ask = FALSE)  # See that there are NO more deprecated batches in the data filter(tbl(sql.motus, \"alltags\"), batchID == 6000) }"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter alltags by activity — filterByActivity","title":"Filter alltags by activity — filterByActivity","text":"activity table used identify batches much noise. Depending value return filtered , returned, identified alltags view column probability. changes database made.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter alltags by activity — filterByActivity","text":"","code":"filterByActivity(   src,   return = \"good\",   view = \"alltags\",   minLen = 3,   maxLen = 5,   maxRuns = 100,   ratio = 0.85 )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter alltags by activity — filterByActivity","text":"src src_sqlite object representing database return Character. One \"good\" (return 'good' runs), \"bad\" (return 'bad' runs), \"\" (return runs, new probability column identifies 'bad' (0) 'good' (1) runs. view Character. view use, one \"alltags\" (faster) \"alltagsGPS\" (GPS data). minLen Numeric. minimum run length allow (equal , runs 'bad') maxLen Numeric. maximum run length allow (equal , runs 'good') maxRuns Numeric. cutoff number runs batch (see Details) ratio Numeric. ratio cutoff runs length 2 number runs batch (see Details)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Filter alltags by activity — filterByActivity","text":"tbl_SQLiteConnection","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Filter alltags by activity — filterByActivity","text":"Runs identified following: runs length >= maxLen GOOD runs length <= minLen BAD Runs length minLen maxLen BAD following true: belong batch number runs >= maxRuns ratio runs length 2 number runs total >= ratio","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/filterByActivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Filter alltags by activity — filterByActivity","text":"","code":"#' # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  tbl_good <- filterByActivity(sql.motus) tbl_bad <- filterByActivity(sql.motus, return = \"bad\") tbl_all <- filterByActivity(sql.motus, return = \"all\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Return accessible projects and receivers — getAccess","title":"Return accessible projects and receivers — getAccess","text":"Return projects receivers accessible given credentials","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return accessible projects and receivers — getAccess","text":"","code":"getAccess()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Return accessible projects and receivers — getAccess","text":"","code":"if (FALSE) { getAccess() }"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GPS variables — getGPS","title":"Get GPS variables — getGPS","text":"improve speed, alltags view include GPS-related variables gpsLat, gpsLon, gpsAlt. alltagsGPS view include GPS-related variables, take time load. function accepts source returns GPS data associated hitIDs alltags view. Optionally, users can supply subset alltags view return GPS data associated specific hitIDs present subset.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GPS variables — getGPS","text":"","code":"getGPS(src, data = NULL, by = \"daily\", cutoff = NULL, keepAll = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GPS variables — getGPS","text":"src src_sqlite object representing motus database data src_sqlite object data.frame. Optional subset alltags view. Must ts, batchID hitID minimum. Numeric/Character. Either time minutes join GPS locations hits, \"daily\" \"closest\". join GPS locations daily time blocks closest temporal match (see Details). cutoff Numeric. maximum allowable time minutes hit GPS timestamps matching hits GPS = 'closest'. Defaults NULL (maximum). keepAll Logical. Return hits regardless whether GPS match? Defaults FALSE.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Get GPS variables — getGPS","text":"Data frame linking hitID gpsLat, gpsLon gpsAlt. = 'daily' = 'X', output includes: hitID - ID associated hit gpsLat \\ gpsLon \\ gpsAlt - median location calculated available GPS points gpsTs_min \\ gps_Ts_max - range GPS timestamps associated GPS points binned = 'closest' = 'X', output includes: hitID - ID associated hit gpsID - ID closest GPS point aligned hitID gpsLat \\ gpsLon \\ gpsAlt - location GPS point gpsTs - timestamp GPS point","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Get GPS variables — getGPS","text":"three different methods matching GPS data hitIDs related timestamps (ts). = X X duration minutes. ts converted specific time block duration X. Median GPS lat/longs time block returned, matching associated hitID time blocks. = \"daily\" (default). Similar = X except duration 24hr. = \"closest\" Individual GPS lat/lons returned, matching closest hitID timestamp. Use cutoff specify maximum allowable time timestamps (defaults none).","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getGPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Get GPS variables — getGPS","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # Match hits to GPS within 24hrs (daily) of each other my_gps <- getGPS(sql.motus) my_gps #> [1] hitID  gpsTs  gpsLat gpsLon gpsAlt #> <0 lignes> (ou 'row.names' de longueur nulle)  # Note that the sample data doesn't have GPS hits so this will be an  # empty data frame for project 176.  # Match hits to GPS within 15min of each other my_gps <- getGPS(sql.motus, by = 15) my_gps #> [1] hitID  gpsTs  gpsLat gpsLon gpsAlt #> <0 lignes> (ou 'row.names' de longueur nulle)  # Match hits to GPS according to the closest timestamp my_gps <- getGPS(sql.motus, by = \"closest\") my_gps #> [1] hitID  gpsTs  gpsLat gpsLon gpsAlt #> <0 lignes> (ou 'row.names' de longueur nulle)  # Match hits to GPS according to the closest timestamp, but limit to within # 20min of each other my_gps <- getGPS(sql.motus, by = \"closest\", cutoff = 20) my_gps #> [1] hitID  gpsTs  gpsLat gpsLon gpsAlt #> <0 lignes> (ou 'row.names' de longueur nulle)  # To return all hits, regardless of whether they match a GPS record  my_gps <- getGPS(sql.motus, keepAll = TRUE) my_gps #> # A tibble: 188,354 × 4 #>      hitID gpsLat gpsLon gpsAlt #>    <int64>  <dbl>  <dbl>  <dbl> #>  1   45107     NA     NA     NA #>  2   45108     NA     NA     NA #>  3   45109     NA     NA     NA #>  4   45110     NA     NA     NA #>  5   45111     NA     NA     NA #>  6  199885     NA     NA     NA #>  7  199886     NA     NA     NA #>  8  199887     NA     NA     NA #>  9  199888     NA     NA     NA #> 10  199889     NA     NA     NA #> # … with 188,344 more rows  # Alternatively, use the alltagsGPS view: dplyr::tbl(sql.motus, \"alltagsGPS\") #> # Source:   table<alltagsGPS> [?? x 65] #> # Database: sqlite 3.37.2 #> #   [/home/runner/work/_temp/Library/motus/extdata/project-176.motus] #>     hitID runID batchID      ts tsCorrected   sig sigsd noise  freq freqsd  slop #>     <int> <int>   <int>   <dbl>       <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1  45107  8886      53  1.45e9 1445858390.    52     0   -96     4      0  1e-4 #>  2  45108  8886      53  1.45e9 1445858429.    54     0   -96     4      0  1e-4 #>  3  45109  8886      53  1.45e9 1445858477.    55     0   -96     4      0  1e-4 #>  4  45110  8886      53  1.45e9 1445858516.    52     0   -96     4      0  1e-4 #>  5  45111  8886      53  1.45e9 1445858564.    49     0   -96     4      0  1e-4 #>  6 199885 23305      64  1.45e9 1445857924.    33     0   -96     4      0  1e-4 #>  7 199886 23305      64  1.45e9 1445857983.    41     0   -96     4      0  1e-4 #>  8 199887 23305      64  1.45e9 1445858041.    29     0   -96     4      0  1e-4 #>  9 199888 23305      64  1.45e9 1445858089.    41     0   -96     4      0  1e-4 #> 10 199889 23305      64  1.45e9 1445858147.    45     0   -96     4      0  1e-4 #> # … with more rows, and 54 more variables: burstSlop <dbl>, done <int>, #> #   motusTagID <int>, ambigID <int>, port <chr>, nodeNum <chr>, runLen <int>, #> #   motusFilter <dbl>, bootnum <int>, tagProjID <int>, mfgID <chr>, #> #   tagType <chr>, codeSet <chr>, mfg <chr>, tagModel <chr>, tagLifespan <dbl>, #> #   nomFreq <dbl>, tagBI <dbl>, pulseLen <dbl>, tagDeployID <int>, #> #   speciesID <int>, markerNumber <chr>, markerType <chr>, #> #   tagDeployStart <dbl>, tagDeployEnd <dbl>, tagDepLat <dbl>, …"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getMotusDBSrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the src_sqlite for a receiver or tag database — getMotusDBSrc","title":"Get the src_sqlite for a receiver or tag database — getMotusDBSrc","text":"Receiver database files names like \"SG-1234BBBK06EA.motus\" \"Lotek-12345.motus\", project database files names like \"project-52.motus\".","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getMotusDBSrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the src_sqlite for a receiver or tag database — getMotusDBSrc","text":"","code":"getMotusDBSrc(   recv = NULL,   proj = NULL,   create = FALSE,   dbDir = motus_vars$dbDir )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getMotusDBSrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the src_sqlite for a receiver or tag database — getMotusDBSrc","text":"recv receiver serial number proj integer motus project number exactly  one proj recv must specified. create new database?  Default: FALSE. semantics src_sqlite()'s parameter name:  DB must already exist unless specify create = TRUE dbDir path folder existing receiver databases Default: motus_vars$dbDir, set current folder getwd() library loaded.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getMotusDBSrc.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Get the src_sqlite for a receiver or tag database — getMotusDBSrc","text":"src_sqlite receiver; receiver new, database empty, correct schema.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a dataframe containing runs — getRuns","title":"Returns a dataframe containing runs — getRuns","text":"Specifically runID motusTagID, ambigID tsBegin tsEnd (timestamp) range runs, filtered optional parameters. match.partial parameter (default = TRUE) determines timestamp filtering works. match.partial FALSE, runID's included tsBegin tsEnd falls ts.min ts.max (includes runs entirely contained specified range). match.partial TRUE, runID's returned whenever run partially matches specified period.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a dataframe containing runs — getRuns","text":"","code":"getRuns(   src,   ts.min = NA,   ts.max = NA,   match.partial = TRUE,   motusTagID = c(),   ambigID = c() )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a dataframe containing runs — getRuns","text":"src dplyr sqlite src, returned dplyr::src_sqlite() ts.min minimum timestamp used filter dataframe, Default: NA ts.max maximum timestamp used filter dataframe, Default: NA match.partial whether runs partially overlap specified ts range included, Default: TRUE motusTagID vector Motus tag ID's used filter resulting dataframe, Default: c() ambigID vector ambig ID's used filter resulting dataframe, Default: c()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRuns.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Returns a dataframe containing runs — getRuns","text":"dataframe containing runID, motusTagID ambigID (applicable) runs","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRunsFilters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find runFilters — getRunsFilters","title":"Find runFilters — getRunsFilters","text":"Returns dataframe runFilters records matching filter name (optionally project ID) stored local database.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRunsFilters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find runFilters — getRunsFilters","text":"","code":"getRunsFilters(src, filterName, motusProjID = NA)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRunsFilters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find runFilters — getRunsFilters","text":"src dplyr sqlite src, returned dplyr::src_sqlite() filterName unique name given filter motusProjID optional project ID attached filter order share users project.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/getRunsFilters.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Find runFilters — getRunsFilters","text":"dplyr sqlite object","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/gpsAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update all GPS points — gpsAll","title":"Add/update all GPS points — gpsAll","text":"Download resume download gpsAll table existing Motus database. Batch activity refers number hits detected given batch. Batches large numbers hits may indicate interference thus unreliable hits.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/gpsAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update all GPS points — gpsAll","text":"","code":"gpsAll(src, resume = TRUE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/gpsAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update all GPS points — gpsAll","text":"src src_sqlite object representing database resume Logical. Resume download? Otherwise activity table removed download started beginning.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/gpsAll.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Add/update all GPS points — gpsAll","text":"function automatically run tagme() function resume = TRUE. activity table exist, created prior downloading. existing activity table, update records.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/gpsAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Add/update all GPS points — gpsAll","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))    # Get all GPS points if (FALSE) sql.motus <- gpsAll(sql.motus)  # Access 'gpsAll' table library(dplyr) g <- tbl(sql.motus, \"gpsAll\")    # gpsAll resumes a previous download by default # If you want to delete this original data and do a fresh download,  # use resume = FALSE if (FALSE) sql.motus <- gpsAll(sql.motus, resume = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/listRunsFilters.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a dataframe of the filters stored in the local database. — listRunsFilters","title":"Returns a dataframe of the filters stored in the local database. — listRunsFilters","text":"Returns dataframe filters stored local database.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/listRunsFilters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a dataframe of the filters stored in the local database. — listRunsFilters","text":"","code":"listRunsFilters(src)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/listRunsFilters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a dataframe of the filters stored in the local database. — listRunsFilters","text":"src dplyr sqlite src, returned dplyr::src_sqlite()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/listRunsFilters.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Returns a dataframe of the filters stored in the local database. — listRunsFilters","text":"dataframe","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update all metadata — metadata","title":"Update all metadata — metadata","text":"Updates entire metadata receivers tags Motus server. Contrary tagme, function retrieves entire set metadata tags receivers, pertinent detections local file.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update all metadata — metadata","text":"","code":"metadata(src, projectIDs = NULL, replace = TRUE, delete = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update all metadata — metadata","text":"src src_sqlite object representing database (either tag receiver) projectIDs optional integer vector Motus projects IDs metadata obtained; default: NULL, meaning obtain metadata tags receivers permissions allow. replace logical scalar; TRUE (default), existing data replace existing metadata newly acquired ones. delete logical scalar; Default = FALSE. TRUE, entire metadata tables cleared (projects) re-importing metadata.","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Update all metadata — metadata","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))                     # Add extended metadata to your file if (FALSE) metadata(sql.motus)    # Access different metadata tables library(dplyr) tbl(sql.motus, \"species\") #> # Source:   table<species> [?? x 6] #> # Database: sqlite 3.37.2 #> #   [/home/runner/work/_temp/Library/motus/extdata/project-176.motus] #>       id english                french                    scientific group  sort #>    <int> <chr>                  <chr>                     <chr>      <chr> <int> #>  1  4180 Semipalmated Plover    Pluvier semipalmé         Charadriu… BIRDS    NA #>  2  4670 Red Knot               Bécasseau maubèche        Calidris … BIRDS    NA #>  3  4680 Sanderling             Bécasseau sanderling      Calidris … BIRDS    NA #>  4  4690 Semipalmated Sandpiper Bécasseau semipalmé       Calidris … BIRDS    NA #>  5  4760 White-rumped Sandpiper Bécasseau à croupion bla… Calidris … BIRDS    NA #>  6  4780 Pectoral Sandpiper     Bécasseau à poitrine cen… Calidris … BIRDS    NA #>  7  4820 Dunlin                 Bécasseau variable        Calidris … BIRDS    NA #>  8  4980 American Woodcock      Bécasse d'Amérique        Scolopax … BIRDS    NA #>  9 15560 Gray-cheeked Thrush    Grive à joues grises      Catharus … BIRDS    NA #> 10 19050 White-crowned Sparrow  Bruant à couronne blanche Zonotrich… BIRDS    NA tbl(sql.motus, \"projs\") #> # Source:   table<projs> [?? x 5] #> # Database: sqlite 3.37.2 #> #   [/home/runner/work/_temp/Library/motus/extdata/project-176.motus] #>      id name                              label tagsPermissions sensorsPermissi… #>   <int> <chr>                             <chr>           <int>            <int> #> 1    47 Red Knot staging and migration e… Niles              NA               NA #> 2    57 Selva Colombia                    Selva              NA               NA #> 3    82 Maine - American Woodcock         RBro…              NA               NA #> 4   146 Neonicotinoid insecticides and m… NEON…              NA               NA #> 5   176 Sample Data                       Samp…              NA               NA tbl(sql.motus, \"tagDeps\") #> # Source:   table<tagDeps> [?? x 24] #> # Database: sqlite 3.37.2 #> #   [/home/runner/work/_temp/Library/motus/extdata/project-176.motus] #>    tagID deployID projectID    tsStart      tsEnd deferSec speciesID markerType #>    <int>    <int>     <int>      <dbl>      <dbl>    <dbl>     <int> <chr>      #>  1 10811     1077        47 1414479600 1438585200        0      4670 metal band #>  2 16011     1798       176 1438515600 1450352400        0      4690 metal band #>  3 17357     1818       176 1439277600 1451114400        0      4760 metal band #>  4 16035     1823       176 1439371200 1451208000        0      4690 metal band #>  5 16036     1824       176 1439371200 1451208000        0      4690 metal band #>  6 16037     1825       176 1439807400 1451644200        0      4690 metal band #>  7 16038     1826       176 1439807400 1451644200        0      4690 metal band #>  8 16039     1827       176 1439804400 1451641200        0      4690 metal band #>  9 16044     1832       176 1439362800 1451199600        0      4760 metal band #> 10 16047     1839       176 1441908000 1457632800        0      4670 metal band #> # … with more rows, and 16 more variables: markerNumber <chr>, sex <chr>, #> #   age <chr>, latitude <dbl>, longitude <dbl>, elevation <dbl>, #> #   comments <chr>, test <int>, attachment <chr>, tsStartCode <chr>, #> #   tsEndCode <chr>, bandNumber <chr>, id <int>, bi <int>, fullID <chr>, #> #   status <chr> # Etc."},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and use data from the Motus Wildlife Tracking System — motus","title":"Fetch and use data from the Motus Wildlife Tracking System — motus","text":"motus R package retrieving telemetry data Motus Wildlife Tracking System http://motus.org.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motus.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Fetch and use data from the Motus Wildlife Tracking System — motus","text":"detailed walk-though instructions check walk-throughs articles Commonly used functions: Download telemetry data tagme() tellme() metadata() checkVersion() Create data filters listRunsFilters() getRunsFilters() createRunsFilter() writeRunsFilter() deleteRunsFilter() Summarize data tagSum() tagSumSite() simSiteDet() siteSum() siteSumDaily() siteTrans() Plot data plotAllTagsCoord() plotAllTagsSite() plotDailySiteSum() plotRouteMap() plotSite() plotSiteSig() plotTagSig() Sunrises sets sunRiseSet() timeToSunriset()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motus.html","id":"r-f-rences","dir":"Reference","previous_headings":"","what":"Références","title":"Fetch and use data from the Motus Wildlife Tracking System — motus","text":"Motus Wildlife Tracking System http://motus.org","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motusLogout.html","id":null,"dir":"Reference","previous_headings":"","what":"Forget login credentials for motus. — motusLogout","title":"Forget login credentials for motus. — motusLogout","text":"requests motus data server calling function require re-entering username password.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motusLogout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forget login credentials for motus. — motusLogout","text":"","code":"motusLogout()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motusLogout.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Forget login credentials for motus. — motusLogout","text":"TRUE.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/motusLogout.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Forget login credentials for motus. — motusLogout","text":"function just resets items NULL: motus_vars$authToken motus_vars$userLogin motus_vars$userPassword Due active bindings, subsequent calls functions need prompt login.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/nodeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update nodeData — nodeData","title":"Add/update nodeData — nodeData","text":"Download resume download 'nodeData' table existing Motus database. nodeData contains information regarding 'health' portable node units.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/nodeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update nodeData — nodeData","text":"","code":"nodeData(src, resume = FALSE)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/nodeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update nodeData — nodeData","text":"src src_sqlite object representing database resume Logical. Resume download? Otherwise nodeData table removed download started beginning.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/nodeData.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Add/update nodeData — nodeData","text":"function automatically run tagme() function resume = TRUE. nodeData table exist, created prior downloading. existing nodeData table, update records. Note records CTT tags possibility nodeData. Node metadata found nodeDeps table, updated along metadata.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/nodeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Add/update nodeData — nodeData","text":"","code":"# download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))    # Access `nodeData` table library(dplyr) a <- tbl(sql.motus, \"nodeData\")    # If you just want to download `nodeData` if (FALSE) my_tags <- nodeData(sql.motus)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsCoord.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot all tag detections by latitude or longitude — plotAllTagsCoord","title":"Plot all tag detections by latitude or longitude — plotAllTagsCoord","text":"Plot latitude/longitude vs time (UTC rounded hour) tag using .motus detection data. Coordinate default taken receivers deployment latitude metadata.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsCoord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot all tag detections by latitude or longitude — plotAllTagsCoord","text":"","code":"plotAllTagsCoord(   data,   coordinate = \"recvDeployLat\",   ts = \"ts\",   tagsPerPanel = 5 )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsCoord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot all tag detections by latitude or longitude — plotAllTagsCoord","text":"data selected table .motus data, eg. \"alltags\", data.frame detection data including minimum variables recvDeployName, fullID, mfgID, date/time, latitude longitude coordinate column name obtain location values, default set recvDeployLat ts column date/time object numeric POSIXct, defaults ts tagsPerPanel number tags panel plot, default 5","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsCoord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plot all tag detections by latitude or longitude — plotAllTagsCoord","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltags\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))                     # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\"                 library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltags\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # Plot tbl file tbl.alltags with default GPS latitude data and 5 tags per panel plotAllTagsCoord(tbl.alltags)   # Plot an sql file tbl.alltags with 10 tags per panel plotAllTagsCoord(tbl.alltags, tagsPerPanel = 10)   # Plot dataframe df.alltags using receiver deployment latitudes with default # 5 tags per panel plotAllTagsCoord(df.alltags, coordinate = \"recvDeployLat\")   # Plot dataframe df.alltags using LONGITUDES and 10 tags per panel # But only works if non-NA \"gpsLon\"! if (FALSE) plotAllTagsCoord(df.alltags, coordinate = \"gpsLon\", tagsPerPanel = 10) # Plot dataframe df.alltags using lat for select motus tagIDs plotAllTagsCoord(filter(df.alltags, motusTagID %in% c(19129, 16011, 17357)),                   tagsPerPanel = 1)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsSite.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot all tag detections by deployment — plotAllTagsSite","title":"Plot all tag detections by deployment — plotAllTagsSite","text":"Plot deployment (ordered latitude) vs time (UTC) tag","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsSite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot all tag detections by deployment — plotAllTagsSite","text":"","code":"plotAllTagsSite(data, coordinate = \"recvDeployLat\", tagsPerPanel = 5)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot all tag detections by deployment — plotAllTagsSite","text":"data selected table .motus data, eg. \"alltags\", data.frame detection data including minimum variables recvDeployName, fullID, mfgID, date/time, latitude longitude coordinate column receiver latitude/longitude values use, defaults recvDeployLat tagsPerPanel number tags panel plot, default 5","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotAllTagsSite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plot all tag detections by deployment — plotAllTagsSite","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltags\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltags\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()   # Plot detections of dataframe df.alltags by site ordered by latitude, with # default 5 tags per panel plotAllTagsSite(df.alltags)   # Plot detections of dataframe df.alltags by site ordered by latitude, with # 10 tags per panel plotAllTagsSite(df.alltags, tagsPerPanel = 10)   # Plot detections of tbl file tbl.alltags by site ordered by receiver # deployment latitude plotAllTagsSite(tbl.alltags, coordinate = \"recvDeployLon\")   # Plot tbl file tbl.alltags using 3 tags per panel for species Red Knot plotAllTagsSite(filter(tbl.alltags, speciesEN == \"Red Knot\"), tagsPerPanel = 3)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotDailySiteSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots number of detections and tags, daily, for a specified site — plotDailySiteSum","title":"Plots number of detections and tags, daily, for a specified site — plotDailySiteSum","text":"Plots total number detections across tags, total number tags detected per day specified site.  Depends siteSumDaily function.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotDailySiteSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots number of detections and tags, daily, for a specified site — plotDailySiteSum","text":"","code":"plotDailySiteSum(data, recvDeployName)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotDailySiteSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots number of detections and tags, daily, for a specified site — plotDailySiteSum","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, sig, recvDeployName, ts recvDeployName name site plot","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotDailySiteSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plots number of detections and tags, daily, for a specified site — plotDailySiteSum","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()   # Plot of all tag detections at site Longridge using dataframe df.alltags plotDailySiteSum(df.alltags, recvDeployName = \"Longridge\")   # Plot of all tag detections at site Niapiskau using tbl file tbl.alltags plotDailySiteSum(df.alltags, recvDeployName = \"Niapiskau\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotRouteMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map of tag routes and sites coloured by id — plotRouteMap","title":"Map of tag routes and sites coloured by id — plotRouteMap","text":"Google map routes Motus tag detections coloured ID.  User defines date range show points receivers operational point date range.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotRouteMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map of tag routes and sites coloured by id — plotRouteMap","text":"","code":"plotRouteMap(   data,   zoom = 3,   lat = NULL,   lon = NULL,   maptype = \"terrain\",   recvStart = NULL,   recvEnd = NULL )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotRouteMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map of tag routes and sites coloured by id — plotRouteMap","text":"data .motus sql file zoom integer.  Values 3 21, 3 continent level, 10 city-scale lat numeric vector. Top bottom latitude bounds. NULL (default) calculated data lon numeric vector. Left right longitude bounds. NULL (default) calculated data maptype map type display, can : \"terrain\" , \"toner\", \"watercolor\", option available get_stamenmap(). recvStart start date date range active receivers. NULL uses full data range recvEnd end date date range active receivers. NULL uses full data range","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotRouteMap.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Map of tag routes and sites coloured by id — plotRouteMap","text":"default function uses Stamen maps","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotRouteMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Map of tag routes and sites coloured by id — plotRouteMap","text":"","code":"# You must use a .motus sql file, instructions to load using tagme() are # below  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)   # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # Plot routemap of all detection data, with \"terrain\" maptype, and receivers # active between 2016-01-01 and 2017-01-01 plotRouteMap(sql.motus, recvStart = \"2016-01-01\", recvEnd = \"2016-12-31\") #> Source : http://tile.stamen.com/terrain/3/1/2.png #> Source : http://tile.stamen.com/terrain/3/2/2.png #> Source : http://tile.stamen.com/terrain/3/1/3.png #> Source : http://tile.stamen.com/terrain/3/2/3.png"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSite.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot all tags by site — plotSite","title":"Plot all tags by site — plotSite","text":"Plot tag ID vs time tags detected site, coloured antenna bearing","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot all tags by site — plotSite","text":"","code":"plotSite(data, sitename = unique(data$recvDeployName))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot all tags by site — plotSite","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables ts, antBearing, fullID, recvDeployName sitename Character vector. sites plot? Defaults unique sites.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plot all tags by site — plotSite","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # Plot all sites within file for tbl file tbl.alltags plotSite(tbl.alltags)   # Plot only detections at a specific site; Piskwamish for data.frame # df.alltags plotSite(filter(df.alltags, recvDeployName == \"Piskwamish\"))   #Plot only detections for specified tags for data.frame df.alltags plotSite(filter(df.alltags, motusTagID %in% c(16047, 16037, 16039)))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSiteSig.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot signal strength of all tags by a specified site — plotSiteSig","title":"Plot signal strength of all tags by a specified site — plotSiteSig","text":"Plot signal strength vs time tags detected specified site, coloured antenna","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSiteSig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot signal strength of all tags by a specified site — plotSiteSig","text":"","code":"plotSiteSig(data, recvDeployName)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSiteSig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot signal strength of all tags by a specified site — plotSiteSig","text":"data selected table .motus data, eg. \"alltags\", data.frame detection data including minimum variables antBearing, ts, recvDeployLat, sig, fullID, recvDeployName recvDeployName name recvDeployName","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotSiteSig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plot signal strength of all tags by a specified site — plotSiteSig","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltags\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltags\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # Plot all tags for site Piskwamish plotSiteSig(tbl.alltags, recvDeployName = \"Piskwamish\")   # Plot select tags for site Piskwamish  plotSiteSig(filter(df.alltags, motusTagID %in% c(16037, 16039, 16035)),    recvDeployName = \"Netitishi\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotTagSig.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot signal strength of all detections for a specified tag by site — plotTagSig","title":"Plot signal strength of all detections for a specified tag by site — plotTagSig","text":"Plot signal strength vs time specified tag, faceted site (ordered latitude) coloured antenna","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotTagSig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot signal strength of all detections for a specified tag by site — plotTagSig","text":"","code":"plotTagSig(data, motusTagID)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotTagSig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot signal strength of all detections for a specified tag by site — plotTagSig","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDeployName, gpsLat, gpsLon motusTagID numeric motusTagID display plot","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/plotTagSig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Plot signal strength of all detections for a specified tag by site — plotTagSig","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # Plot signal strength of a specified tag using dataframe df.alltags plotTagSig(df.alltags, motusTagID = 16047)   # Plot signal strength of a specified tag using tbl file tbl.alltags plotTagSig(tbl.alltags, motusTagID = 16035)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/simSiteDet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe of simultaneous detections at multiple sites — simSiteDet","title":"Create a dataframe of simultaneous detections at multiple sites — simSiteDet","text":"Creates dataframe consisting detections tags detected two receiver time.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/simSiteDet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe of simultaneous detections at multiple sites — simSiteDet","text":"","code":"simSiteDet(data)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/simSiteDet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe of simultaneous detections at multiple sites — simSiteDet","text":"data selected table .motus data, eg. \"alltags\", data.frame detection data including minimum variables motusTagID, recvDeployName, ts","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/simSiteDet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Create a dataframe of simultaneous detections at multiple sites — simSiteDet","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltags\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltags\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # To get a data.frame of just simultaneous detections from a tbl file # tbl.alltags simSites <- simSiteDet(tbl.alltags)  # To get a data.frame of just simultaneous detections from a dataframe # df.alltags simSites <- simSiteDet(df.alltags)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize and plot detections of all tags by site — siteSum","title":"Summarize and plot detections of all tags by site — siteSum","text":"Creates summary first last detection site, length time first last detection, number tags, total number detections site.  Plots total number detections across tags, total number tags detected site.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize and plot detections of all tags by site — siteSum","text":"","code":"siteSum(data, units = \"hours\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize and plot detections of all tags by site — siteSum","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, sig, recvDeployLat, recvDeployLon, recvDeployName, ts, gpsLat, gpsLon units units display time difference, defaults \"hours\", options include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSum.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Summarize and plot detections of all tags by site — siteSum","text":"data.frame columns: site: site first_ts: time first detection specified site last_ts: time last detection specified site tot_ts: total amount time first last detection specified site, output specified unit (defaults \"hours\") num.tags: total number unique tags detected specified site num.det: total number tag detections specified site","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Summarize and plot detections of all tags by site — siteSum","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()   # Create site summaries for all sites within detection data with time in # default hours using data.frame df.alltags site_summary <- siteSum(tbl.alltags)   # Create site summaries for only select sites with time in minutes sub <- filter(df.alltags, recvDeployName %in%                  c(\"Niapiskau\", \"Netitishi\", \"Old Cur\", \"Washkaugou\")) site_summary <- siteSum(sub, units = \"mins\")   # Create site summaries for only a select species, Red Knot site_summary <- siteSum(filter(df.alltags, speciesEN == \"Red Knot\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSumDaily.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize daily detections of all tags by site — siteSumDaily","title":"Summarize daily detections of all tags by site — siteSumDaily","text":"Creates summary first last daily detection site, length time first last detection, number tags, total number detections site day. siteSum, daily site.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSumDaily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize daily detections of all tags by site — siteSumDaily","text":"","code":"siteSumDaily(data, units = \"hours\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSumDaily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize daily detections of all tags by site — siteSumDaily","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, sig, recvDeployName, ts units units display time difference, defaults \"hours\", options include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSumDaily.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Summarize daily detections of all tags by site — siteSumDaily","text":"data.frame columns: recvDeployName: site name deployment date: date summarized first_ts: time first detection specified \"date\" \"recvDeployName\" last_ts: time last detection specified \"date\" \"recvDeployName\" tot_ts: total amount time first last detection \"recvDeployName\" \"date, output specified unit (defaults \"hours\") num.tags: total number unique tags detected \"recvDeployName\", \"date\" num.det: total number detections \"recvDeployName\", \"date\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteSumDaily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Summarize daily detections of all tags by site — siteSumDaily","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")  # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()   # Create site summaries for all sites within detection data with time in # minutes using tbl file tbl.alltags daily_site_summary <- siteSumDaily(tbl.alltags, units = \"mins\")  # Create site summaries for only select sites with time in minutes using tbl # file tbl.alltags sub <- filter(tbl.alltags, recvDeployName %in% c(\"Niapiskau\", \"Netitishi\",                                                   \"Old Cut\", \"Washkaugou\")) daily_site_summary <- siteSumDaily(sub, units = \"mins\")  # Create site summaries for only a select species, Red Knot, with default # time in hours using data frame df.alltags daily_site_summary <- siteSumDaily(filter(df.alltags,                                           speciesEN == \"Red Knot\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize transitions between sites for each tag — siteTrans","title":"Summarize transitions between sites for each tag — siteTrans","text":"Creates dataframe transitions sites; detections ordered detection time, \"transitions\" identified period final detection site x (possible \"departure\"), first detection (possible \"arrival\") site y (ordered chronologically). row contains last detection time lat/lon site x, first detection time lat/lon site y, distance site pair, time detections, rate movement detections, bearing site pairs.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize transitions between sites for each tag — siteTrans","text":"","code":"siteTrans(data, latCoord = \"recvDeployLat\", lonCoord = \"recvDeployLon\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize transitions between sites for each tag — siteTrans","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables ts, motusTagID, tagDeployID, recvDeployName, latitude/longitude latCoord variable numeric latitude values, defaults recvDeployLat lonCoord variable numeric longitude values, defaults recvDeployLon","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteTrans.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Summarize transitions between sites for each tag — siteTrans","text":"data.frame columns: fullID: fullID Motus registered tag ts.x: time last detection tag site.x (\"departure\" time) lat.x: latitude site.x lon.x: longitude site.x site.x: first site transition pair (\"departure\" site) ts.y: time first detection tag site.y (\"arrival\" time) lat.y: latitude site.y lon.y: longitude site.y site.y: second site transition pair (\"departure\" site) tot_ts: length time ts.x ts.y (seconds) dist: total straight line distance site.x site.y (metres), see latLonDist function sensorgnome package details rate: overall rate movement (tot_ts/dist), metres/second bearing: bearing first last detection sites, see bearing function geosphere package details","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/siteTrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Summarize transitions between sites for each tag — siteTrans","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")    ## convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\"  df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # View all site transitions for all detection data from tbl file tbl.alltags transitions <- siteTrans(tbl.alltags)  # View site transitions for only tag 16037 from data.frame df.alltags using # gpsLat/gpsLon transitions <- siteTrans(filter(df.alltags, motusTagID == 16037),                            latCoord = \"gpsLat\", lonCoord = \"gpsLon\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"Export results sqlite query .rds file using limited memory (Linux, OS X; Windows)","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"","code":"sqliteToRDS(   con,   query,   bind.data = data.frame(),   out,   classes = NULL,   rowsPerBlock = 10000,   stringsAsFactors = TRUE,   factorQueries = NULL )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"con connection sqlite database query character scalar; query con; entire results query written .rds file, query can include 'limit' 'offset' phrases. bind.data values query parameters, ; see DBI::dbGetQuery().  Defaults data.frame(x=0L), .e. trivial data.frame meant pass sanity checks imposed dbGetQuery() character scalar; name file query results saved.  end \".rds\". classes named list character vectors; classes subset columns parameter query rowsPerBlock maximum number rows fetched DB time; limits maximum memory consumed function. Default: 10000 stringsAsFactors string columns exported factors?  default value TRUE, size disk size memory data.frame upon subsequent read smaller, cost run separate query string column determine levels.  separate queries might just expensive full query, case specify simpler queries obtaining factor levels using factorQueries.  can specify FALSE still request specific text columns exported factors including 'factor' appropriate slot classes parameter. factorQueries named character vector queries quickly obtaining levels columns wish factors.  list consulted string column, stringsAsFactors TRUE, column whose entry classes factor.  Names list column names, values query perform get factor levels column.  query return distinct set levels. specify factorQueries, , sqliteToRDS might take $N+1$ times long run otherwise, $N$ number factor columns.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"integer scalar; number result rows written file .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":"d-tails","dir":"Reference","previous_headings":"","what":"Détails","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"Typically, exporting contents sqlite database table R .rds file meant reading entire table R data.frame, using saveRDS().  requires memory proportional size data.frame, sufficiently large swap partition, still work.  However, experience Intel core-i7 server 4 cores @ 3.4 GHz, 32 G RAM, 256 SSD swap shows largest sites still slow server grind processing one site time.  permit work lower spec server multiple sites potentially processed , need much smaller memory footprint, even expense considerably longer running time. function serializes results SQLite query data.frame .rds file, using fixed amount memory depend size results.  sqlite stores data row--row, .rds files store column column, main challenge transpose data without memory.  single run query, distributing columns files, concatenating compressing final .rds file via shell command.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sqliteToRDS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Export results of an sqlite query to an .rds file using limited\nmemory (Linux, OS X; not Windows) — sqliteToRDS","text":"End users really working -disk .sqlite version data, want maintain backward compatibility users' existing code.  Also, details algorithm function depend encoding inherent files serialize.c Rinternals.h R source tree. resulting .rds file uses bzip2 compression, works recent versions R, might break readRDS() older versions. algorithm, ignoring headers footers, : column query result, open temporary output file results remaining fetch block query results distribute data block among column files blocks distributed, close temporary files concatenate disk target .rds file result .rds file non-XDR little-endian format, read quickly memory. Data types converted : sqlite real: written 8-byte doubles sqlite int: written 4-byte signed integers logical (see ) sqlite text: written factor Additionally, class() attributes can specified columns. \"logical\" \"integer\" specified column, written native vector type. result rows query, R value NULL saved file . function currently works linux (OS X?) use shell commands cat bzip2.  author appreciate information implement Windows platforms.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sunRiseSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain sunrise and sunset times — sunRiseSet","title":"Obtain sunrise and sunset times — sunRiseSet","text":"Creates adds sunrise sunset column data.frame containing latitude, longitude, date/time POSIXct numeric.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sunRiseSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain sunrise and sunset times — sunRiseSet","text":"","code":"sunRiseSet(data, lat = \"recvDeployLat\", lon = \"recvDeployLon\", ts = \"ts\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sunRiseSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain sunrise and sunset times — sunRiseSet","text":"data selected table .motus detection data, eg. \"alltags\", data.frame detection data including minimum variables date/time, latitude, longitude lat variable latitude values, defaults recvDeployLat lon variable longitude values, defaults recvDeployLon ts variable time UTC numeric POSIXct, defaults ts","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sunRiseSet.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Obtain sunrise and sunset times — sunRiseSet","text":"original dataframe provided, following additional columns: sunrise: sunrise time date location provided ts lat/lon per row sunset: sunset time date location provided ts lat/lon per row","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/sunRiseSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Obtain sunrise and sunset times — sunRiseSet","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltags\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # Extract alltags, collect (flatten to data frame), add sunrise/sunset cols: sun <- sunRiseSet(sql.motus) #> 'data' is a complete motus data base, using 'alltags' view  # For other views, extract them first: library(dplyr) tbl.alltagsGPS <- tbl(sql.motus, \"alltagsGPS\")   # Add sunrise/sunset (after flattening to data frame) sun <- sunRiseSet(tbl.alltagsGPS)  # Or, submit a flattened data frame: df.alltagsGPS <- collect(tbl.alltagsGPS)  # Add sunrise/sunset sun <- sunRiseSet(df.alltagsGPS)  # Get sunrise and sunset information from tbl.alltags using gps lat/lon # Note this only works if there are non-NA values in gpsLat/gpsLon if (FALSE) sun <- sunRiseSet(tbl.alltagsGPS, lat = \"gpsLat\", lon = \"gpsLon\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSum.html","id":null,"dir":"Reference","previous_headings":"","what":"General summary of detections for each tag — tagSum","title":"General summary of detections for each tag — tagSum","text":"Creates summary tag first last detection time, first last detection site, length time first last detection, straight line distance first last detection site, rate movement, bearing","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General summary of detections for each tag — tagSum","text":"","code":"tagSum(data)"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General summary of detections for each tag — tagSum","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, fullID, recvDeployLat, recvDeployLon, recvDeployName, ts, gpsLat, gpsLon","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSum.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"General summary of detections for each tag — tagSum","text":"data.frame columns: fullID: fullID Motus registered tag first_ts: time first detection tag last_ts: time last detection tag first_site: first detection site tag last_site: last detection site tag lat.x: latitude first deteciton site tag lon.x: longitude first deteciton site tag lat.y: latitude last deteciton site tag lon.y: longitude last deteciton site tag tot_ts: length time first last detection tag (seconds) dist: total straight line distance first last detection site (metres), see latLonDist function sensorgnome package details rate: overall rate movement (tot_ts/dist), metres/second bearing: bearing first last detection sites, see bearing function geosphere package details","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"General summary of detections for each tag — tagSum","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags %>%    collect() %>%    as.data.frame()  # Create tag summary for all tags within detection data using tbl file # tbl.alltags tag_summary <- tagSum(tbl.alltags)  # Create site summaries for only select tags using tbl file tbl.alltags tag_summary <- tagSum(filter(tbl.alltags,                               motusTagID %in% c(16047, 16037, 16039)))  # Create site summaries for only a select species using data.frame df.alltags tag_summary <- tagSum(filter(df.alltags, speciesEN == \"Red Knot\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSumSite.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize detections of all tags by site — tagSumSite","title":"Summarize detections of all tags by site — tagSumSite","text":"Creates summary tag first last detection time site, length time first last detection site, total number detections site.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSumSite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize detections of all tags by site — tagSumSite","text":"","code":"tagSumSite(data, units = \"hours\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSumSite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize detections of all tags by site — tagSumSite","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables motusTagID, fullID, recvDeployName, ts, recvDeployLat, recvDeployLon, gpsLat, gpsLon units units display time difference, defaults \"hours\", options include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagSumSite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Summarize detections of all tags by site — tagSumSite","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")   # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" df.alltags <- tbl.alltags  %>%    collect() %>%    as.data.frame()   # Create tag summaries for all tags within detection data with time in # minutes with tbl file tbl.alltags tag_site_summary <- tagSumSite(tbl.alltags, units = \"mins\")  # Create tag summaries for only select tags with time in default hours with # data.frame df.alltags tag_site_summary <- tagSumSite(filter(df.alltags,                                        motusTagID %in% c(16047, 16037, 16039)))  # Create tag summaries for only a select species with data.frame df.alltags tag_site_summary <- tagSumSite(filter(df.alltags, speciesEN == \"Red Knot\"))"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagme.html","id":null,"dir":"Reference","previous_headings":"","what":"Download motus tag detections to a database — tagme","title":"Download motus tag detections to a database — tagme","text":"Download motus tag detections database","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download motus tag detections to a database — tagme","text":"","code":"tagme(   projRecv,   update = TRUE,   new = FALSE,   dir = getwd(),   countOnly = FALSE,   forceMeta = FALSE,   rename = FALSE,   skipActivity = FALSE,   skipNodes = FALSE,   skipDeprecated = FALSE )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download motus tag detections to a database — tagme","text":"projRecv integer. Project code motus.org, character scalar receiver serial number update logical. new data downloaded merged? Defaults TRUE unless new database (case must specify update = TRUE explicitly). new logical. new database?  Default: FALSE specify new = TRUE want new local copy database created. Otherwise, tagme() assumes database already exists, stop error find current directory. mainly prevent inadvertent downloads large amounts data already ! dir character. Path folder storing databases Defaults current directory; .e. getwd(). countOnly logical. FALSE, default, requested database updates. Otherwise, return count items need transferred order update database. forceMeta logical. TRUE, re-get metadata tags receivers, even already . rename logical. current SQLite database older version, automatically rename database backup purposes download newest version. FALSE (default), user prompted action. skipActivity logical. Skip checking downloading activity? See ?activity details skipNodes logical. Skip checking downloading nodeData? See ?nodeData details skipDeprecated logical. Skip fetching list deprecated batches stored deprecated. See ?deprecateBatches() details.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagme.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Download motus tag detections to a database — tagme","text":"dplyr::src_sqlite (possibly updated) database, list counts countOnly==TRUE","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tagme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Download motus tag detections to a database — tagme","text":"","code":"## create and open a local tag database for motus project 14 in the ## current directory  # t = tagme(14, new=TRUE)  ## update and open the local tag database for motus project 14; ## it must already exist and be in the current directory  # t = tagme(14, update=TRUE)  ## update and open the local tag database for a receiver; ## it must already exist and be in the current directory  # t = tagme(\"SG-1234BBBK4567\", update=TRUE)  ## open the local tag database for a receiver, without ## updating it  # t = tagme(\"SG-1234BBBK4567\")  ## open the local tag database for a receiver, but ## tell 'tagme' that it is in a specific directory  # t = tagme(\"SG-1234BBBK4567\", dir=\"Projects/gulls\")  ## update all existing project and receiver databases in \\code{dir} # tagme()"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tellme.html","id":null,"dir":"Reference","previous_headings":"","what":"report how much new data motus has for a tag detection database — tellme","title":"report how much new data motus has for a tag detection database — tellme","text":"\"new\" means data already local database.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tellme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"report how much new data motus has for a tag detection database — tellme","text":"","code":"tellme(projRecv, new = FALSE, dir = getwd())"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tellme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"report how much new data motus has for a tag detection database — tellme","text":"projRecv integer scalar project code motus.org, character scalar receiver serial number new logical scalar: new database?  Default: FALSE specify new=TRUE want new local copy database created.  Otherwise, tellme() assumes database already exists, stop error find current directory.  mainly prevent inadvertent downloads large amounts data already ! dir path folder storing databases Default: current directory; .e. getwd()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tellme.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"report how much new data motus has for a tag detection database — tellme","text":"named list items: numBatches: number batches data database numRuns: number runs tags detections new data numHits: number new detections numGPS: number new GPS fixes covering new detections numBytes: estimated size download, bytes.  estimate uncompressed size, data gz-compressed transfer, number bytes download typically going smaller number factor 2 .","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tellme.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"report how much new data motus has for a tag detection database — tellme","text":"specify new=TRUE database already exist, created (empty).","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. expr() quo() quote one expression. quo() wraps quoted expression quosure. plural variants rlang::exprs() quos() return list quoted expressions quosures. enexpr() enquo() capture expression supplied argument user current function (enquo() wraps expression quosure). enexprs() enquos() capture multiple expressions supplied arguments, including .... exprs() exported avoid conflicts Biobase::exprs(), therefore one always use rlang::exprs(). learn tidy eval use tools, visit http://rlang.r-lib.org Metaprogramming section Advanced R.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/timeToSunriset.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","title":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","text":"Creates adds columns time , time sunrise/sunset based column POSIXct dates/times dataframe must contain latitude, longitude, date/time variable","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/timeToSunriset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","text":"","code":"timeToSunriset(   data,   lat = \"recvDeployLat\",   lon = \"recvDeployLon\",   ts = \"ts\",   units = \"hours\" )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/timeToSunriset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","text":"data selected table .motus data, eg. \"alltagsGPS\", data.frame detection data including minimum variables date/time, latitude, longitude lat variable latitude values, defaults recvDeployLat lon variable longitude values, defaults recvDeployLon ts variable time UTC numeric POSIXct, defaults ts units units display time difference, defaults \"hours\", options include \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/timeToSunriset.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","text":"original dataframe provided, following additional columns: sunrise: sunrise time date location provided ts recvDeployLat/recvDeployLon per row sunset: sunset time date location provided ts recvDeployLat/recvDeployLon per row ts_to_set: time next sunset \"ts\", units default \"hours\" ts_since_set: time previous sunset since \"ts\", units default \"hours\" ts_to_rise: time next sunrise \"ts\", units default \"hours\" ts_since_rise: time previous sunrise since \"ts\", units default \"hours\"","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/timeToSunriset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Exemples","title":"Obtain time to and from sunrise/sunset for a dataframe containing POSIXct times — timeToSunriset","text":"","code":"# You can use either a selected tbl from .motus eg. \"alltagsGPS\", or a # data.frame, instructions to convert a .motus file to all formats are below.  # download and access data from project 176 in sql format # usename and password are both \"motus.sample\" if (FALSE) sql.motus <- tagme(176, new = TRUE, update = TRUE)  # OR use example sql file included in `motus` sql.motus <- tagme(176, update = FALSE,                     dir = system.file(\"extdata\", package = \"motus\"))  # convert sql file \"sql.motus\" to a tbl called \"tbl.alltags\" library(dplyr) tbl.alltags <- tbl(sql.motus, \"alltagsGPS\")  # convert the tbl \"tbl.alltags\" to a data.frame called \"df.alltags\" # let's also filter down to one day df.alltags <- tbl.alltags %>%    collect() %>%    mutate(time = lubridate::as_datetime(tsCorrected),          date = lubridate::as_date(time)) %>%   filter(date == \"2015-10-31\") %>%   as.data.frame()  # Get sunrise and sunset information with units in minutse sunrise <- timeToSunriset(df.alltags, units = \"mins\")  # Get sunrise and sunset information with units in hours using gps lat/lon # using data.frame df.alltags. NOTE: This only works if there are non-NA # gpsLat/gpsLon if (FALSE) sunrise <- timeToSunriset(df.alltags, lat = \"gpsLat\", lon = \"gpsLon\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/writeRunsFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to the local database the probabilities associated with runs for a filter — writeRunsFilter","title":"Write to the local database the probabilities associated with runs for a filter — writeRunsFilter","text":"Write local database probabilities associated runs filter","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/writeRunsFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to the local database the probabilities associated with runs for a filter — writeRunsFilter","text":"","code":"writeRunsFilter(   src,   filterName,   motusProjID = NA,   df,   overwrite = TRUE,   delete = FALSE )"},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/writeRunsFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to the local database the probabilities associated with runs for a filter — writeRunsFilter","text":"src dplyr sqlite src, returned dplyr::src_sqlite() filterName unique name given filter motusProjID optional project ID attached filter order share users project. df dataframe containing runID, motusTagID probability values save local database overwrite boolean. TRUE ensures existing records matching filterName runID get replaced delete boolean. TRUE, removes existing filter records associated filterName re-inserts ones contained dataframe. option used dataframe provided contains entire set filters want save.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/reference/writeRunsFilter.html","id":"valeur-de-retour","dir":"Reference","previous_headings":"","what":"Valeur de retour","title":"Write to the local database the probabilities associated with runs for a filter — writeRunsFilter","text":"dplyr sqlite object refering filter created","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"new-features-5-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"motus 5.0.0","text":"New allruns allrunsGPS views quicker first passes data large datasets New field/column attachment tagDeps table New field/column numGPSfix activity activityAll tables New field/columns stationName stationID recvDeps tables gpsAll() activityAll() functions allow downloading complete records GPS points Activity Deprecated batches now returned new table deprecated tagme() deprecateBatches() function fetch (optionally) remove deprecated batches relevant tables","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-5-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 5.0.0","text":"fixed bug filterByActivity() resulting NA probabilities fixed bug getGPS() crashed ts converted date/time format","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.6","text":"fixed bug resulting missing metadata tables, permission errors resulting JSON formatting fixed bug forceMeta force metadata download previously downloaded tags fixed warnings produced plotRouteMap() old versions R","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.5","text":"removed null constraint tsEnd nodeDeps","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.4","text":"fixed bug resulting occasional unending download loop GPS fixes receivers","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.3","text":"fixed bug resulting error “applicable method ‘db_has_table’…”","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.2","text":"fixed rounding error filterByActivity() resulting mismatched hourBins fixed incorrect receiver types model assignment CTT receivers","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.1","text":"Corrected server address","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"small-changes-4-0-0","dir":"Changelog","previous_headings":"","what":"Small Changes","title":"motus 4.0.0","text":"Add test metadata tagDeps table identify test deployments (tagDeployTest alltags alltagsGPS views) Add age sex metadata tagDeps table Add lat_mean, lon_mean, n_fixes gps table Add nodets, firmware, solarVolt, solarCurrent, solarCurrentCumul, lat, lon nodeData table Add validated hits table","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-4-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 4.0.0","text":"Downloading hits longer fails extra columns supplied server","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"internal-changes-4-0-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"motus 4.0.0","text":"Internal workings major motusUpdateXXX() functions split multiple smaller functions make testing efficient Added mockery package mock testing","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"small-changes-3-0-1","dir":"Changelog","previous_headings":"","what":"Small Changes","title":"motus 3.0.1","text":"Receiver downloads now similar progress messages Project downloads Move GPS fields alltags alltagsGPS New function getGPS() adds GPS fields data Remove NULL constraint motusTagIDs ambiguous tag view","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-3-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 3.0.1","text":"Receivers updating new version errored download start Allow renaming (possible) large databases data updates Continue checking activity/nodeData even first batch returns 0 nodeDataId corrected nodeDataID Warn users custom views need removed prior updating","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"big-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Big Changes","title":"motus 3.0.0 (2019-10-16)","text":"Includes new CTT antennas Includes nodeData nodeDeps tables node related data metadata.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"small-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Small Changes","title":"motus 3.0.0 (2019-10-16)","text":"Replace cat() message() (now suppressible) Add recvUtcOffset tsCorrected alltags view Add gpsID gps table, gpsID now primary key index","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-3-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"motus 3.0.0 (2019-10-16)","text":"Fixed bug tagme(..., countOnly = TRUE) failed","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"big-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Big Changes","title":"motus 2.0.0 (2019-08-12)","text":"Combined motus motusClient packages","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"motus 2.0.0 (2019-08-12)","text":"New function activity() adds hit activity batches new activity table SQLite database. useful detecting ‘noisy’ periods hits may unreliable. New function filterByActivity() allows users create custom filters using data activity table. Added NEWS.md file track changes package Added support httr server queries Added ?motus package documentation Added unit testing","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"motus 2.0.0 (2019-08-12)","text":"Fix references ggmap avoid get Google API keys","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"other-2-0-0","dir":"Changelog","previous_headings":"","what":"Other","title":"motus 2.0.0 (2019-08-12)","text":"Moved dependencies import rather depend, improve attach times, reduce conflict user-attached packages (note dplyr loaded users now) examples tested","code":""},{"path":[]},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-sep-1-0-0","dir":"Changelog","previous_headings":"","what":"2017 Sep 25","title":"motus 1.0.0","text":"tagme() / tellme() supporting functions now motusClient package, automatically installed github first time library(motus) installing motus package. automatic installation motusClient fails, can install directly like :","code":"install_github(\"motusWTS/motusClient\")"},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-jul-1-0-0","dir":"Changelog","previous_headings":"","what":"2017 Jul 28","title":"motus 1.0.0","text":"tagme() - updating local copies receiver tag project detection databases tellme() - asking much data need transferred corresponding tagme() call latest version data server works package now running new box, database populated data 4 (!) receivers. Raw files receivers re-run latest version tag finder added database. users willing wrestle alpha code actually interested getting data using package now.","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-jun-1-0-0","dir":"Changelog","previous_headings":"","what":"2017 Jun 10","title":"motus 1.0.0","text":"srvTagsForAmbiguities() srvMetadataForReceivers()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-jun-1-0-0-1","dir":"Changelog","previous_headings":"","what":"2017 Jun 8","title":"motus 1.0.0","text":"srvGPSforTagProject() srvMetadataForTags()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-jun-1-0-0-2","dir":"Changelog","previous_headings":"","what":"2017 Jun 6","title":"motus 1.0.0","text":"srvRunsForReceiverProject() srvHitsForTagProject() srvHitsForReceiverProject() srvGPSforReceiverProject()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-may-1-0-0","dir":"Changelog","previous_headings":"","what":"2017 May 31","title":"motus 1.0.0","text":"srvRunsForTagProject() srvBatchesForTagProject() srvBatchesForReceiverProject()","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-may-1-0-0-1","dir":"Changelog","previous_headings":"","what":"2017 May 19","title":"motus 1.0.0","text":"authentication local data server","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2017-feb-1-0-0","dir":"Changelog","previous_headings":"","what":"2017 Feb 7","title":"motus 1.0.0","text":"R functions post-processing","code":""},{"path":"https://MotusWTS.github.io/motus/fr/fr/news/index.html","id":"2016-dec-1-0-0","dir":"Changelog","previous_headings":"","what":"2016 Dec 1","title":"motus 1.0.0","text":"nothing (yes, nothing working; fact, nothing working beautifully)","code":""}]
