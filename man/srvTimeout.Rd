% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/srvTimeout.R
\name{srvTimeout}
\alias{srvTimeout}
\title{Sets global options for timeouts}
\usage{
srvTimeout(timeout, reset = FALSE)
}
\arguments{
\item{timeout}{Numeric. Number of seconds to wait for a response from the
server. Increase if you're working with a project that requires extra time
to process and serve the data.}

\item{reset}{Logical. Whether to reset the timeout to the default (120s;
default \code{FALSE}). If \code{TRUE}, \code{timeout} is ignored.}
}
\description{
Sets, resets or returns the "motus.timeout" global option used by all API
access functions (including \code{tagme()}). If \code{timeout} is a number and \code{reset}
is \code{FALSE}, the API timeout is set to \code{timeout} number of seconds. If \code{reset}
is \code{TRUE}, the API timeout is reset to the default of 120 seconds. If no
\code{timeout} is defined and \code{reset = FALSE}, the current value of the timeout
is returned.
}
\details{
By default the timeout is 120s, which generally should
give the server sufficient time to prepare the data without having the user
wait for too long if the API is unavailable. However, some projects take
unusually long to compile the data, so a longer timeout may be warranted in
those situations. This is equivalent to \code{options(motus.timeout = timeout)}
}
\examples{
srvTimeout()   # get the timeout value
srvTimeout(5)  # set the timeout value
srvTimeout()   # get the timeout value

\dontrun{
# No problem with default timeouts
t <- tagme(176, new = TRUE)

# But setting the timeout too short results in a server timeout
srvTimeout(0.001)
t <- tagme(176, new = TRUE)
}

}
\seealso{
\code{\link[=resetTimeout]{resetTimeout()}}
}
