% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getGPS.R
\name{getGPS}
\alias{getGPS}
\title{Get GPS variables}
\usage{
getGPS(src, alltags = NULL, by = "daily")
}
\arguments{
\item{src}{src_sqlite object representing the database}

\item{alltags}{src_sqlite object or data.frame Optional subset of the alltags
view. Must have \code{ts}, \code{hitID} and \code{batchID} at the minimum.}

\item{by}{Numeric/Character Either the time in minutes overwhich to join GPS
locations to hits, or "daily" or "closest". To join GPS locations by daily
timeblocks or by the closest temporal match (see Details).}
}
\value{
Data frame linking hitID to gpsLat, gpsLon and gpsAlt
}
\description{
To improve speed, the \code{alltags} view doesn't include GPS-related variables
such as \code{gpsLat}, \code{gpsLon}, or \code{gpsAlt}. There is a \code{alltagsGPS} view that
does include GPS-related variables, but this will take time to load. This
function accepts a source and returns the GPS data associated with the
\code{bachID}/\code{hitID} combos in the \code{alltags} view. Optionally, users can supply a
subset of the \code{alltags} view to return only GPS data associated with the
specific \code{batchID}/\code{hitID} combos present in the subset.
}
\details{
There are three different methods for matching GPS data to \code{bachID}/\code{hitID}
combos, all related to timestamps (\code{ts}).
\enumerate{
\item \code{by = X} Where \code{X} is a duration in minutes. \code{ts} is converted to a
specific timeblock of duration \code{X}. Median GPS lat/longs for the timeblock
are returned, matching associated \code{batchID}/\code{hitID} timeblocks.
\item \code{by = "daily"} (the default). Similar to \code{by = X} except the duration is
24hr.
\item \code{by = "closest"} Individual GPS lat/lons are returned, matching the
closest \code{batchID}/\code{hitID} timestamp.
}
}
\examples{

# download and access data from project 176 in sql format
# usename and password are both "motus.sample"
\dontrun{sql.motus <- tagme(176, new = TRUE, update = TRUE)}

# OR use example sql file included in `motus`
sql.motus <- tagme(176, update = FALSE, 
                   dir = system.file("extdata", package = "motus"))

my_gps <- getGPS(sql.motus)

# Note that the sample data doesn't have GPS hits so this will be an 
# empty data frame for project 176.

# Alternatively, use the alltagsGPS view:
dplyr::tbl(sql.motus, "alltagsGPS")
}
